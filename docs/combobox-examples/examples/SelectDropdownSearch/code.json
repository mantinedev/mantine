[
  {
    "fileName": "SelectDropdownSearch.tsx",
    "language": "tsx",
    "code": "\nimport { Combobox, InputBase, Input, useCombobox } from '@mantine/core';\n\nconst groceries = [\n  '🍎 Apples',\n  '🍌 Bananas',\n  '🥦 Broccoli',\n  '🥕 Carrots',\n  '🍫 Chocolate',\n  '🍇 Grapes',\n];\n\nexport function SelectDropdownSearch() {\n  const [search, setSearch] = useState('');\n  const combobox = useCombobox({\n    onDropdownClose: () => {\n      combobox.resetSelectedOption();\n      combobox.focusTarget();\n      setSearch('');\n    },\n\n    onDropdownOpen: () => {\n      combobox.focusSearchInput();\n    },\n  });\n\n  const [value, setValue] = useState<string | null>(null);\n\n  const options = groceries\n    .filter((item) => item.toLowerCase().includes(search.toLowerCase().trim()))\n    .map((item) => (\n      <Combobox.Option value={item} key={item}>\n        {item}\n      </Combobox.Option>\n    ));\n\n  return (\n    <Combobox\n      store={combobox}\n      withinPortal={false}\n      onOptionSubmit={(val) => {\n        setValue(val);\n        combobox.closeDropdown();\n      }}\n    >\n      <Combobox.Target>\n        <InputBase\n          component=\"button\"\n          type=\"button\"\n          pointer\n          rightSection={<Combobox.Chevron />}\n          onClick={() => combobox.toggleDropdown()}\n          rightSectionPointerEvents=\"none\"\n        >\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\n        </InputBase>\n      </Combobox.Target>\n\n      <Combobox.Dropdown>\n        <Combobox.Search\n          value={search}\n          onChange={(event) => setSearch(event.currentTarget.value)}\n          placeholder=\"Search groceries\"\n        />\n        <Combobox.Options>\n          {options.length > 0 ? options : <Combobox.Empty>Nothing found</Combobox.Empty>}\n        </Combobox.Options>\n      </Combobox.Dropdown>\n    </Combobox>\n  );\n}\n"
  }
]