[
  {
    "fileName": "SelectAsync.tsx",
    "language": "tsx",
    "code": "\nimport { Combobox, InputBase, Input, Loader, useCombobox } from '@mantine/core';\n\nconst MOCKDATA = [\n  '🍎 Apples',\n  '🍌 Bananas',\n  '🥦 Broccoli',\n  '🥕 Carrots',\n  '🍫 Chocolate',\n  '🍇 Grapes',\n];\n\nfunction getAsyncData() {\n  return new Promise<string[]>((resolve) => {\n    setTimeout(() => resolve(MOCKDATA), 2000);\n  });\n}\n\nexport function SelectAsync() {\n  const [value, setValue] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<string[]>([]);\n\n  const combobox = useCombobox({\n    onDropdownClose: () => combobox.resetSelectedOption(),\n    onDropdownOpen: () => {\n      if (data.length === 0 && !loading) {\n        setLoading(true);\n        getAsyncData().then((response) => {\n          setData(response);\n          setLoading(false);\n          combobox.resetSelectedOption();\n        });\n      }\n    },\n  });\n\n  const options = data.map((item) => (\n    <Combobox.Option value={item} key={item}>\n      {item}\n    </Combobox.Option>\n  ));\n\n  return (\n    <Combobox\n      store={combobox}\n      withinPortal={false}\n      onOptionSubmit={(val) => {\n        setValue(val);\n        combobox.closeDropdown();\n      }}\n    >\n      <Combobox.Target>\n        <InputBase\n          component=\"button\"\n          type=\"button\"\n          pointer\n          rightSection={loading ? <Loader size={18} /> : <Combobox.Chevron />}\n          onClick={() => combobox.toggleDropdown()}\n          rightSectionPointerEvents=\"none\"\n        >\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\n        </InputBase>\n      </Combobox.Target>\n\n      <Combobox.Dropdown>\n        <Combobox.Options>\n          {loading ? <Combobox.Empty>Loading....</Combobox.Empty> : options}\n        </Combobox.Options>\n      </Combobox.Dropdown>\n    </Combobox>\n  );\n}\n"
  }
]