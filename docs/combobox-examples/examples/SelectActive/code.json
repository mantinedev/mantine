[
  {
    "fileName": "SelectActive.tsx",
    "language": "tsx",
    "code": "\nimport { Combobox, InputBase, Input, Group, CheckIcon, useCombobox } from '@mantine/core';\n\nconst groceries = [\n  '🍎 Apples',\n  '🍌 Bananas',\n  '🥦 Broccoli',\n  '🥕 Carrots',\n  '🍫 Chocolate',\n  '🍇 Grapes',\n];\n\nexport function SelectActive() {\n  const combobox = useCombobox({\n    onDropdownClose: () => combobox.resetSelectedOption(),\n    onDropdownOpen: (eventSource) => {\n      if (eventSource === 'keyboard') {\n        combobox.selectActiveOption();\n      } else {\n        combobox.updateSelectedOptionIndex('active');\n      }\n    },\n  });\n\n  const [value, setValue] = useState<string | null>('🥦 Broccoli');\n\n  const options = groceries.map((item) => (\n    <Combobox.Option value={item} key={item} active={item === value}>\n      <Group gap=\"xs\">\n        {item === value && <CheckIcon size={12} />}\n        <span>{item}</span>\n      </Group>\n    </Combobox.Option>\n  ));\n\n  return (\n    <Combobox\n      store={combobox}\n      resetSelectionOnOptionHover\n      withinPortal={false}\n      onOptionSubmit={(val) => {\n        setValue(val);\n        combobox.updateSelectedOptionIndex('active');\n      }}\n    >\n      <Combobox.Target targetType=\"button\">\n        <InputBase\n          component=\"button\"\n          type=\"button\"\n          pointer\n          rightSection={<Combobox.Chevron />}\n          onClick={() => combobox.toggleDropdown()}\n        >\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\n        </InputBase>\n      </Combobox.Target>\n\n      <Combobox.Dropdown>\n        <Combobox.Options>{options}</Combobox.Options>\n      </Combobox.Dropdown>\n    </Combobox>\n  );\n}\n"
  }
]