[
  {
    "fileName": "AsyncAutocomplete.tsx",
    "language": "tsx",
    "code": "import { useState, useRef } from 'react';\nimport { Combobox, TextInput, Loader, useCombobox } from '@mantine/core';\n\nconst MOCKDATA = [\n  '🍎 Apples',\n  '🍌 Bananas',\n  '🥦 Broccoli',\n  '🥕 Carrots',\n  '🍫 Chocolate',\n  '🍇 Grapes',\n  '🍋 Lemon',\n  '🥬 Lettuce',\n  '🍄 Mushrooms',\n  '🍊 Oranges',\n  '🥔 Potatoes',\n  '🍅 Tomatoes',\n  '🥚 Eggs',\n  '🥛 Milk',\n  '🍞 Bread',\n  '🍗 Chicken',\n  '🍔 Hamburger',\n  '🧀 Cheese',\n  '🥩 Steak',\n  '🍟 French Fries',\n  '🍕 Pizza',\n  '🥦 Cauliflower',\n  '🥜 Peanuts',\n  '🍦 Ice Cream',\n  '🍯 Honey',\n  '🥖 Baguette',\n  '🍣 Sushi',\n  '🥝 Kiwi',\n  '🍓 Strawberries',\n];\n\nfunction getAsyncData(searchQuery: string, signal: AbortSignal) {\n  return new Promise<string[]>((resolve, reject) => {\n    signal.addEventListener('abort', () => {\n      reject(new Error('Request aborted'));\n    });\n\n    setTimeout(() => {\n      resolve(\n        MOCKDATA.filter((item) => item.toLowerCase().includes(searchQuery.toLowerCase())).slice(\n          0,\n          5\n        )\n      );\n    }, Math.random() * 1000);\n  });\n}\n\nexport function AsyncAutocomplete() {\n  const combobox = useCombobox({\n    onDropdownClose: () => combobox.resetSelectedOption(),\n  });\n\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<string[] | null>(null);\n  const [value, setValue] = useState('');\n  const [empty, setEmpty] = useState(false);\n  const abortController = useRef<AbortController>();\n\n  const fetchOptions = (query: string) => {\n    abortController.current?.abort();\n    abortController.current = new AbortController();\n    setLoading(true);\n\n    getAsyncData(query, abortController.current.signal)\n      .then((result) => {\n        setData(result);\n        setLoading(false);\n        setEmpty(result.length === 0);\n        abortController.current = undefined;\n      })\n      .catch(() => {});\n  };\n\n  const options = (data || []).map((item) => (\n    <Combobox.Option value={item} key={item}>\n      {item}\n    </Combobox.Option>\n  ));\n\n  return (\n    <Combobox\n      onOptionSubmit={(optionValue) => {\n        setValue(optionValue);\n        combobox.closeDropdown();\n      }}\n      withinPortal={false}\n      store={combobox}\n    >\n      <Combobox.Target>\n        <TextInput\n          label=\"Pick value or type anything\"\n          placeholder=\"Search groceries\"\n          value={value}\n          onChange={(event) => {\n            setValue(event.currentTarget.value);\n            fetchOptions(event.currentTarget.value);\n            combobox.resetSelectedOption();\n            combobox.openDropdown();\n          }}\n          onClick={() => combobox.openDropdown()}\n          onFocus={() => {\n            combobox.openDropdown();\n            if (data === null) {\n              fetchOptions(value);\n            }\n          }}\n          onBlur={() => combobox.closeDropdown()}\n          rightSection={loading && <Loader size={18} />}\n        />\n      </Combobox.Target>\n\n      <Combobox.Dropdown hidden={data === null}>\n        <Combobox.Options>\n          {options}\n          {empty && <Combobox.Empty>No results found</Combobox.Empty>}\n        </Combobox.Options>\n      </Combobox.Dropdown>\n    </Combobox>\n  );\n}\n"
  }
]