[
  {
    "fileName": "AutocompleteLimit.tsx",
    "language": "tsx",
    "code": "import { useState } from 'react';\nimport { Combobox, TextInput, useCombobox } from '@mantine/core';\n\nconst MOCKDATA = Array(100000)\n  .fill(0)\n  .map((_, index) => `Item ${index}`);\n\nfunction getFilteredOptions(data: string[], searchQuery: string, limit: number) {\n  const result: string[] = [];\n\n  for (let i = 0; i < data.length; i += 1) {\n    if (result.length === limit) {\n      break;\n    }\n\n    if (data[i].toLowerCase().includes(searchQuery.trim().toLowerCase())) {\n      result.push(data[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function AutocompleteLimit() {\n  const combobox = useCombobox();\n  const [value, setValue] = useState('');\n  const filteredOptions = getFilteredOptions(MOCKDATA, value, 7);\n\n  const options = filteredOptions.map((item) => (\n    <Combobox.Option value={item} key={item}>\n      {item}\n    </Combobox.Option>\n  ));\n\n  return (\n    <Combobox\n      onOptionSubmit={(optionValue) => {\n        setValue(optionValue);\n        combobox.closeDropdown();\n      }}\n      withinPortal={false}\n      store={combobox}\n    >\n      <Combobox.Target>\n        <TextInput\n          label=\"Pick value or type anything\"\n          placeholder=\"Pick value or type anything\"\n          value={value}\n          onChange={(event) => {\n            setValue(event.currentTarget.value);\n            combobox.openDropdown();\n          }}\n          onClick={() => combobox.openDropdown()}\n          onFocus={() => combobox.openDropdown()}\n          onBlur={() => combobox.closeDropdown()}\n        />\n      </Combobox.Target>\n\n      <Combobox.Dropdown>\n        <Combobox.Options>\n          {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\n        </Combobox.Options>\n      </Combobox.Dropdown>\n    </Combobox>\n  );\n}\n"
  }
]