[
  {
    "fileName": "TransferList.tsx",
    "language": "tsx",
    "code": "import { useState } from 'react';\nimport { IconChevronRight } from '@tabler/icons-react';\nimport { Combobox, TextInput, useCombobox, Checkbox, ActionIcon, Group } from '@mantine/core';\nimport classes from './TransferList.module.css';\n\nconst fruits = ['🍎 Apples', '🍌 Bananas', '🍓 Strawberries'];\n\nconst vegetables = ['🥦 Broccoli', '🥕 Carrots', '🥬 Lettuce'];\n\ninterface RenderListProps {\n  options: string[];\n  onTransfer: (options: string[]) => void;\n  type: 'forward' | 'backward';\n}\n\nfunction RenderList({ options, onTransfer, type }: RenderListProps) {\n  const combobox = useCombobox();\n  const [value, setValue] = useState<string[]>([]);\n  const [search, setSearch] = useState('');\n\n  const handleValueSelect = (val: string) =>\n    setValue((current) =>\n      current.includes(val) ? current.filter((v) => v !== val) : [...current, val]\n    );\n\n  const items = options\n    .filter((item) => item.toLowerCase().includes(search.toLowerCase().trim()))\n    .map((item) => (\n      <Combobox.Option\n        value={item}\n        key={item}\n        active={value.includes(item)}\n        onMouseOver={() => combobox.resetSelectedOption()}\n      >\n        <Group gap=\"sm\">\n          <Checkbox\n            checked={value.includes(item)}\n            onChange={() => {}}\n            aria-hidden\n            tabIndex={-1}\n            style={{ pointerEvents: 'none' }}\n          />\n          <span>{item}</span>\n        </Group>\n      </Combobox.Option>\n    ));\n\n  return (\n    <div className={classes.renderList} data-type={type}>\n      <Combobox store={combobox} onOptionSubmit={handleValueSelect}>\n        <Combobox.EventsTarget>\n          <Group wrap=\"nowrap\" gap={0} className={classes.controls}>\n            <TextInput\n              placeholder=\"Search groceries\"\n              classNames={{ input: classes.input }}\n              value={search}\n              onChange={(event) => {\n                setSearch(event.currentTarget.value);\n                combobox.updateSelectedOptionIndex();\n              }}\n            />\n            <ActionIcon\n              radius={0}\n              variant=\"default\"\n              size={36}\n              className={classes.control}\n              onClick={() => {\n                onTransfer(value);\n                setValue([]);\n              }}\n            >\n              <IconChevronRight className={classes.icon} />\n            </ActionIcon>\n          </Group>\n        </Combobox.EventsTarget>\n\n        <div className={classes.list}>\n          <Combobox.Options>\n            {items.length > 0 ? items : <Combobox.Empty>Nothing found....</Combobox.Empty>}\n          </Combobox.Options>\n        </div>\n      </Combobox>\n    </div>\n  );\n}\n\nexport function TransferList() {\n  const [data, setData] = useState<[string[], string[]]>([fruits, vegetables]);\n\n  const handleTransfer = (transferFrom: number, options: string[]) =>\n    setData((current) => {\n      const transferTo = transferFrom === 0 ? 1 : 0;\n      const transferFromData = current[transferFrom].filter((item) => !options.includes(item));\n      const transferToData = [...current[transferTo], ...options];\n\n      const result = [];\n      result[transferFrom] = transferFromData;\n      result[transferTo] = transferToData;\n      return result as [string[], string[]];\n    });\n\n  return (\n    <div className={classes.root}>\n      <RenderList\n        type=\"forward\"\n        options={data[0]}\n        onTransfer={(options) => handleTransfer(0, options)}\n      />\n      <RenderList\n        type=\"backward\"\n        options={data[1]}\n        onTransfer={(options) => handleTransfer(1, options)}\n      />\n    </div>\n  );\n}\n"
  },
  {
    "fileName": "TransferList.module.css",
    "language": "css",
    "code": ".root {\n  display: flex;\n  gap: var(--mantine-spacing-md);\n\n  @media (max-width: em(755px)) {\n    flex-direction: column;\n  }\n}\n\n.controls {\n  [data-type='backward'] & {\n    flex-direction: row-reverse;\n  }\n}\n\n.list {\n  background-color: var(--mantine-color-body);\n  padding: var(--mantine-spacing-xs) rem(6px);\n  border: rem(1px) solid light-dark(var(--mantine-color-gray-4), var(--mantine-color-dark-4));\n  border-top: 0;\n  border-bottom-left-radius: var(--mantine-radius-md);\n  border-bottom-right-radius: var(--mantine-radius-md);\n  min-height: rem(224px);\n}\n\n.input {\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n\n  [data-type='backward'] & {\n    border-left: 0;\n    border-top-left-radius: 0;\n  }\n\n  [data-type='forward'] & {\n    border-right: 0;\n    border-top-right-radius: 0;\n  }\n}\n\n.control {\n  color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-1));\n\n  [data-type='backward'] & {\n    border-top-left-radius: var(--mantine-radius-sm);\n  }\n\n  [data-type='forward'] & {\n    border-top-right-radius: var(--mantine-radius-sm);\n  }\n}\n\n.icon {\n  width: rem(18px);\n  height: rem(18px);\n\n  [data-type='backward'] & {\n    transform: rotate(180deg);\n  }\n}\n"
  }
]