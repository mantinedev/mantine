[
  {
    "fileName": "MultiSelectCreatable.tsx",
    "language": "tsx",
    "code": "import { useState } from 'react';\nimport { PillsInput, Pill, Combobox, CheckIcon, Group, useCombobox } from '@mantine/core';\n\nconst groceries = ['🍎 Apples', '🍌 Bananas', '🥦 Broccoli', '🥕 Carrots', '🍫 Chocolate'];\n\nexport function MultiSelectCreatable() {\n  const combobox = useCombobox({\n    onDropdownClose: () => combobox.resetSelectedOption(),\n    onDropdownOpen: () => combobox.updateSelectedOptionIndex('active'),\n  });\n\n  const [search, setSearch] = useState('');\n  const [data, setData] = useState(groceries);\n  const [value, setValue] = useState<string[]>([]);\n\n  const exactOptionMatch = data.some((item) => item === search);\n\n  const handleValueSelect = (val: string) => {\n    setSearch('');\n\n    if (val === '$create') {\n      setData((current) => [...current, search]);\n      setValue((current) => [...current, search]);\n    } else {\n      setValue((current) =>\n        current.includes(val) ? current.filter((v) => v !== val) : [...current, val]\n      );\n    }\n  };\n\n  const handleValueRemove = (val: string) =>\n    setValue((current) => current.filter((v) => v !== val));\n\n  const values = value.map((item) => (\n    <Pill key={item} withRemoveButton onRemove={() => handleValueRemove(item)}>\n      {item}\n    </Pill>\n  ));\n\n  const options = data\n    .filter((item) => item.toLowerCase().includes(search.trim().toLowerCase()))\n    .map((item) => (\n      <Combobox.Option value={item} key={item} active={value.includes(item)}>\n        <Group gap=\"sm\">\n          {value.includes(item) ? <CheckIcon size={12} /> : null}\n          <span>{item}</span>\n        </Group>\n      </Combobox.Option>\n    ));\n\n  return (\n    <Combobox store={combobox} onOptionSubmit={handleValueSelect} withinPortal={false}>\n      <Combobox.DropdownTarget>\n        <PillsInput onClick={() => combobox.openDropdown()}>\n          <Pill.Group>\n            {values}\n\n            <Combobox.EventsTarget>\n              <PillsInput.Field\n                onFocus={() => combobox.openDropdown()}\n                onBlur={() => combobox.closeDropdown()}\n                value={search}\n                placeholder=\"Search values\"\n                onChange={(event) => {\n                  combobox.updateSelectedOptionIndex();\n                  setSearch(event.currentTarget.value);\n                }}\n                onKeyDown={(event) => {\n                  if (event.key === 'Backspace' && search.length === 0) {\n                    event.preventDefault();\n                    handleValueRemove(value[value.length - 1]);\n                  }\n                }}\n              />\n            </Combobox.EventsTarget>\n          </Pill.Group>\n        </PillsInput>\n      </Combobox.DropdownTarget>\n\n      <Combobox.Dropdown>\n        <Combobox.Options>\n          {options}\n\n          {!exactOptionMatch && search.trim().length > 0 && (\n            <Combobox.Option value=\"$create\">+ Create {search}</Combobox.Option>\n          )}\n\n          {exactOptionMatch && search.trim().length > 0 && options.length === 0 && (\n            <Combobox.Empty>Nothing found</Combobox.Empty>\n          )}\n        </Combobox.Options>\n      </Combobox.Dropdown>\n    </Combobox>\n  );\n}\n"
  }
]