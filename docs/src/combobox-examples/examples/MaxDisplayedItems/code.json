[
  {
    "fileName": "MaxDisplayedItems.tsx",
    "language": "tsx",
    "code": "import { useState } from 'react';\nimport { PillsInput, Pill, Input, Combobox, CheckIcon, Group, useCombobox } from '@mantine/core';\n\nconst groceries = ['🍎 Apples', '🍌 Bananas', '🥦 Broccoli', '🥕 Carrots', '🍫 Chocolate'];\n\nconst MAX_DISPLAYED_VALUES = 2;\n\nexport function MaxDisplayedItems() {\n  const combobox = useCombobox({\n    onDropdownClose: () => combobox.resetSelectedOption(),\n    onDropdownOpen: () => combobox.updateSelectedOptionIndex('active'),\n  });\n\n  const [value, setValue] = useState<string[]>([]);\n\n  const handleValueSelect = (val: string) =>\n    setValue((current) =>\n      current.includes(val) ? current.filter((v) => v !== val) : [...current, val]\n    );\n\n  const handleValueRemove = (val: string) =>\n    setValue((current) => current.filter((v) => v !== val));\n\n  const values = value\n    .slice(\n      0,\n      MAX_DISPLAYED_VALUES === value.length ? MAX_DISPLAYED_VALUES : MAX_DISPLAYED_VALUES - 1\n    )\n    .map((item) => (\n      <Pill key={item} withRemoveButton onRemove={() => handleValueRemove(item)}>\n        {item}\n      </Pill>\n    ));\n\n  const options = groceries.map((item) => (\n    <Combobox.Option value={item} key={item} active={value.includes(item)}>\n      <Group gap=\"sm\">\n        {value.includes(item) ? <CheckIcon size={12} /> : null}\n        <span>{item}</span>\n      </Group>\n    </Combobox.Option>\n  ));\n\n  return (\n    <Combobox store={combobox} onOptionSubmit={handleValueSelect} withinPortal={false}>\n      <Combobox.DropdownTarget>\n        <PillsInput pointer onClick={() => combobox.toggleDropdown()}>\n          <Pill.Group>\n            {value.length > 0 ? (\n              <>\n                {values}\n                {value.length > MAX_DISPLAYED_VALUES && (\n                  <Pill>+{value.length - (MAX_DISPLAYED_VALUES - 1)} more</Pill>\n                )}\n              </>\n            ) : (\n              <Input.Placeholder>Pick one or more values</Input.Placeholder>\n            )}\n\n            <Combobox.EventsTarget>\n              <PillsInput.Field\n                type=\"hidden\"\n                onBlur={() => combobox.closeDropdown()}\n                onKeyDown={(event) => {\n                  if (event.key === 'Backspace') {\n                    event.preventDefault();\n                    handleValueRemove(value[value.length - 1]);\n                  }\n                }}\n              />\n            </Combobox.EventsTarget>\n          </Pill.Group>\n        </PillsInput>\n      </Combobox.DropdownTarget>\n\n      <Combobox.Dropdown>\n        <Combobox.Options>{options}</Combobox.Options>\n      </Combobox.Dropdown>\n    </Combobox>\n  );\n}\n"
  }
]