(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[66353],{1798:(e,n,t)=>{"use strict";t.d(n,{A:()=>s});let s=(0,t(41495).A)("outline","license","License",[["path",{d:"M15 21h-9a3 3 0 0 1 -3 -3v-1h10v2a2 2 0 0 0 4 0v-14a2 2 0 1 1 2 2h-2m2 -4h-11a3 3 0 0 0 -3 3v11",key:"svg-0"}],["path",{d:"M9 7l4 0",key:"svg-1"}],["path",{d:"M9 11l4 0",key:"svg-2"}]])},6620:(e,n,t)=>{"use strict";t.d(n,{A:()=>s});let s=(0,t(41495).A)("outline","code","Code",[["path",{d:"M7 8l-4 4l4 4",key:"svg-0"}],["path",{d:"M17 8l4 4l-4 4",key:"svg-1"}],["path",{d:"M14 4l-4 16",key:"svg-2"}]])},6892:(e,n,t)=>{"use strict";t.d(n,{A:()=>s});let s=(0,t(41495).A)("outline","pencil","Pencil",[["path",{d:"M4 20h4l10.5 -10.5a2.828 2.828 0 1 0 -4 -4l-10.5 10.5v4",key:"svg-0"}],["path",{d:"M13.5 6.5l4 4",key:"svg-1"}]])},24583:(e,n,t)=>{"use strict";t.d(n,{A:()=>s});let s=(0,t(41495).A)("outline","arrow-left","ArrowLeft",[["path",{d:"M5 12l14 0",key:"svg-0"}],["path",{d:"M5 12l6 6",key:"svg-1"}],["path",{d:"M5 12l6 -6",key:"svg-2"}]])},34891:(e,n,t)=>{"use strict";t.d(n,{A:()=>s});let s=(0,t(41495).A)("outline","adjustments","Adjustments",[["path",{d:"M4 10a2 2 0 1 0 4 0a2 2 0 0 0 -4 0",key:"svg-0"}],["path",{d:"M6 4v4",key:"svg-1"}],["path",{d:"M6 12v8",key:"svg-2"}],["path",{d:"M10 16a2 2 0 1 0 4 0a2 2 0 0 0 -4 0",key:"svg-3"}],["path",{d:"M12 4v10",key:"svg-4"}],["path",{d:"M12 18v2",key:"svg-5"}],["path",{d:"M16 7a2 2 0 1 0 4 0a2 2 0 0 0 -4 0",key:"svg-6"}],["path",{d:"M18 4v1",key:"svg-7"}],["path",{d:"M18 9v11",key:"svg-8"}]])},41949:(e,n,t)=>{"use strict";t.d(n,{A:()=>s});let s=(0,t(41495).A)("outline","calendar","Calendar",[["path",{d:"M4 7a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v12a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12z",key:"svg-0"}],["path",{d:"M16 3v4",key:"svg-1"}],["path",{d:"M8 3v4",key:"svg-2"}],["path",{d:"M4 11h16",key:"svg-3"}],["path",{d:"M11 15h1",key:"svg-4"}],["path",{d:"M12 15v3",key:"svg-5"}]])},65433:(e,n,t)=>{"use strict";t.d(n,{A:()=>s});let s=(0,t(41495).A)("outline","switch-2","Switch2",[["path",{d:"M3 17h5l1.67 -2.386m3.66 -5.227l1.67 -2.387h6",key:"svg-0"}],["path",{d:"M18 4l3 3l-3 3",key:"svg-1"}],["path",{d:"M3 7h5l7 10h6",key:"svg-2"}],["path",{d:"M18 20l3 -3l-3 -3",key:"svg-3"}]])},68111:(e,n,t)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/theming/mantine-provider",function(){return t(83528)}])},83528:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>d});var s=t(6029),r=t(16285),a=t(38547),i=t(5262);let o=(0,a.P)(i.XZ.MantineProvider);function l(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"mantineprovider",children:"MantineProvider"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"MantineProvider"})," provides a ",(0,s.jsx)(n.a,{href:"/theming/theme-object",children:"theme object"})," context value, manages color scheme\nchanges and injects ",(0,s.jsx)(n.a,{href:"/styles/css-variables/",children:"CSS variables"}),". It must be rendered at the root of your\napplication and should be used only once."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { createTheme, MantineProvider } from '@mantine/core';\n\nconst theme = createTheme({\n  /** Your theme override here */\n});\n\nfunction Demo() {\n  return (\n    <MantineProvider theme={theme}>\n      {/* Your app here */}\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"mantineprovider-props",children:"MantineProvider props"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"MantineProvider"})," supports the following props:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"interface MantineProviderProps {\n  /** Theme override object */\n  theme?: MantineThemeOverride;\n\n  /** Used to retrieve/set color scheme value in external storage, by default uses `window.localStorage` */\n  colorSchemeManager?: MantineColorSchemeManager;\n\n  /** Default color scheme value used when `colorSchemeManager` cannot retrieve value from external storage, `light` by default */\n  defaultColorScheme?: MantineColorScheme;\n\n  /** Forces color scheme value, if set, MantineProvider ignores `colorSchemeManager` and `defaultColorScheme` */\n  forceColorScheme?: 'light' | 'dark';\n\n  /** CSS selector to which CSS variables should be added, `:root` by default */\n  cssVariablesSelector?: string;\n\n  /** Determines whether theme CSS variables should be added to given `cssVariablesSelector`, `true` by default */\n  withCssVariables?: boolean;\n\n  /** Determines whether CSS variables should be deduplicated: if CSS variable has the same value as in default theme, it is not added in the runtime. `true` by default. */\n  deduplicateCssVariables?: boolean;\n\n  /** Function to resolve root element to set `data-mantine-color-scheme` attribute, must return undefined on server, `() => document.documentElement` by default */\n  getRootElement?: () => HTMLElement | undefined;\n\n  /** A prefix for components static classes (for example {selector}-Text-root), `mantine` by default */\n  classNamesPrefix?: string;\n\n  /** Function to generate nonce attribute added to all generated `<style />` tags */\n  getStyleNonce?: () => string;\n\n  /** Function to generate CSS variables based on theme object */\n  cssVariablesResolver?: CSSVariablesResolver;\n\n  /** Determines whether components should have static classes, for example, `mantine-Button-root`. `true` by default */\n  withStaticClasses?: boolean;\n\n  /** Determines whether global classes should be added with `<style />` tag. Global classes are required for `hiddenFrom`/`visibleFrom` and `lightHidden`/`darkHidden` props to work. `true` by default. */\n  withGlobalClasses?: boolean;\n\n  /** Environment at which the provider is used, `'test'` environment disables all transitions and portals */\n  env?: 'default' | 'test';\n\n  /** Your application */\n  children?: React.ReactNode;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"theme",children:"theme"}),"\n",(0,s.jsxs)(n.p,{children:["Pass ",(0,s.jsx)(n.a,{href:"/theming/theme-object",children:"theme object"})," override to ",(0,s.jsx)(n.code,{children:"theme"})," prop. It will be merged with the default\ntheme and used in all components."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { createTheme, MantineProvider } from '@mantine/core';\n\nconst theme = createTheme({\n  fontFamily: 'Open Sans, sans-serif',\n  primaryColor: 'cyan',\n});\n\nfunction Demo() {\n  return (\n    <MantineProvider theme={theme}>\n      {/* Your app here */}\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"colorschememanager",children:"colorSchemeManager"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"colorSchemeManager"})," is used to retrieve and set color scheme value in external storage. By default,\n",(0,s.jsx)(n.code,{children:"MantineProvider"})," uses ",(0,s.jsx)(n.code,{children:"window.localStorage"})," to store color scheme value, but you can pass your own\nimplementation to ",(0,s.jsx)(n.code,{children:"colorSchemeManager"})," prop. You can learn more about color scheme management in the\n",(0,s.jsx)(n.a,{href:"/theming/color-schemes",children:"color schemes guide"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import {\n  localStorageColorSchemeManager,\n  MantineProvider,\n} from '@mantine/core';\n\nconst colorSchemeManager = localStorageColorSchemeManager({\n  key: 'my-app-color-scheme',\n});\n\nfunction Demo() {\n  return (\n    <MantineProvider colorSchemeManager={colorSchemeManager}>\n      {/* Your app here */}\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"defaultcolorscheme",children:"defaultColorScheme"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"defaultColorScheme"})," value is used when ",(0,s.jsx)(n.code,{children:"colorSchemeManager"})," cannot retrieve the value from external\nstorage, for example during server side rendering or when the user hasn't selected a preferred color scheme.\nPossible values are ",(0,s.jsx)(n.code,{children:"light"}),", ",(0,s.jsx)(n.code,{children:"dark"})," and ",(0,s.jsx)(n.code,{children:"auto"}),". By default, color scheme value is ",(0,s.jsx)(n.code,{children:"light"}),".\nYou can learn more about color scheme management in the ",(0,s.jsx)(n.a,{href:"/theming/color-schemes",children:"color schemes guide"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider defaultColorScheme=\"dark\">\n      {/* Your app here */}\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cssvariablesselector",children:"cssVariablesSelector"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"cssVariablesSelector"})," is a CSS selector to which ",(0,s.jsx)(n.a,{href:"/styles/css-variables/",children:"CSS variables"})," should be added.\nBy default, it is ",(0,s.jsx)(n.code,{children:":root"}),". ",(0,s.jsx)(n.code,{children:"MantineProvider"})," generates CSS variables based on given ",(0,s.jsx)(n.a,{href:"/theming/theme-object/",children:"theme override"}),"\nand ",(0,s.jsx)(n.code,{children:"cssVariablesResolver"}),", then these variables are rendered into ",(0,s.jsx)(n.code,{children:"<style />"})," tag next to your application.\nYou can learn more about Mantine CSS variables in the ",(0,s.jsx)(n.a,{href:"/styles/css-variables/",children:"CSS variables guide"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider cssVariablesSelector=\"html\">\n      {/* Your app here */}\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"withcssvariables",children:"withCssVariables"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"withCssVariables"})," determines whether theme CSS variables should be added to given ",(0,s.jsx)(n.code,{children:"cssVariablesSelector"}),".\nBy default, it is set to ",(0,s.jsx)(n.code,{children:"true"}),", you should not change it unless you want to manage CSS variables\nvia ",(0,s.jsx)(n.code,{children:".css"})," file (Note that in this case you will need to generate all theme tokens\nthat are not a part of the default theme on your side)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider withCssVariables={false}>\n      {/* Your app here */}\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"deduplicatecssvariables",children:"deduplicateCssVariables"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"deduplicateCssVariables"})," determines whether CSS variables should be deduplicated: if CSS variable has the same value as in default theme, it is not added in the runtime.\nBy default, it is set to ",(0,s.jsx)(n.code,{children:"true"}),". If set to ",(0,s.jsx)(n.code,{children:"false"}),", all Mantine CSS variables will be added in ",(0,s.jsx)(n.code,{children:"<style />"})," tag\neven if they have the same value as in the default theme."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider deduplicateCssVariables={false}>\n      {/* Your app here */}\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"getrootelement",children:"getRootElement"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"getRootElement"})," is a function that returns the root application (usually ",(0,s.jsx)(n.code,{children:"html"}),") element to set ",(0,s.jsx)(n.code,{children:"data-mantine-color-scheme"})," attribute.\nDefault value is ",(0,s.jsx)(n.code,{children:"() => document.documentElement"})," which means that ",(0,s.jsx)(n.code,{children:"data-mantine-color-scheme"}),"\nattribute will be added to ",(0,s.jsx)(n.code,{children:"<html />"})," tag. You can learn more about color scheme management in the\n",(0,s.jsx)(n.a,{href:"/theming/color-schemes",children:"color schemes guide"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider } from '@mantine/core';\n\nconst getRootElement = () =>\n  typeof window === 'undefined' ? undefined : document.body;\n\nfunction Demo() {\n  return (\n    <MantineProvider getRootElement={getRootElement}>\n      {/* Your app here */}\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"classnamesprefix",children:"classNamesPrefix"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"classNamesPrefix"})," is a prefix for components static classes (for example ",(0,s.jsx)(n.code,{children:"{selector}-Text-root"}),").\nDefault value is ",(0,s.jsx)(n.code,{children:"mantine"})," – all components will have ",(0,s.jsx)(n.code,{children:"mantine-"})," prefix in their ",(0,s.jsx)(n.strong,{children:"static classes"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider, Text } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider>\n      <Text>Just some text</Text>\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this case (default ",(0,s.jsx)(n.code,{children:"classNamesPrefix"}),"), ",(0,s.jsx)(n.a,{href:"/core/text",children:"Text"})," component will have the following classes:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mantine-focus-auto"})," – global utility class"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"m-3nrA4eL"})," – component class, usually a random string, with this class library styles are applied"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mantine-Text-root"})," – component static class, part of ",(0,s.jsx)(n.a,{href:"/styles/styles-api",children:"Styles API"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.code,{children:"classNamesPrefix"})," you can change only ",(0,s.jsx)(n.strong,{children:"static class"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider, Text } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider classNamesPrefix=\"app\">\n      <Text>Just some text</Text>\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now ",(0,s.jsx)(n.a,{href:"/core/text",children:"Text"})," component will have the following classes:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mantine-focus-auto"})," – ",(0,s.jsx)(n.code,{children:"classNamesPrefix"})," does not impact global utility classes – it is static and ",(0,s.jsx)(n.strong,{children:"cannot be changed"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"m-3nrA4eL"})," – ",(0,s.jsx)(n.code,{children:"classNamesPrefix"})," does not impact library class – it is static and ",(0,s.jsx)(n.strong,{children:"cannot be changed"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"app-Text-root"})," – component static class has ",(0,s.jsx)(n.code,{children:"classNamesPrefix"})," instead of ",(0,s.jsx)(n.code,{children:"mantine"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"withstaticclasses",children:"withStaticClasses"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"withStaticClasses"})," determines whether components should have static classes, for example, ",(0,s.jsx)(n.code,{children:"mantine-Button-root"}),".\nBy default, static classes are enabled, to disable them set ",(0,s.jsx)(n.code,{children:"withStaticClasses"})," to ",(0,s.jsx)(n.code,{children:"false"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider withStaticClasses={false}>\n      {/* Your app here */}\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"withglobalclasses",children:"withGlobalClasses"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"withGlobalClasses"})," determines whether global classes should be added with ",(0,s.jsx)(n.code,{children:"<style />"})," tag.\nGlobal classes are required for ",(0,s.jsx)(n.code,{children:"hiddenFrom"}),"/",(0,s.jsx)(n.code,{children:"visibleFrom"})," and ",(0,s.jsx)(n.code,{children:"lightHidden"}),"/",(0,s.jsx)(n.code,{children:"darkHidden"})," props to work.\nBy default, global classes are enabled, to disable them set ",(0,s.jsx)(n.code,{children:"withGlobalClasses"})," to ",(0,s.jsx)(n.code,{children:"false"}),". Note that\ndisabling global classes may break styles of some components."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider withGlobalClasses={false}>\n      {/* Your app here */}\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"getstylenonce",children:"getStyleNonce"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"getStyleNonce"})," is a function to generate ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce",children:"nonce"})," attribute added to dynamic generated ",(0,s.jsx)(n.code,{children:"<style />"})," tags."]}),"\n",(0,s.jsx)(n.h3,{id:"cssvariablesresolver",children:"cssVariablesResolver"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"cssVariablesResolver"})," is a function to generate CSS variables styles based on the ",(0,s.jsx)(n.a,{href:"/theming/theme-object",children:"theme object"}),".\nYou can learn more about Mantine CSS variables in the ",(0,s.jsx)(n.a,{href:"/styles/css-variables#css-variables-resolver",children:"CSS variables guide"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"env",children:"env"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"env"})," prop can be used in test environment to disable some features that\nmight impact tests and/or make it harder to test components:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"transitions that mount/unmount child component with delay"}),"\n",(0,s.jsx)(n.li,{children:"portals that render child component in a different part of the DOM"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To enable test environment, set ",(0,s.jsx)(n.code,{children:"env"})," to ",(0,s.jsx)(n.code,{children:"test"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider env=\"test\">\n      {/* Your app here */}\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that ",(0,s.jsx)(n.code,{children:'env="test"'})," is indented to be used in test environment only with ",(0,s.jsx)(n.a,{href:"/guides/jest",children:"Jest"})," or ",(0,s.jsx)(n.a,{href:"/guides/vitest",children:"Vitest"}),", do not use it in\nthe development or production environments. It is also not recommended to be used with\nend-to-end testing tools like ",(0,s.jsx)(n.a,{href:"/guides/cypress",children:"Cypress"})," or ",(0,s.jsx)(n.a,{href:"/guides/playwright",children:"Playwright"}),"."]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,s.jsx)(o,{...e,children:(0,s.jsx)(l,{...e})})}},84276:(e,n,t)=>{"use strict";t.d(n,{A:()=>s});let s=(0,t(41495).A)("outline","file-text","FileText",[["path",{d:"M14 3v4a1 1 0 0 0 1 1h4",key:"svg-0"}],["path",{d:"M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z",key:"svg-1"}],["path",{d:"M9 9l1 0",key:"svg-2"}],["path",{d:"M9 13l6 0",key:"svg-3"}],["path",{d:"M9 17l6 0",key:"svg-4"}]])},88992:(e,n,t)=>{"use strict";t.d(n,{A:()=>s});let s=(0,t(41495).A)("outline","arrow-right","ArrowRight",[["path",{d:"M5 12l14 0",key:"svg-0"}],["path",{d:"M13 18l6 -6",key:"svg-1"}],["path",{d:"M13 6l6 6",key:"svg-2"}]])}},e=>{e.O(0,[38547,90636,46593,38792],()=>e(e.s=68111)),_N_E=e.O()}]);