(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[38547],{3680:(e,t,a)=>{"use strict";a.d(t,{g:()=>n});let n={selectors:{dropdown:"Dropdown element",arrow:"Dropdown arrow",overlay:"Overlay element"},vars:{dropdown:{"--popover-radius":"Controls dropdown border-radius","--popover-shadow":"Controls dropdown box-shadow"}},modifiers:[{modifier:"data-position",selector:"dropdown",value:"Value of floating ui dropdown position"}]}},6166:e=>{e.exports={logo:"Logo_logo__c5nVK"}},8299:(e,t,a)=>{"use strict";a.d(t,{T:()=>n});let n={selectors:{root:"Root element (`Tabs` component)",list:"List of tabs (`Tabs.List` component)",panel:"Panel with tab content (`Tabs.Panel` component)",tab:"Tab button (`Tabs.Tab` component)",tabLabel:"Label of `Tabs.Tab`",tabSection:"Left and right sections of `Tabs.Tab`"},vars:{root:{"--tabs-color":"Controls colors of `Tabs.Tab`, only applicable when variant is `pills` or `default`","--tabs-radius":"Controls `Tabs.Tab` `border-radius`"}},modifiers:[{modifier:"data-orientation",selector:["root","tab","list","panel"],value:"Value of `orientation` prop"},{modifier:"data-placement",selector:["root","tab","list"],value:"Value of placement prop",condition:'Value of `orientation` prop is "vertical" on `Tabs` component'},{modifier:"data-inverted",selector:["tab","list"],condition:"`inverted` prop is set on `Tabs` component"},{modifier:"data-grow",selector:["list"],condition:"`grow` prop is set on `Tabs.List` component"},{modifier:"data-position",selector:["tabSection"],value:"Position of the section, left or right"}]}},8381:(e,t,a)=>{"use strict";a.d(t,{t:()=>i});var n=a(6029),o=a(45208),l=a(39728),r=a.n(l);function i(e){let{children:t,...a}=e;return(0,n.jsx)(o.E,{component:"span",className:r().text,dangerouslySetInnerHTML:{__html:t.replace(/`([^`]+)`/g,"<code>$1</code>").replace(/!important!/g,"<b>Important</b>").replace(/@deprecated/g,"<i>Deprecated:</i>").replace(/\[([^\]]+)\]\((.*?)\)/g,'<a href="$2" target="_blank" ref="noreferrer">$1</a>')},fz:"sm",...a})}},9876:(e,t,a)=>{"use strict";a.d(t,{q:()=>n});let n={selectors:{root:"Root element",steps:"Steps controls wrapper",separator:"Separator line between step controls",verticalSeparator:"Vertical separator line between step controls",content:"Current step content wrapper",stepWrapper:"Wrapper for the step icon and separator",step:"Step control button",stepIcon:"Step icon wrapper",stepCompletedIcon:"Completed step icon, rendered within stepIcon",stepBody:"Contains stepLabel and stepDescription",stepLabel:"Step label",stepDescription:"Step description",stepLoader:"Step loader"},vars:{root:{"--stepper-color":"Controls color of the active step and separator","--stepper-icon-color":"Controls `color` of the step icon","--stepper-icon-size":"Controls `width` and `height` of the icons","--stepper-content-padding":"Controls `padding-top` of the content","--stepper-radius":"Controls `border-radius` of the step icon","--stepper-fz":"Controls `font-size` of various elements","--stepper-spacing":"Controls various spacings"}},modifiers:[{modifier:"data-progress",selector:"stepIcon",condition:"Step is current"},{modifier:"data-completed",selector:"stepIcon",condition:"Step is completed"}]}},11251:(e,t,a)=>{"use strict";a.d(t,{r:()=>r});var n=a(6029),o=a(45208),l=a(32758);function r(e){let{errorOf:t}=e;return(0,n.jsxs)(o.E,{children:[(0,n.jsxs)(o.E,{span:!0,c:"red",children:["Error loading component ",t," data."," "]}),"If you see this message please let us know by"," ",(0,n.jsx)(l.M,{href:"https://github.com/mantinedev/mantine/issues/new?assignees=&labels=&template=docs_report.yml",target:"_blank",children:"opening an issue on GitHub"}),"."]})}},12969:e=>{e.exports={root:"PropsTablesList_root__Ft7zV",nothingFound:"PropsTablesList_nothingFound__p2KUx",searchIcon:"PropsTablesList_searchIcon__qxntu",title:"PropsTablesList_title__T7Tjv",section:"PropsTablesList_section__ttBgr",search:"PropsTablesList_search__xAeEM"}},13044:(e,t,a)=>{"use strict";a.d(t,{_:()=>n});let n={selectors:{wrapper:"Root element",preview:"Color preview, displayed only when `format` supports alpha channel",body:"Contains alpha/hue sliders and color preview",slider:"Alpha and hue sliders root",sliderOverlay:"Element used to display various overlays over hue and alpha sliders",saturation:"Saturation picker",saturationOverlay:"Element used to display various overlays over saturation picker",sliders:"Contains alpha and hue sliders",thumb:"Thumb of all sliders",swatch:"Color swatch",swatches:"Color swatches list"},vars:{wrapper:{"--cp-body-spacing":"Controls spacing between sliders and saturation","--cp-preview-size":"Controls size of the preview swatch","--cp-width":"Controls `width` of the root element","--cp-swatch-size":"Controls swatch `width` and `height`","--cp-thumb-size":"Controls thumb `width` and `height` in all sliders and saturation picker","--cp-saturation-height":"Controls `height` of the saturation picker"}}}},14048:(e,t,a)=>{"use strict";a.d(t,{U:()=>l});var n=a(31344),o=a(42573);let l={selectors:{...o.h.selectors,...o.m.selectors,...n.l,pill:"Value pill",inputField:"Input field",pillsList:"List of pills, also contains input field"},vars:{},modifiers:[{modifier:"data-combobox-selected",selector:"option",condition:"Option is selected"},{modifier:"data-combobox-active",selector:"option",condition:"Options was activated by keyboard"},{modifier:"data-combobox-disabled",selector:"option",condition:"Option is disabled"}]}},15168:e=>{e.exports={root:"DocsFooter_root__5R9lN",spacer:"DocsFooter_spacer__Y0_yv",wrapper:"DocsFooter_wrapper__tAf07",inner:"DocsFooter_inner__IOfKc",logoSection:"DocsFooter_logoSection__rXb23",description:"DocsFooter_description__7TUhx",afterFooter:"DocsFooter_afterFooter__BqHg7",afterFooterNote:"DocsFooter_afterFooterNote__YoTNg",groups:"DocsFooter_groups__6E3IS",social:"DocsFooter_social__UQyGc",socialButton:"DocsFooter_socialButton__7t4RI"}},15788:e=>{e.exports={content:"PageBase_content__8Q6WJ"}},15960:(e,t,a)=>{"use strict";a.d(t,{u:()=>n});let n={selectors:{...a(3680).g.selectors,divider:"`Menu.Divider` root element",label:"`Menu.Label` root element",item:"`Menu.Item` root element",itemLabel:"Label of `Menu.Item`",itemSection:"Left and right sections of `Menu.Item`",chevron:"Sub menu chevron"},vars:{},modifiers:[{modifier:"data-disabled",selector:"item",condition:"`disabled` prop is set on `Menu.Item`"}]}},16739:(e,t,a)=>{"use strict";a.d(t,{P:()=>o});var n=a(42573);let o={selectors:{...n.h.selectors,...n.m.selectors,placeholder:"Placeholder text"},vars:{}}},18544:e=>{e.exports={propName:"PropsTable_propName__M0bby"}},19957:(e,t,a)=>{"use strict";a.d(t,{l:()=>n});let n={selectors:{root:"Root element",slide:"`Carousel.Slide` root element",container:"Slides container",viewport:"Main element, contains slides container and all controls",controls:"Next/previous controls container",control:"Next/previous control",indicators:"Indicators container",indicator:"Indicator button"},vars:{root:{"--carousel-control-size":"Controls `width` and `height` of the next/previous buttons","--carousel-controls-offset":"Controls offsets of the next/previous buttons","--carousel-height":"Controls height of the carousel"}},modifiers:[{modifier:"data-orientation",selector:"root",value:"Value of `orientation` prop"},{modifier:"data-include-gap-in-size",selector:"root",condition:"`includeGapInSize` prop is set"},{modifier:"data-inactive",selector:"control",condition:"No previous/next slides are available"},{modifier:"data-active",selector:"indicator",condition:"Associated slide is active"}]}},20974:e=>{e.exports={wrapper:"MdxRawContent_wrapper__8ZUWQ",container:"MdxRawContent_container__v_UMr",tableOfContents:"MdxRawContent_tableOfContents__voKU_"}},22174:(e,t,a)=>{"use strict";a.d(t,{G:()=>n});let n={selectors:{root:"Root element",control:"Wrapper element for input and label",input:'Input element (`input[type="radio"]`), hidden by default',label:"Label element associated with input",indicator:"Floating indicator that moves between items",innerLabel:"Wrapper of label element children"},vars:{root:{"--sc-color":"Control `background-color` of `indicator`","--sc-font-size":"Controls `font-size` of labels","--sc-padding":"Controls `padding` of control","--sc-radius":"Controls `border-radius` of `indicator` and `root` elements","--sc-shadow":"Controls `box-shadow` of indicator","--sc-transition-duration":"Controls `transition-duration` of various elements that have animations","--sc-transition-timing-function":"Controls `transition-timing-function` of various elements that have animations"}},modifiers:[{modifier:"data-full-width",selector:"root",condition:"`fullWidth` prop is set"},{modifier:"data-with-items-border",selector:"root",condition:"`withItemsBorder` prop is not `false`"},{modifier:"data-disabled",selector:"root",condition:"Value of `disabled` prop"},{modifier:"data-orientation",selector:"control",value:"Value of `orientation` prop"},{modifier:"data-active",selector:["label","control"],condition:"Associated input is checked"},{modifier:"data-disabled",selector:"label",condition:"Associated input is disabled"},{modifier:"data-read-only",selector:"label",condition:"`readOnly` prop is set"}]}},23408:(e,t,a)=>{"use strict";a.d(t,{f:()=>d});var n=a(55729),o=a(8440);function l(e,t=0){return 0===e.length?-1:e.reduce((e,a,n)=>Math.abs(e.position-t)<Math.abs(a.y-t)?e:{index:n,position:a.y},{index:0,position:e[0].y}).index}function r(e){return Number(e.tagName[1])}function i(e){return e.textContent||""}function d({selector:e="h1, h2, h3, h4, h5, h6",getDepth:t=r,getValue:a=i,offset:s=0,scrollHost:u}={}){let[p,c]=(0,n.useState)(-1),[m,f]=(0,n.useState)(!1),[h,y]=(0,n.useState)([]),b=(0,n.useRef)([]),v=()=>{c(l(b.current.map(e=>e.getNode().getBoundingClientRect()),s))},g=()=>{let n=function(e,t,a){let n=[];for(let l=0;l<e.length;l+=1){let r=e[l];n.push({depth:t(r),value:a(r),id:r.id||(0,o.z)(),getNode:()=>r.id?document.getElementById(r.id):r})}return n}(Array.from(document.querySelectorAll(e)),t,a);b.current=n,f(!0),y(n),c(l(n.map(e=>e.getNode().getBoundingClientRect()),s))};return(0,n.useEffect)(()=>{g();let e=u||window;return e.addEventListener("scroll",v),()=>e.removeEventListener("scroll",v)},[u]),{reinitialize:g,active:p,initialized:m,data:h}}},25082:(e,t,a)=>{"use strict";a.d(t,{i:()=>n});let n={selectors:{root:"Root element",section:"Left and right sections",label:"Badge children"},vars:{root:{"--badge-bd":"Controls `border`","--badge-bg":"Controls `background`","--badge-color":"Controls text `color`","--badge-dot-color":'Controls dot `color`, only applicable when `variant="dot"`',"--badge-fz":"Controls `font-size`","--badge-height":"Controls `height`","--badge-padding-x":"Controls horizontal `padding`","--badge-radius":"Controls `border-radius`"}},modifiers:[{modifier:"data-block",selector:"root",condition:"`fullWidth` prop is set"},{modifier:"data-position",selector:"section",value:"Section position: left or right"}]}},27654:e=>{e.exports={item:"HeaderItem_item__E_3UP",label:"HeaderItem_label__3TYI5"}},28432:e=>{e.exports={wrapper:"LinkItem_wrapper__J_9Wi",link:"LinkItem_link__2mUFe",icon:"LinkItem_icon__gjSxi"}},29986:(e,t,a)=>{"use strict";a.d(t,{q:()=>l});var n=a(31344),o=a(42573);let l={selectors:{...o.h.selectors,...o.m.selectors,...n.l,pill:"Value pill",inputField:"Input field",pillsList:"List of pills, also contains input field"},vars:{},modifiers:[{modifier:"data-combobox-active",selector:"option",condition:"Options was activated by keyboard"},{modifier:"data-combobox-disabled",selector:"option",condition:"Option is disabled"}]}},31344:(e,t,a)=>{"use strict";a.d(t,{Q:()=>n,l:()=>o});let n={selectors:{options:"`Combobox.Options` component",dropdown:"`Combobox.Dropdown` component",option:"`Combobox.Option` component",search:"`Combobox.Search` input",empty:"`Combobox.Empty` component",header:"`Combobox.Header` component",footer:"`Combobox.Footer` component",group:"`Combobox.Group` component",groupLabel:"Label of `Combobox.Group` component"},vars:{dropdown:{"--combobox-option-fz":"Controls option `font-size`","--combobox-option-padding":"Controls option `padding`","--combobox-padding":"Controls dropdown `padding`"},options:{"--combobox-option-fz":"Controls option `font-size`","--combobox-option-padding":"Controls option `padding`"}},modifiers:[{modifier:"data-combobox-selected",selector:"option",condition:"Option is selected"},{modifier:"data-combobox-active",selector:"option",condition:"`active` prop is set"},{modifier:"data-combobox-disabled",selector:"option",condition:"`disabled` prop is set"},{modifier:"data-hidden",selector:"dropdown",condition:"`hidden` prop is set"}]},o={dropdown:"Dropdown root element",options:"Options wrapper",option:"Option",empty:"Nothing found message",group:"Options group wrapper",groupLabel:"Options group label"}},31364:(e,t,a)=>{"use strict";a.d(t,{e:()=>r});var n=a(6029),o=a(95669),l=a.n(o);function r(e){let{title:t,description:a}=e,o=t?"".concat(t," | Mantine"):"Mantine",r=a||"React components and hooks library with native dark theme support and focus on usability, accessibility and developer experience";return(0,n.jsxs)(l(),{children:[(0,n.jsx)("title",{children:o}),(0,n.jsx)("meta",{property:"description",name:"description",content:r}),(0,n.jsx)("meta",{property:"og:title",name:"og:title",content:o}),(0,n.jsx)("meta",{property:"og:description",name:"og:description",content:r}),(0,n.jsx)("meta",{property:"twitter:title",name:"twitter:title",content:o}),(0,n.jsx)("meta",{property:"twitter:description",name:"twitter:description",content:r})]})}},32032:(e,t,a)=>{"use strict";a.d(t,{k:()=>n});let n={selectors:{root:"Root element",section:"`Progress.Section` root element",label:"`Progress.Label` root element"},vars:{root:{"--progress-radius":"Controls `border-radius` of track and sections","--progress-size":"Controls height of progress bar","--progress-transition-duration":"Controls width `transition-duration` of progress bar"}},modifiers:[{modifier:"data-striped",selector:"section",condition:"`striped` or `animated` props are set"},{modifier:"data-animated",selector:"section",condition:"`animated` prop is set"}]}},32918:e=>{e.exports={wrapper:"TableOfContents_wrapper__jE57j",inner:"TableOfContents_inner__nZ9Yg",link:"TableOfContents_link__kwW92",title:"TableOfContents_title__sn9Ej",items:"TableOfContents_items__1KFWu",editPage:"TableOfContents_editPage__3_m2P",editPageIcon:"TableOfContents_editPageIcon__O_YMz"}},38547:(e,t,a)=>{"use strict";a.d(t,{P:()=>es});var n=a(6029),o=a(65433),l=a(41949),r=a(6892),i=a(1798),d=a(66385),s=a(45208),u=a(25665),p=a(15851);let c="https://github.com/mantinedev/mantine/blob/master",m="".concat(c,"/apps/mantine.dev/src/pages"),f="".concat(c,"/packages");var h=a(82203),y=a.n(h),b=a(32758),v=a(50212),g=a(27654),w=a.n(g);function q(e){let{label:t,children:a,className:o}=e;return(0,n.jsxs)("div",{className:(0,v.A)(w().item,o),children:[(0,n.jsx)(s.E,{className:w().label,fz:"sm",children:t}),a]})}var V=a(28432),C=a.n(V);function P(e){let{label:t,icon:a,children:o,link:l}=e;return(0,n.jsx)(q,{label:t,children:(0,n.jsx)("div",{className:C().wrapper,children:(0,n.jsxs)(b.M,{component:l.startsWith("/")?y():"a",className:C().link,href:l,fz:"sm",children:[(0,n.jsx)("div",{className:C().icon,children:a}),o]})})})}var S=a(59654),x=a.n(S);function D(e){let{meta:t}=e,a=Array.isArray(t.props),c=!!t.source,h=!!t.title;return!t.hideHeader&&(c||a||t.release||h)?(0,n.jsx)("div",{className:x().wrapper,"data-with-tabs":a||void 0,children:(0,n.jsxs)("div",{className:x().header,"data-with-tabs":a||void 0,children:[(0,n.jsx)(d.h,{className:x().title,children:t.title}),(0,n.jsx)(s.E,{className:x().description,children:t.description}),t.polymorphic&&(0,n.jsx)(P,{label:"Polymorphic",icon:(0,n.jsx)(o.A,{size:14,stroke:1.5}),link:"/guides/polymorphic",children:"Polymorphic component"}),t.source&&(0,n.jsx)(P,{label:"Source",icon:(0,n.jsx)(u.N,{size:14}),link:"".concat(f,"/").concat(t.source),children:"View source code"}),t.date&&t.release&&(0,n.jsx)(P,{label:"Release date",icon:(0,n.jsx)(l.A,{size:14,stroke:1.5}),link:t.release,children:t.date}),t.release&&(0,n.jsx)(P,{label:"Source code",icon:(0,n.jsx)(u.N,{size:14}),link:t.release,children:"Release on GitHub"}),t.docs&&(0,n.jsx)(P,{label:"Docs",icon:(0,n.jsx)(r.A,{size:14,stroke:1.5}),link:"".concat(m,"/").concat(t.docs),children:"Edit this page"}),t.package&&(0,n.jsx)(P,{label:"Package",icon:(0,n.jsx)(p.X,{size:14}),link:"https://www.npmjs.com/package/".concat(t.package),children:t.package}),t.license&&(0,n.jsx)(P,{label:"License",icon:(0,n.jsx)(i.A,{size:14,stroke:1.5}),link:"https://github.com/mantinedev/mantine/blob/master/LICENSE",children:"MIT"})]})}):null}var R=a(24583),k=a(88992),I=a(25844),A=a(5262),M=a(62406),z=a.n(M);function L(e){let{meta:t}=e,{next:a,prev:o}=function(e){let t=A.EL.findIndex(t=>t.slug===e);return{prev:A.EL[t-1],next:A.EL[t+1]}}(t.slug);return t.hideSiblings?null:(0,n.jsxs)("div",{className:z().root,children:[o&&(0,n.jsxs)(y(),{href:o.slug,className:(0,v.A)(z().link,I.V.auto),children:[(0,n.jsx)(R.A,{stroke:1.5,className:z().icon}),(0,n.jsx)(s.E,{className:z().title,children:o.title})]}),a&&(0,n.jsxs)(y(),{href:a.slug,className:(0,v.A)(z().link,I.V.auto),children:[(0,n.jsx)(s.E,{className:z().title,children:a.title}),(0,n.jsx)(k.A,{stroke:1.5,className:z().icon})]})]})}var T=a(63972),N=a(15788),O=a.n(N);function E(e){let{children:t}=e;return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("div",{className:O().content,children:t}),(0,n.jsx)(T.$,{withNavbar:!0})]})}var F=a(81278),Y=a(76320),W=a(928),j=a(57466),B=a(23408),H=a(32918),K=a.n(H);function _(e){let{withTabs:t,editPageLink:a}=e,o=(0,F.useRouter)(),l=(0,B.f)({selector:"#mdx [data-heading]",getDepth:e=>Number(e.getAttribute("data-order")),getValue:e=>e.getAttribute("data-heading")||""}),i=l.data.filter(e=>e.depth>1);if(0===i.length)return null;let d=i.map((e,t)=>(0,n.jsx)(s.E,{component:"a",className:K().link,mod:{active:l.active===t},href:"#".concat(e.id),__vars:{"--toc-link-offset":"".concat(e.depth-1)},onClick:t=>{t.preventDefault(),o.replace("".concat(o.pathname,"#").concat(e.id))},children:e.value},e.id));return(0,n.jsx)(Y.a,{component:"nav",mod:{"with-tabs":t},className:K().wrapper,children:(0,n.jsx)("div",{className:K().inner,children:(0,n.jsxs)("div",{children:[(0,n.jsx)(s.E,{className:K().title,children:"Table of contents"}),(0,n.jsxs)(W.F.Autosize,{mah:"calc(100vh - 172px)",type:"never",children:[(0,n.jsx)("div",{className:K().items,children:d}),a&&(0,n.jsxs)(s.E,{component:"a",className:K().editPage,href:a,target:"_blank",children:[(0,n.jsx)(r.A,{className:K().editPageIcon,size:18,stroke:1.5}),(0,n.jsx)("span",{children:"Edit this page"})]}),(0,n.jsx)(j.$,{h:"xl"})]})]})})})}var G=a(20974),U=a.n(G);function X(e){let{children:t,meta:a}=e;return(0,n.jsx)(E,{children:(0,n.jsxs)("div",{className:U().wrapper,children:[(0,n.jsxs)("div",{className:U().container,id:"mdx",children:[t,(0,n.jsx)(L,{meta:a})]}),(0,n.jsx)("div",{className:U().tableOfContents,children:(0,n.jsx)(_,{withTabs:!1,editPageLink:"".concat(m).concat(a.slug,".mdx")})})]})})}var J=a(55729),Q=a(84276),Z=a(6620),$=a(34891),ee=a(59117),et=a(59361),ea=a(96608),en=a(51062),eo=a.n(en);function el(e){let{children:t,meta:a}=e,o=(0,F.useRouter)(),[l,r]=(0,J.useState)("docs"),i=Array.isArray(a.props),d=Array.isArray(a.styles);return((0,J.useEffect)(()=>{r(window.location.search.replace("?t=","")||"docs")},[]),i||d)?(0,n.jsx)(E,{children:(0,n.jsxs)(ee.t,{variant:"pills",value:l,classNames:{list:eo().tabsList,tab:eo().tab,tabSection:eo().tabSection},keepMounted:!1,radius:"md",onChange:e=>{o.replace("docs"===e?o.pathname:"".concat(o.pathname,"?t=").concat(e),void 0,{scroll:!1}),r(e)},children:[(0,n.jsx)("div",{className:eo().tabsWrapper,children:(0,n.jsxs)(ee.t.List,{children:[(0,n.jsx)(ee.t.Tab,{value:"docs",children:(0,n.jsxs)("div",{className:eo().tabInner,children:[(0,n.jsx)(Q.A,{size:20,stroke:1.5,className:eo().tabIcon}),"Documentation"]})}),i&&(0,n.jsx)(ee.t.Tab,{value:"props",children:(0,n.jsxs)("div",{className:eo().tabInner,children:[(0,n.jsx)(Z.A,{size:20,stroke:1.5,className:eo().tabIcon}),"Props"]})}),d&&(0,n.jsx)(ee.t.Tab,{value:"styles-api",children:(0,n.jsxs)("div",{className:eo().tabInner,children:[(0,n.jsx)($.A,{size:20,stroke:1.5,className:eo().tabIcon}),"Styles API"]})})]})}),(0,n.jsx)(ee.t.Panel,{value:"docs",children:(0,n.jsxs)("div",{className:eo().contentWrapper,children:[(0,n.jsxs)("div",{className:eo().main,id:"mdx",children:[t,(0,n.jsx)(L,{meta:a})]}),(0,n.jsx)("div",{className:eo().tableOfContents,children:(0,n.jsx)(_,{withTabs:!0})})]})}),(0,n.jsx)(ee.t.Panel,{value:"props",children:(0,n.jsx)("div",{className:eo().tabContent,children:(0,n.jsx)(et.gN,{components:a.props,componentPrefix:a.componentPrefix})})}),(0,n.jsx)(ee.t.Panel,{value:"styles-api",children:(0,n.jsx)("div",{className:eo().tabContent,children:(0,n.jsx)(ea.e,{components:a.styles,componentPrefix:a.componentPrefix})})})]})}):null}function er(e){return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(D,{...e}),Array.isArray(e.meta.props)?(0,n.jsx)(el,{...e}):(0,n.jsx)(X,{...e})]})}var ei=a(31364);function ed(e){let{meta:t,children:a}=e;return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(ei.e,{title:t.title,description:t.description}),(0,n.jsx)(er,{meta:t,children:a})]})}function es(e){return t=>{let{children:a}=t;return(0,n.jsx)(ed,{meta:e,children:a})}}},39466:(e,t,a)=>{"use strict";a.d(t,{N:()=>o,s:()=>n});let n={selectors:{root:"Root element",label:"Thumb label",thumb:"Thumb element",trackContainer:"Wraps track element",track:"Slider track",bar:"Track filled part",markWrapper:"Contains `mark` and `markLabel` elements",mark:"Mark displayed on track",markLabel:"Label of the associated mark, displayed below track"},vars:{root:{"--slider-size":"Controls track `height`","--slider-color":"Controls filled track, thumb and marks `background`","--slider-thumb-size":"Controls thumb `width` and `height`","--slider-radius":"Controls `border-radius` of track and thumb"}},modifiers:[{modifier:"data-disabled",selector:["trackContainer","track","bar","thumb","mark"],condition:"`disabled` prop is set"},{modifier:"data-inverted",selector:["track","bar"],condition:"`inverted` prop is set"},{modifier:"data-dragging",selector:"thumb",condition:"slider is being dragged"},{modifier:"data-filled",selector:"mark",condition:"mark position is less or equal slider value"}]},o=n},39728:e=>{e.exports={text:"HtmlText_text___o1uN"}},42573:(e,t,a)=>{"use strict";a.d(t,{h:()=>n,m:()=>o});let n={selectors:{wrapper:"Root element of the Input",input:"Input element",section:"Left and right sections"},vars:{wrapper:{"--input-fz":"`font-size` of the input element","--input-height":"`height` or `min-height` of the input element (depends on `multiline` prop)","--input-left-section-width":"`width` of the left section","--input-right-section-width":"`width` of the right section","--input-margin-bottom":"`margin-bottom` of the input element, usually controlled by `Input.Wrapper`","--input-margin-top":"`margin-top` of the input element, usually controlled by `Input.Wrapper`","--input-padding-y":"`padding-top` and `padding-bottom` of the input element","--input-radius":"`border-radius` of the input element","--input-left-section-pointer-events":"Controls `pointer-events` of the left section","--input-right-section-pointer-events":"Controls `pointer-events` of the right section"}},modifiers:[{modifier:"data-error",selector:["wrapper","input"],condition:"`error` prop is set"},{modifier:"data-disabled",selector:"input",condition:"`disabled` prop is set"},{modifier:"data-with-right-section",selector:"wrapper",condition:"`rightSection` prop is set"},{modifier:"data-with-left-section",selector:"wrapper",condition:"`leftSection` prop is set"},{modifier:"data-multiline",selector:"wrapper",condition:"`multiline` prop is set"},{modifier:"data-pointer",selector:"wrapper",condition:"`pointer` prop is set"},{modifier:"data-position",selector:"section",value:"Section position: left or right"}]},o={selectors:{root:"Root element",label:"Label element",required:"Required asterisk element, rendered inside label",description:"Description element",error:"Error element"},vars:{label:{"--input-label-size":"Controls label `font-size`","--input-asterisk-color":"Controls label asterisk text `color`"},error:{"--input-error-size":"Controls error `font-size`"},description:{"--input-description-size":"Controls description `font-size`"}}}},42602:e=>{e.exports={code:"TableInlineCode_code__0ptOS"}},44631:(e,t,a)=>{"use strict";a.d(t,{$:()=>n});let n={selectors:{root:"Root element",control:"Control element: items, next/previous, first/last buttons",dots:"Dots icon wrapper"},vars:{root:{"--pagination-active-bg":"Active control `background-color`","--pagination-active-color":"Active control `color`","--pagination-control-fz":"Controls control `font-size`","--pagination-control-radius":"Controls control `border-radius`","--pagination-control-size":"Controls control `min-width` and `height`"}},modifiers:[{modifier:"data-active",selector:"control",condition:"Control is active"},{modifier:"data-disabled",selector:"control",condition:"Control is disabled"}]}},47200:(e,t,a)=>{"use strict";a.d(t,{y:()=>n});let n={selectors:{root:"Root element",loader:"Loader component, displayed only when `loading` prop is set",icon:"Icon component, displayed only when `icon` prop is set",body:"Notification body, contains all other elements",title:"Title element, displayed only when `title` prop is set",description:"Description displayed below the title",closeButton:"Close button element"},vars:{root:{"--notification-radius":"Controls `border-radius`","--notification-color":"Controls icon color or notification line color"}},modifiers:[{modifier:"data-with-icon",selector:"root",condition:"`icon` prop is set"},{modifier:"data-with-border",selector:"root",condition:"`withBorder` prop is set"},{modifier:"data-with-title",selector:"description",condition:"`title` prop is set"}]}},47223:(e,t,a)=>{"use strict";a.d(t,{P:()=>o});var n=a(42573);let o={selectors:{...n.h.selectors,...n.m.selectors},vars:{}}},48147:(e,t,a)=>{"use strict";a.d(t,{R:()=>l});var n=a(31344),o=a(42573);let l={selectors:{...o.h.selectors,...o.m.selectors,...n.l},vars:{},modifiers:[{modifier:"data-combobox-selected",selector:"option",condition:"Option is selected"},{modifier:"data-combobox-active",selector:"option",condition:"Options was activated by keyboard"},{modifier:"data-combobox-disabled",selector:"option",condition:"Option is disabled"}]}},51062:e=>{e.exports={tabsWrapper:"MdxTabs_tabsWrapper__14Znv",tab:"MdxTabs_tab__f36t5",tabIcon:"MdxTabs_tabIcon__fFMPh",tabInner:"MdxTabs_tabInner__xaYG8",main:"MdxTabs_main__qjckv",tableOfContents:"MdxTabs_tableOfContents__2RDWh",tabContent:"MdxTabs_tabContent__h_eEw",contentWrapper:"MdxTabs_contentWrapper__i_NEu"}},52206:(e,t,a)=>{"use strict";a.d(t,{G:()=>o});var n=a(42573);let o={selectors:{...n.h.selectors,...n.m.selectors,controls:"Increment and decrement buttons wrapper",control:"Increment and decrement buttons"},vars:{controls:{"--ni-chevron-size":"Controls `width` and `height` of the default chevron icon"}},modifiers:[{modifier:"data-direction",selector:"control",value:"`up` or `down` depending on the control"}]}},52230:(e,t,a)=>{"use strict";a.d(t,{J:()=>d});var n=a(6029),o=a(50212),l=a(45208),r=a(42602),i=a.n(r);function d(e){let{className:t,...a}=e;return(0,n.jsx)(l.E,{component:"span",className:(0,o.A)(i().code,t),...a})}},56132:e=>{e.exports={groupsHeader:"StylesApiTable_groupsHeader__GCT_t",group:"StylesApiTable_group__B6MgG",title:"StylesApiTable_title__G0_6E",section:"StylesApiTable_section__nd2cu"}},56878:(e,t,a)=>{"use strict";a.d(t,{o:()=>o});var n=a(42573);let o={selectors:{...n.h.selectors,...n.m.selectors,innerInput:"Actual input element",visibilityToggle:"Visibility toggle button"},vars:{root:{"--psi-button-size":"Controls visibility toggle button `width` and `height`","--psi-icon-size":"Controls visibility toggle icon `width` and `height`"}}}},57466:(e,t,a)=>{"use strict";a.d(t,{$:()=>r});var n=a(6029);a(55729);var o=a(38919),l=a(76320);let r=(0,a(8411).P9)((e,t)=>{let{w:a,h:r,miw:i,mih:d,...s}=(0,o.Y)("Space",null,e);return(0,n.jsx)(l.a,{ref:t,...s,w:a,miw:i??a,h:r,mih:d??r})});r.displayName="@mantine/core/Space"},59361:(e,t,a)=>{"use strict";a.d(t,{gN:()=>C,xE:()=>w});var n=a(6029),o=a(19577),l=a(32715),r=a(45208);let i=JSON.parse('{"Accordion":{"props":{"chevron":{"defaultValue":null,"description":"Custom chevron icon","name":"chevron","required":false,"type":{"name":"React.ReactNode"}},"chevronIconSize":{"defaultValue":"`16`","description":"Size of the default chevron icon. Ignored when <code>chevron</code> prop is set.","name":"chevronIconSize","required":false,"type":{"name":"string | number"}},"chevronPosition":{"defaultValue":"`right`","description":"Position of the chevron relative to the item label","name":"chevronPosition","required":false,"type":{"name":"AccordionChevronPosition","raw":"AccordionChevronPosition | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"chevronSize":{"defaultValue":"`auto`","description":"Size of the chevron icon container","name":"chevronSize","required":false,"type":{"name":"string | number"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string | string[] | null"}},"disableChevronRotation":{"defaultValue":null,"description":"If set, chevron rotation is disabled","name":"disableChevronRotation","required":false,"type":{"name":"boolean"}},"loop":{"defaultValue":"`true`","description":"If set, arrow keys loop though items (first to last and last to first)","name":"loop","required":false,"type":{"name":"boolean"}},"multiple":{"defaultValue":null,"description":"If set, multiple items can be opened at the same time","name":"multiple","required":false,"type":{"name":"boolean"}},"onChange":{"defaultValue":null,"description":"Called when value changes, payload type depends on <code>multiple</code> prop","name":"onChange","required":false,"type":{"name":"(value: AccordionValue<Multiple>) => void"}},"order":{"defaultValue":null,"description":"Heading order, has no effect on visuals","name":"order","required":false,"type":{"name":"2 | 3 | 4 | 5 | 6","raw":"AccordionHeadingOrder | undefined","value":[{"value":"undefined"},{"value":"2"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius. Numbers are converted to rem.","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"transitionDuration":{"defaultValue":"`200`","description":"Transition duration in ms","name":"transitionDuration","required":false,"type":{"name":"number"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string | string[] | null"}}}},"Accordion.Item":{"props":{"value":{"defaultValue":null,"description":"Value that is used to manage the accordion state","name":"value","required":true,"type":{"name":"string"}}}},"Accordion.Panel":{"props":{"onTransitionEnd":{"defaultValue":null,"description":"Called when the panel animation completes","name":"onTransitionEnd","required":false,"type":{"name":"() => void"}}}},"Accordion.Control":{"props":{"chevron":{"defaultValue":null,"description":"Custom chevron icon","name":"chevron","required":false,"type":{"name":"React.ReactNode"}},"children":{"defaultValue":null,"description":"Control label","name":"children","required":false,"type":{"name":"React.ReactNode"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute, prevents interactions","name":"disabled","required":false,"type":{"name":"boolean"}},"icon":{"defaultValue":null,"description":"Icon displayed next to the label","name":"icon","required":false,"type":{"name":"React.ReactNode"}}}},"Accordion.Chevron":{"props":{"size":{"defaultValue":"16","description":"Controls <code>width</code> and <code>height</code> of the icon, <code>16</code> by default","name":"size","required":false,"type":{"name":"string | number"}}}},"ActionIcon":{"props":{"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"children":{"defaultValue":null,"description":"Icon element","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"defaultValue":"`theme.primaryColor`.","description":"Key of <code>theme.colors</code> or any valid CSS color.","name":"color","required":false,"type":{"name":"MantineColor"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute, prevents interactions","name":"disabled","required":false,"type":{"name":"boolean"}},"gradient":{"defaultValue":"`theme.defaultGradient`.","description":"Gradient values used with <code>variant=\\"gradient\\"</code>.","name":"gradient","required":false,"type":{"name":"MantineGradient"}},"loaderProps":{"defaultValue":null,"description":"Props passed down to the <code>Loader</code> component. Ignored when <code>loading</code> prop is not set.","name":"loaderProps","required":false,"type":{"name":"LoaderProps"}},"loading":{"defaultValue":null,"description":"If set, <code>Loader</code> component is displayed instead of the <code>children</code>","name":"loading","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius. Numbers are converted to rem.","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"defaultValue":"`\'md\'`.","description":"Controls width and height of the button. Numbers are converted to rem.","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {}) | \\"input-xs\\" | \\"input-sm\\" | \\"input-md\\" | \\"input-lg\\" | \\"input-xl\\""}}}},"Affix":{"props":{"portalProps":{"defaultValue":null,"description":"Props passed down to the <code>Portal</code> component. Ignored when <code>withinPortal</code> is <code>false</code>.","name":"portalProps","required":false,"type":{"name":"BasePortalProps"}},"position":{"defaultValue":"`{ bottom: 0, right: 0 }`","description":"Affix position on screen","name":"position","required":false,"type":{"name":"AffixPosition"}},"withinPortal":{"defaultValue":"`true`","description":"Determines whether the component is rendered within <code>Portal</code>","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":"`200`","description":"Root element <code>z-index</code> property","name":"zIndex","required":false,"type":{"name":"React.CSSProperties[\\"zIndex\\"]"}}}},"Alert":{"props":{"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"closeButtonLabel":{"defaultValue":null,"description":"Close button <code>aria-label</code>","name":"closeButtonLabel","required":false,"type":{"name":"string"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color","name":"color","required":false,"type":{"name":"MantineColor"}},"icon":{"defaultValue":null,"description":"Icon displayed next to the title","name":"icon","required":false,"type":{"name":"React.ReactNode"}},"onClose":{"defaultValue":null,"description":"Called when the close button is clicked","name":"onClose","required":false,"type":{"name":"() => void"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"title":{"defaultValue":null,"description":"Alert title","name":"title","required":false,"type":{"name":"React.ReactNode"}},"withCloseButton":{"defaultValue":"`false`","description":"Determines whether close button should be displayed","name":"withCloseButton","required":false,"type":{"name":"boolean"}}}},"Anchor":{"props":{"color":{"defaultValue":null,"description":"@deprecated Use <code>c</code> prop instead","name":"color","required":false,"type":{"name":"MantineColor"}},"gradient":{"defaultValue":"`theme.defaultGradient`","description":"Gradient configuration, ignored when <code>variant</code> is not <code>gradient</code>","name":"gradient","required":false,"type":{"name":"MantineGradient"}},"inherit":{"defaultValue":"`false`","description":"Determines whether font properties should be inherited from the parent","name":"inherit","required":false,"type":{"name":"boolean"}},"inline":{"defaultValue":"`false`","description":"Sets <code>line-height</code> to 1 for centering","name":"inline","required":false,"type":{"name":"boolean"}},"lineClamp":{"defaultValue":null,"description":"Number of lines after which Text will be truncated","name":"lineClamp","required":false,"type":{"name":"number"}},"size":{"defaultValue":"`\'md\'`","description":"Controls <code>font-size</code> and <code>line-height</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"truncate":{"defaultValue":null,"description":"Side on which Text must be truncated, if <code>true</code>, text is truncated from the start","name":"truncate","required":false,"type":{"name":"TextTruncate"}},"underline":{"defaultValue":"`hover`","description":"Defines when <code>text-decoration: underline</code> styles are applied.","name":"underline","required":false,"type":{"name":"\\"always\\" | \\"hover\\" | \\"not-hover\\" | \\"never\\"","raw":"\\"always\\" | \\"hover\\" | \\"not-hover\\" | \\"never\\" | undefined","value":[{"value":"undefined"},{"value":"\\"always\\""},{"value":"\\"hover\\""},{"value":"\\"not-hover\\""},{"value":"\\"never\\""}]}}}},"AngleSlider":{"props":{"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"number"}},"disabled":{"defaultValue":null,"description":"Sets <code>data-disabled</code> attribute, disables interactions","name":"disabled","required":false,"type":{"name":"boolean"}},"formatLabel":{"defaultValue":null,"description":"A function to format label based on the current value","name":"formatLabel","required":false,"type":{"name":"(value: number) => ReactNode"}},"hiddenInputProps":{"defaultValue":null,"description":"Props passed down to the hidden input","name":"hiddenInputProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"input\\">"}},"marks":{"defaultValue":null,"description":"Array of marks displayed on the slider","name":"marks","required":false,"type":{"name":"{ value: number; label?: string; }[] | undefined"}},"name":{"defaultValue":null,"description":"Hidden input name, use with uncontrolled component","name":"name","required":false,"type":{"name":"string"}},"onChange":{"defaultValue":null,"description":"Called on value change","name":"onChange","required":false,"type":{"name":"(value: number) => void"}},"onChangeEnd":{"defaultValue":null,"description":"Called after the selection is finished","name":"onChangeEnd","required":false,"type":{"name":"(value: number) => void"}},"onScrubEnd":{"defaultValue":null,"description":"Called in <code>onMouseUp</code> and <code>onTouchEnd</code>","name":"onScrubEnd","required":false,"type":{"name":"() => void"}},"onScrubStart":{"defaultValue":null,"description":"Called in <code>onMouseDown</code> and <code>onTouchStart</code>","name":"onScrubStart","required":false,"type":{"name":"() => void"}},"restrictToMarks":{"defaultValue":"`false`","description":"If set, the selection is allowed only from the given marks array","name":"restrictToMarks","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":"`60px`","description":"Slider size in px","name":"size","required":false,"type":{"name":"number"}},"step":{"defaultValue":"`1`","description":"Step between values","name":"step","required":false,"type":{"name":"number"}},"thumbSize":{"defaultValue":null,"description":"Size of the thumb in px. Calculated based on the <code>size</code> value by default.","name":"thumbSize","required":false,"type":{"name":"number"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"number"}},"withLabel":{"defaultValue":"`true`","description":"If set, the label is displayed inside the slider","name":"withLabel","required":false,"type":{"name":"boolean"}}}},"AppShell":{"props":{"aside":{"defaultValue":null,"description":"<code>Aside</code> configuration, controls width, breakpoints and collapsed state. Required if you use <code>Aside</code> component.","name":"aside","required":false,"type":{"name":"AppShellAsideConfiguration"}},"disabled":{"defaultValue":null,"description":"If set, <code>Navbar</code>, <code>Aside</code>, <code>Header</code> and <code>Footer</code> components are hidden","name":"disabled","required":false,"type":{"name":"boolean"}},"footer":{"defaultValue":null,"description":"<code>Footer</code> configuration, controls height, offset and collapsed state. Required if you use <code>Footer</code> component.","name":"footer","required":false,"type":{"name":"AppShellFooterConfiguration"}},"header":{"defaultValue":null,"description":"<code>Header</code> configuration, controls height, offset and collapsed state. Required if you use <code>Header</code> component.","name":"header","required":false,"type":{"name":"AppShellHeaderConfiguration"}},"layout":{"defaultValue":null,"description":"Determines how <code>Navbar</code>/<code>Aside</code> are arranged relative to <code>Header</code>/<code>Footer</code>","name":"layout","required":false,"type":{"name":"\\"default\\" | \\"alt\\"","raw":"\\"default\\" | \\"alt\\" | undefined","value":[{"value":"undefined"},{"value":"\\"default\\""},{"value":"\\"alt\\""}]}},"navbar":{"defaultValue":null,"description":"<code>Navbar</code> configuration, controls width, breakpoints and collapsed state. Required if you use <code>Navbar</code> component.","name":"navbar","required":false,"type":{"name":"AppShellNavbarConfiguration"}},"offsetScrollbars":{"defaultValue":"`true` for `layout=\\"default\\"`, `false` for `layout=\\"alt\\"`","description":"If set, <code>Header</code> and <code>Footer</code> components include styles to offset scrollbars. Based on <code>react-remove-scroll</code>.","name":"offsetScrollbars","required":false,"type":{"name":"boolean"}},"padding":{"defaultValue":"`0`","description":"Padding of the main section. Important: use <code>padding</code> prop instead of <code>p</code>.","name":"padding","required":false,"type":{"name":"MantineSpacing | AppShellResponsiveSize"}},"transitionDuration":{"defaultValue":"`200`","description":"Duration of all transitions in ms","name":"transitionDuration","required":false,"type":{"name":"number"}},"transitionTimingFunction":{"defaultValue":"`ease`","description":"Timing function of all transitions","name":"transitionTimingFunction","required":false,"type":{"name":"TransitionTimingFunction"}},"withBorder":{"defaultValue":"`true`","description":"If set, the associated components have a border","name":"withBorder","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":"`100`","description":"<code>z-index</code> of all associated elements","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"AspectRatio":{"props":{"ratio":{"defaultValue":"`1`","description":"Aspect ratio, for example, <code>16 / 9</code>, <code>4 / 3</code>, <code>1920 / 1080</code>","name":"ratio","required":false,"type":{"name":"number"}}}},"Autocomplete":{"props":{"autoSelectOnBlur":{"defaultValue":"`false`","description":"If set, the highlighted option is selected when the input loses focus","name":"autoSelectOnBlur","required":false,"type":{"name":"boolean"}},"clearButtonProps":{"defaultValue":null,"description":"Props passed to the clear button","name":"clearButtonProps","required":false,"type":{"name":"InputClearButtonProps"}},"clearable":{"defaultValue":"`false`","description":"If set, the clear button is displayed when the component has a value","name":"clearable","required":false,"type":{"name":"boolean"}},"comboboxProps":{"defaultValue":null,"description":"Props passed down to <code>Combobox</code> component","name":"comboboxProps","required":false,"type":{"name":"ComboboxProps"}},"data":{"defaultValue":null,"description":"Data used to display options. Values must be unique.","name":"data","required":false,"type":{"name":"ComboboxStringData"}},"defaultDropdownOpened":{"defaultValue":null,"description":"Uncontrolled dropdown initial opened state","name":"defaultDropdownOpened","required":false,"type":{"name":"boolean"}},"defaultValue":{"defaultValue":null,"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"string"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownOpened":{"defaultValue":null,"description":"Controlled dropdown opened state","name":"dropdownOpened","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"filter":{"defaultValue":null,"description":"Function based on which items are filtered and sorted","name":"filter","required":false,"type":{"name":"OptionsFilter"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"limit":{"defaultValue":null,"description":"Maximum number of options displayed at a time, <code>Infinity</code> by default","name":"limit","required":false,"type":{"name":"number"}},"maxDropdownHeight":{"defaultValue":null,"description":"<code>max-height</code> of the dropdown, only applicable when <code>withScrollArea</code> prop is <code>true</code>, <code>250</code> by default","name":"maxDropdownHeight","required":false,"type":{"name":"string | number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: string) => void"}},"onClear":{"defaultValue":null,"description":"Called when the clear button is clicked","name":"onClear","required":false,"type":{"name":"() => void"}},"onDropdownClose":{"defaultValue":null,"description":"Called when dropdown closes","name":"onDropdownClose","required":false,"type":{"name":"() => void"}},"onDropdownOpen":{"defaultValue":null,"description":"Called when dropdown opens","name":"onDropdownOpen","required":false,"type":{"name":"() => void"}},"onOptionSubmit":{"defaultValue":null,"description":"Called when option is submitted from dropdown with mouse click or <code>Enter</code> key","name":"onOptionSubmit","required":false,"type":{"name":"(value: string) => void"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"renderOption":{"defaultValue":null,"description":"Function to render custom option content","name":"renderOption","required":false,"type":{"name":"RenderAutocompleteOption"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"scrollAreaProps":{"defaultValue":null,"description":"Props passed to the underlying <code>ScrollArea</code> component in the dropdown","name":"scrollAreaProps","required":false,"type":{"name":"ScrollAreaProps"}},"selectFirstOptionOnChange":{"defaultValue":null,"description":"If set, the first option is selected when value changes, <code>false</code> by default","name":"selectFirstOptionOnChange","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withScrollArea":{"defaultValue":null,"description":"Determines whether the options should be wrapped with <code>ScrollArea.AutoSize</code>, <code>true</code> by default","name":"withScrollArea","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"Avatar":{"props":{"allowedInitialsColors":{"defaultValue":null,"description":"A list of colors that is used for autogenerated initials. By default, all default Mantine colors can be used except gray and dark.","name":"allowedInitialsColors","required":false,"type":{"name":"DefaultMantineColor[]"}},"alt":{"defaultValue":null,"description":"Image <code>alt</code> attribute, also used as <code>title</code> attribute for placeholder","name":"alt","required":false,"type":{"name":"string"}},"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"children":{"defaultValue":null,"description":"Avatar placeholder, displayed when <code>src={null}</code> or when the image cannot be loaded","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"defaultValue":"`\'gray\'`","description":"Key of <code>theme.colors</code> or any valid CSS color","name":"color","required":false,"type":{"name":"DefaultMantineColor | \\"initials\\""}},"gradient":{"defaultValue":"`theme.defaultGradient`","description":"Gradient configuration for <code>variant=\\"gradient\\"</code>","name":"gradient","required":false,"type":{"name":"MantineGradient"}},"imageProps":{"defaultValue":null,"description":"Attributes passed down to <code>img</code> element","name":"imageProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"img\\">"}},"name":{"defaultValue":null,"description":"Name of the user. When <code>src</code> is not set, used to display initials and to generate color when <code>color=\\"initials\\"</code> is set.","name":"name","required":false,"type":{"name":"string"}},"radius":{"defaultValue":"`\'1000px\'`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"defaultValue":"`\'md\'`","description":"Width and height of the avatar, numbers are converted to rem","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"src":{"defaultValue":null,"description":"Image url, if the image cannot be loaded or <code>src={null}</code>, then placeholder is displayed instead","name":"src","required":false,"type":{"name":"string | null"}}}},"BackgroundImage":{"props":{"radius":{"defaultValue":"`0`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"src":{"defaultValue":null,"description":"Image url","name":"src","required":true,"type":{"name":"string"}}}},"Badge":{"props":{"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"children":{"defaultValue":null,"description":"Main badge content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"circle":{"defaultValue":null,"description":"If set, badge <code>min-width</code> becomes equal to its <code>height</code> and horizontal padding is removed","name":"circle","required":false,"type":{"name":"boolean"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color","name":"color","required":false,"type":{"name":"MantineColor"}},"fullWidth":{"defaultValue":"`false`","description":"Determines whether Badge should take 100% of its parent width","name":"fullWidth","required":false,"type":{"name":"boolean"}},"gradient":{"defaultValue":"`theme.defaultGradient`","description":"Gradient configuration used when <code>variant=\\\\\\"gradient\\\\\\"</code>","name":"gradient","required":false,"type":{"name":"MantineGradient"}},"leftSection":{"defaultValue":null,"description":"Content displayed on the left side of the badge label","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"radius":{"defaultValue":"`\'xl\'`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"rightSection":{"defaultValue":null,"description":"Content displayed on the right side of the badge label","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"size":{"defaultValue":"`\'md\'`","description":"Controls <code>font-size</code>, <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}}}},"Blockquote":{"props":{"cite":{"defaultValue":null,"description":"Reference to a cited quote","name":"cite","required":false,"type":{"name":"React.ReactNode"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color","name":"color","required":false,"type":{"name":"MantineColor"}},"icon":{"defaultValue":null,"description":"Blockquote icon, displayed at the top left side","name":"icon","required":false,"type":{"name":"React.ReactNode"}},"iconSize":{"defaultValue":"`40`","description":"Controls icon <code>width</code> and <code>height</code>, numbers are converted to rem","name":"iconSize","required":false,"type":{"name":"string | number"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}}}},"Breadcrumbs":{"props":{"children":{"defaultValue":null,"description":"React nodes that should be separated with <code>separator</code>","name":"children","required":true,"type":{"name":"React.ReactNode"}},"separator":{"defaultValue":"`\'/\'`","description":"Separator between children","name":"separator","required":false,"type":{"name":"React.ReactNode"}},"separatorMargin":{"defaultValue":"`\'xs\'`","description":"Controls spacing between separator and breadcrumb","name":"separatorMargin","required":false,"type":{"name":"MantineSpacing"}}}},"Burger":{"props":{"color":{"defaultValue":null,"description":"Key of <code>theme.colors</code> of any valid CSS value, by default <code>theme.white</code> in dark color scheme and <code>theme.black</code> in light","name":"color","required":false,"type":{"name":"MantineColor"}},"lineSize":{"defaultValue":null,"description":"Controls height of lines, by default calculated based on <code>size</code> prop","name":"lineSize","required":false,"type":{"name":"string | number"}},"opened":{"defaultValue":"`false`","description":"State of the burger, when <code>true</code> burger is transformed into X","name":"opened","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":"`\'md\'`","description":"Controls burger <code>width</code> and <code>height</code>, numbers are converted to rem","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"transitionDuration":{"defaultValue":"`300`","description":"<code>transition-duration</code> property value in ms","name":"transitionDuration","required":false,"type":{"name":"number"}},"transitionTimingFunction":{"defaultValue":"`\'ease\'`","description":"<code>transition-timing-function</code> property value","name":"transitionTimingFunction","required":false,"type":{"name":"string"}}}},"Button":{"props":{"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"children":{"defaultValue":null,"description":"Button content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color","name":"color","required":false,"type":{"name":"MantineColor"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute, applies disabled styles","name":"disabled","required":false,"type":{"name":"boolean"}},"fullWidth":{"defaultValue":"`false`","description":"If set, the button takes 100% width of its parent container","name":"fullWidth","required":false,"type":{"name":"boolean"}},"gradient":{"defaultValue":"`theme.defaultGradient`","description":"Gradient configuration used when <code>variant=\\"gradient\\"</code>","name":"gradient","required":false,"type":{"name":"MantineGradient"}},"justify":{"defaultValue":"`\'center\'`","description":"Sets <code>justify-content</code> of <code>inner</code> element, can be used to change distribution of sections and label","name":"justify","required":false,"type":{"name":"JustifyContent"}},"leftSection":{"defaultValue":null,"description":"Content displayed on the left side of the button label","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"loaderProps":{"defaultValue":null,"description":"Props added to the <code>Loader</code> component (only visible when <code>loading</code> prop is set)","name":"loaderProps","required":false,"type":{"name":"LoaderProps"}},"loading":{"defaultValue":null,"description":"If set, the <code>Loader</code> component is displayed over the button","name":"loading","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"rightSection":{"defaultValue":null,"description":"Content displayed on the right side of the button label","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls button <code>height</code>, <code>font-size</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {}) | \\"compact-xs\\" | \\"compact-sm\\" | \\"compact-md\\" | \\"compact-lg\\" | \\"compact-xl\\""}}}},"Card":{"props":{"children":{"defaultValue":null,"description":"Card content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"padding":{"defaultValue":"`\'md\'`","description":"Key of <code>theme.spacing</code> or any valid CSS value to set padding","name":"padding","required":false,"type":{"name":"MantineSpacing"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"shadow":{"defaultValue":null,"description":"Key of <code>theme.shadows</code> or any valid CSS value to set <code>box-shadow</code>","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"withBorder":{"defaultValue":null,"description":"Adds border to the card","name":"withBorder","required":false,"type":{"name":"boolean"}}}},"Center":{"props":{"children":{"defaultValue":null,"description":"Content to center","name":"children","required":false,"type":{"name":"React.ReactNode"}},"inline":{"defaultValue":null,"description":"If set, <code>inline-flex</code> is used instead of <code>flex</code>","name":"inline","required":false,"type":{"name":"boolean"}}}},"Checkbox":{"props":{"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color to set input background color in checked state","name":"color","required":false,"type":{"name":"MantineColor"}},"description":{"defaultValue":null,"description":"Description displayed below the label","name":"description","required":false,"type":{"name":"React.ReactNode"}},"error":{"defaultValue":null,"description":"Error message displayed below the label","name":"error","required":false,"type":{"name":"React.ReactNode"}},"icon":{"defaultValue":null,"description":"Icon displayed when checkbox is in checked or indeterminate state","name":"icon","required":false,"type":{"name":"FC<{ indeterminate: boolean; className: string; }> | undefined"}},"iconColor":{"defaultValue":null,"description":"Key of <code>theme.colors</code> or any valid CSS color to set icon color. By default, depends on <code>theme.autoContrast</code>.","name":"iconColor","required":false,"type":{"name":"MantineColor"}},"id":{"defaultValue":null,"description":"Unique input id","name":"id","required":false,"type":{"name":"string"}},"indeterminate":{"defaultValue":null,"description":"Indeterminate state of the checkbox. If set, <code>checked</code> prop is ignored.","name":"indeterminate","required":false,"type":{"name":"boolean"}},"label":{"defaultValue":null,"description":"<code>label</code> associated with the checkbox","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelPosition":{"defaultValue":"`\'right\'`","description":"Position of the label relative to the input","name":"labelPosition","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"rootRef":{"defaultValue":null,"description":"Root element ref","name":"rootRef","required":false,"type":{"name":"ForwardedRef<HTMLDivElement>"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls size of the component","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \\"ref\\"> & DataAttributes"}}}},"Chip":{"props":{"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"checked":{"defaultValue":null,"description":"Checked state for controlled component","name":"checked","required":false,"type":{"name":"boolean"}},"children":{"defaultValue":null,"description":"<code>label</code> element associated with the input","name":"children","required":true,"type":{"name":"React.ReactNode"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Controls components colors based on <code>variant</code> prop. Key of <code>theme.colors</code> or any valid CSS color.","name":"color","required":false,"type":{"name":"MantineColor"}},"defaultChecked":{"defaultValue":null,"description":"Default checked state for uncontrolled component","name":"defaultChecked","required":false,"type":{"name":"boolean"}},"icon":{"defaultValue":null,"description":"Any element or component to replace default icon","name":"icon","required":false,"type":{"name":"React.ReactNode"}},"id":{"defaultValue":null,"description":"Unique input id","name":"id","required":false,"type":{"name":"string"}},"onChange":{"defaultValue":null,"description":"Calls when checked state changes","name":"onChange","required":false,"type":{"name":"(checked: boolean) => void"}},"radius":{"defaultValue":"`\'xl\'`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"rootRef":{"defaultValue":null,"description":"Assigns ref of the root element","name":"rootRef","required":false,"type":{"name":"ForwardedRef<HTMLDivElement>"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls various properties related to component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"type":{"defaultValue":"`\'checkbox\'`","description":"Chip input type","name":"type","required":false,"type":{"name":"\\"checkbox\\" | \\"radio\\"","raw":"\\"checkbox\\" | \\"radio\\" | undefined","value":[{"value":"undefined"},{"value":"\\"checkbox\\""},{"value":"\\"radio\\""}]}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \\"ref\\"> & DataAttributes"}}}},"CloseButton":{"props":{"children":{"defaultValue":null,"description":"Content rendered inside the button. For example <code>VisuallyHidden</code> with label for screen readers.","name":"children","required":false,"type":{"name":"React.ReactNode"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute, assigns disabled styles","name":"disabled","required":false,"type":{"name":"boolean"}},"icon":{"defaultValue":null,"description":"React node to replace the default close icon. If set, <code>iconSize</code> prop is ignored.","name":"icon","required":false,"type":{"name":"React.ReactNode"}},"iconSize":{"defaultValue":"`80%`","description":"<code>X</code> icon <code>width</code> and <code>height</code>","name":"iconSize","required":false,"type":{"name":"string | number"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius. Numbers are converted to rem.","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"defaultValue":"`\'md\'`","description":"Controls width and height of the button. Numbers are converted to rem.","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}}}},"Code":{"props":{"block":{"defaultValue":null,"description":"If set, code is rendered in <code>pre</code>","name":"block","required":false,"type":{"name":"boolean"}},"color":{"defaultValue":null,"description":"Key of <code>theme.colors</code> or any valid CSS color, controls <code>background-color</code> of the code. By default, calculated based on the color scheme.","name":"color","required":false,"type":{"name":"MantineColor"}}}},"Collapse":{"props":{"animateOpacity":{"defaultValue":"`true`","description":"Determines whether opacity should be animated","name":"animateOpacity","required":false,"type":{"name":"boolean"}},"in":{"defaultValue":null,"description":"Opened state","name":"in","required":true,"type":{"name":"boolean"}},"keepMounted":{"defaultValue":null,"description":"Keep element in DOM when collapsed, useful for nested collapses","name":"keepMounted","required":false,"type":{"name":"boolean"}},"onTransitionEnd":{"defaultValue":null,"description":"Called each time transition ends","name":"onTransitionEnd","required":false,"type":{"name":"() => void"}},"transitionDuration":{"defaultValue":"`200`","description":"Transition duration in ms","name":"transitionDuration","required":false,"type":{"name":"number"}},"transitionTimingFunction":{"defaultValue":"`ease`","description":"Transition timing function","name":"transitionTimingFunction","required":false,"type":{"name":"string"}}}},"ColorInput":{"props":{"closeOnColorSwatchClick":{"defaultValue":"`false`","description":"If set, the dropdown is closed when one of the color swatches is clicked","name":"closeOnColorSwatchClick","required":false,"type":{"name":"boolean"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"disallowInput":{"defaultValue":null,"description":"If input is not allowed, the user can only pick value with color picker and swatches","name":"disallowInput","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"eyeDropperButtonProps":{"defaultValue":null,"description":"Props passed down to the eye dropper button","name":"eyeDropperButtonProps","required":false,"type":{"name":"Record<string, any>"}},"eyeDropperIcon":{"defaultValue":null,"description":"An icon to replace the default eye dropper icon","name":"eyeDropperIcon","required":false,"type":{"name":"React.ReactNode"}},"fixOnBlur":{"defaultValue":"`true`","description":"If set, the input value resets to the last known valid value when the input loses focus","name":"fixOnBlur","required":false,"type":{"name":"boolean"}},"format":{"defaultValue":"`\'hex\'`","description":"Color format","name":"format","required":false,"type":{"name":"ColorFormat","raw":"ColorFormat | undefined","value":[{"value":"undefined"},{"value":"\\"hex\\""},{"value":"\\"hexa\\""},{"value":"\\"rgba\\""},{"value":"\\"rgb\\""},{"value":"\\"hsl\\""},{"value":"\\"hsla\\""}]}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: string) => void"}},"onChangeEnd":{"defaultValue":null,"description":"Called when the user stops dragging one of the sliders or changes the value with keyboard","name":"onChangeEnd","required":false,"type":{"name":"(value: string) => void"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"popoverProps":{"defaultValue":null,"description":"Props passed down to the <code>Popover</code> component","name":"popoverProps","required":false,"type":{"name":"PopoverProps"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"swatches":{"defaultValue":null,"description":"A list of colors used to display swatches list below the color picker","name":"swatches","required":false,"type":{"name":"string[]"}},"swatchesPerRow":{"defaultValue":"`7`","description":"Number of swatches per row","name":"swatchesPerRow","required":false,"type":{"name":"number"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withEyeDropper":{"defaultValue":"`true`","description":"If set, the eye dropper button is displayed in the right section","name":"withEyeDropper","required":false,"type":{"name":"boolean"}},"withPicker":{"defaultValue":"`true`","description":"Determines whether the color picker should be displayed","name":"withPicker","required":false,"type":{"name":"boolean"}},"withPreview":{"defaultValue":"`true`","description":"If set, the preview color swatch is displayed in the left section of the input","name":"withPreview","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"ColorPicker":{"props":{"alphaLabel":{"defaultValue":null,"description":"Alpha slider <code>aria-label</code>","name":"alphaLabel","required":false,"type":{"name":"string"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string"}},"focusable":{"defaultValue":"`true`","description":"If set, interactive elements (sliders thumbs and swatches) are focusable with keyboard","name":"focusable","required":false,"type":{"name":"boolean"}},"format":{"defaultValue":"`\'hex\'`","description":"Color format","name":"format","required":false,"type":{"name":"ColorFormat","raw":"ColorFormat | undefined","value":[{"value":"undefined"},{"value":"\\"hex\\""},{"value":"\\"hexa\\""},{"value":"\\"rgba\\""},{"value":"\\"rgb\\""},{"value":"\\"hsl\\""},{"value":"\\"hsla\\""}]}},"fullWidth":{"defaultValue":"`false`","description":"If set, the component takes 100% width of its container","name":"fullWidth","required":false,"type":{"name":"boolean"}},"hueLabel":{"defaultValue":null,"description":"Hue slider <code>aria-label</code>","name":"hueLabel","required":false,"type":{"name":"string"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: string) => void"}},"onChangeEnd":{"defaultValue":null,"description":"Called when the user stops dragging one of the sliders or changes the value with keyboard","name":"onChangeEnd","required":false,"type":{"name":"(value: string) => void"}},"onColorSwatchClick":{"defaultValue":null,"description":"Called when one of the color swatches is clicked","name":"onColorSwatchClick","required":false,"type":{"name":"(color: string) => void"}},"saturationLabel":{"defaultValue":null,"description":"Saturation slider <code>aria-label</code>","name":"saturationLabel","required":false,"type":{"name":"string"}},"size":{"defaultValue":"`\'md\'`","description":"Controls size of hue, alpha and saturation sliders","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"swatches":{"defaultValue":null,"description":"A list of colors used to display swatches list below the color picker","name":"swatches","required":false,"type":{"name":"string[]"}},"swatchesPerRow":{"defaultValue":"`7`","description":"Number of swatches per row","name":"swatchesPerRow","required":false,"type":{"name":"number"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string"}},"withPicker":{"defaultValue":"`true`","description":"Determines whether the color picker should be displayed","name":"withPicker","required":false,"type":{"name":"boolean"}}}},"ColorSwatch":{"props":{"children":{"defaultValue":null,"description":"Content displayed inside the swatch","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"defaultValue":null,"description":"Valid CSS color to display","name":"color","required":true,"type":{"name":"string"}},"radius":{"defaultValue":"`1000`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem.","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"defaultValue":"`28`","description":"Controls <code>width</code> and <code>height</code> of the swatch, any valid CSS value, numbers are converted to rem.","name":"size","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"withShadow":{"defaultValue":"`true`","description":"Determines whether the swatch should have inner <code>box-shadow</code>","name":"withShadow","required":false,"type":{"name":"boolean"}}}},"Combobox":{"props":{"arrowOffset":{"defaultValue":"`5`","description":"Arrow offset in px","name":"arrowOffset","required":false,"type":{"name":"number"}},"arrowPosition":{"defaultValue":null,"description":"Arrow position","name":"arrowPosition","required":false,"type":{"name":"ArrowPosition","raw":"ArrowPosition | undefined","value":[{"value":"undefined"},{"value":"\\"center\\""},{"value":"\\"side\\""}]}},"arrowRadius":{"defaultValue":"`0`","description":"Arrow <code>border-radius</code> in px","name":"arrowRadius","required":false,"type":{"name":"number"}},"arrowSize":{"defaultValue":"`7`","description":"Arrow size in px","name":"arrowSize","required":false,"type":{"name":"number"}},"children":{"defaultValue":null,"description":"Combobox content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"disabled":{"defaultValue":null,"description":"If set, popover dropdown will not be rendered","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownPadding":{"defaultValue":"`4`","description":"Controls <code>padding</code> of the dropdown","name":"dropdownPadding","required":false,"type":{"name":"Padding<string | number>"}},"floatingStrategy":{"defaultValue":"`\'absolute\'`","description":"Changes floating ui [position strategy](https://floating-ui.com/docs/usefloating#strategy)","name":"floatingStrategy","required":false,"type":{"name":"FloatingStrategy","raw":"FloatingStrategy | undefined","value":[{"value":"undefined"},{"value":"\\"fixed\\""},{"value":"\\"absolute\\""}]}},"hideDetached":{"defaultValue":"`true`","description":"If set, the dropdown is hidden when the element is hidden with styles or not visible on the screen","name":"hideDetached","required":false,"type":{"name":"boolean"}},"keepMounted":{"defaultValue":null,"description":"If set, the dropdown is not unmounted from the DOM when hidden. <code>display: none</code> styles are added instead.","name":"keepMounted","required":false,"type":{"name":"boolean"}},"middlewares":{"defaultValue":"`{ flip: true, shift: true, inline: false }`","description":"Floating ui middlewares to configure position handling","name":"middlewares","required":false,"type":{"name":"PopoverMiddlewares"}},"offset":{"defaultValue":"`8`","description":"Offset of the dropdown element","name":"offset","required":false,"type":{"name":"number | FloatingAxesOffsets"}},"onClose":{"defaultValue":null,"description":"Called when dropdown closes","name":"onClose","required":false,"type":{"name":"() => void"}},"onDismiss":{"defaultValue":null,"description":"Called when the popover is dismissed by clicking outside or by pressing escape","name":"onDismiss","required":false,"type":{"name":"() => void"}},"onEnterTransitionEnd":{"defaultValue":null,"description":"Called when enter transition ends","name":"onEnterTransitionEnd","required":false,"type":{"name":"() => void"}},"onExitTransitionEnd":{"defaultValue":null,"description":"Called when exit transition ends","name":"onExitTransitionEnd","required":false,"type":{"name":"() => void"}},"onOpen":{"defaultValue":null,"description":"Called when dropdown opens","name":"onOpen","required":false,"type":{"name":"() => void"}},"onOptionSubmit":{"defaultValue":null,"description":"Called when item is selected with the <code>Enter</code> key or by clicking it","name":"onOptionSubmit","required":false,"type":{"name":"(value: string, optionProps: ComboboxOptionProps) => void"}},"onPositionChange":{"defaultValue":null,"description":"Called when dropdown position changes","name":"onPositionChange","required":false,"type":{"name":"(position: FloatingPosition) => void"}},"overlayProps":{"defaultValue":null,"description":"Props passed down to <code>Overlay</code> component","name":"overlayProps","required":false,"type":{"name":"OverlayProps & ElementProps<\\"div\\">"}},"portalProps":{"defaultValue":null,"description":"Props to pass down to the <code>Portal</code> when <code>withinPortal</code> is true","name":"portalProps","required":false,"type":{"name":"BasePortalProps"}},"position":{"defaultValue":"`\'bottom\'`","description":"Dropdown position relative to the target element","name":"position","required":false,"type":{"name":"FloatingPosition","raw":"FloatingPosition | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""},{"value":"\\"bottom\\""},{"value":"\\"top\\""},{"value":"\\"left-end\\""},{"value":"\\"left-start\\""},{"value":"\\"right-end\\""},{"value":"\\"right-start\\""},{"value":"\\"bottom-end\\""},{"value":"\\"bottom-start\\""},{"value":"\\"top-end\\""},{"value":"\\"top-start\\""}]}},"positionDependencies":{"defaultValue":null,"description":"@deprecated : Do not use, will be removed in 9.0","name":"positionDependencies","required":false,"type":{"name":"any[]"}},"preventPositionChangeWhenVisible":{"defaultValue":null,"description":"Prevents popover from flipping/shifting when it the dropdown is visible","name":"preventPositionChangeWhenVisible","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"defaultValue":null,"description":"Determines whether the <code>Combobox</code> value can be changed","name":"readOnly","required":false,"type":{"name":"boolean"}},"resetSelectionOnOptionHover":{"defaultValue":"`false`","description":"Determines whether selection should be reset when option is hovered","name":"resetSelectionOnOptionHover","required":false,"type":{"name":"boolean"}},"returnFocus":{"defaultValue":"`false`","description":"Determines whether focus should be automatically returned to control when dropdown closes","name":"returnFocus","required":false,"type":{"name":"boolean"}},"shadow":{"defaultValue":null,"description":"Key of <code>theme.shadows</code> or any other valid CSS <code>box-shadow</code> value","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls items <code>font-size</code> and <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"store":{"defaultValue":null,"description":"Combobox store, can be used to control combobox state","name":"store","required":false,"type":{"name":"ComboboxStore"}},"transitionProps":{"defaultValue":"`{ duration: 150, transition: \'fade\' }`","description":"Props passed down to the <code>Transition</code> component. Use to configure duration and animation type.","name":"transitionProps","required":false,"type":{"name":"TransitionProps"}},"width":{"defaultValue":"`\'max-content\'`","description":"Dropdown width, or <code>\'target\'</code> to make dropdown width the same as target element","name":"width","required":false,"type":{"name":"PopoverWidth"}},"withArrow":{"defaultValue":"`false`","description":"Determines whether component should have an arrow","name":"withArrow","required":false,"type":{"name":"boolean"}},"withOverlay":{"defaultValue":"`false`","description":"Determines whether the overlay should be displayed when the dropdown is opened","name":"withOverlay","required":false,"type":{"name":"boolean"}},"withinPortal":{"defaultValue":"`true`","description":"Determines whether dropdown should be rendered within the <code>Portal</code>","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":"`300`","description":"Dropdown <code>z-index</code>","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Combobox.Target":{"props":{"autoComplete":{"defaultValue":null,"description":"Input autocomplete attribute","name":"autoComplete","required":false,"type":{"name":"string"}},"children":{"defaultValue":null,"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"refProp":{"defaultValue":null,"description":"Key of the prop that is used to access element ref","name":"refProp","required":false,"type":{"name":"string"}},"targetType":{"defaultValue":"`input`","description":"Determines which events is handled by the target element.\\n<code>button</code> target type handles <code>Space</code> and <code>Enter</code> keys to toggle dropdown opened state.","name":"targetType","required":false,"type":{"name":"\\"button\\" | \\"input\\"","raw":"\\"button\\" | \\"input\\" | undefined","value":[{"value":"undefined"},{"value":"\\"button\\""},{"value":"\\"input\\""}]}},"withAriaAttributes":{"defaultValue":"`true`","description":"If set, the target has <code>aria-</code> attributes","name":"withAriaAttributes","required":false,"type":{"name":"boolean"}},"withExpandedAttribute":{"defaultValue":"`false`","description":"If set, the target has <code>aria-expanded</code> attribute","name":"withExpandedAttribute","required":false,"type":{"name":"boolean"}},"withKeyboardNavigation":{"defaultValue":"`true`","description":"If set, the component responds to keyboard events","name":"withKeyboardNavigation","required":false,"type":{"name":"boolean"}}}},"Combobox.Dropdown":{"props":{"hidden":{"defaultValue":null,"description":"Determines whether the dropdown should be hidden, for example, when there are no options to display","name":"hidden","required":false,"type":{"name":"boolean"}}}},"Combobox.Options":{"props":{"labelledBy":{"defaultValue":null,"description":"Id of the element that labels the options list","name":"labelledBy","required":false,"type":{"name":"string"}}}},"Combobox.Option":{"props":{"active":{"defaultValue":null,"description":"Current active state","name":"active","required":false,"type":{"name":"boolean"}},"disabled":{"defaultValue":null,"description":"Disabled state","name":"disabled","required":false,"type":{"name":"boolean"}},"selected":{"defaultValue":null,"description":"Current selected state","name":"selected","required":false,"type":{"name":"boolean"}},"value":{"defaultValue":null,"description":"Option value","name":"value","required":true,"type":{"name":"string"}}}},"Combobox.Search":{"props":{"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Determines whether the input should have error styles and <code>aria-invalid</code> attribute","name":"error","required":false,"type":{"name":"React.ReactNode"}},"id":{"defaultValue":null,"description":"Input element id","name":"id","required":false,"type":{"name":"string"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"multiline":{"defaultValue":"`false`","description":"Determines whether the input can have multiple lines, for example when <code>component=\\"textarea\\"</code>","name":"multiline","required":false,"type":{"name":"boolean"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"defaultValue":null,"description":"Sets <code>required</code> attribute on the <code>input</code> element","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAria":{"defaultValue":"`true`","description":"Determines whether <code>aria-</code> and other accessibility attributes should be added to the input","name":"withAria","required":false,"type":{"name":"boolean"}},"withAriaAttributes":{"defaultValue":"`true`","description":"if set, the search input has <code>aria-</code> attribute","name":"withAriaAttributes","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withKeyboardNavigation":{"defaultValue":"`true`","description":"if set, the search input handles keyboard navigation","name":"withKeyboardNavigation","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element of the <code>Input</code> component","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"Combobox.Empty":{"description":"","props":{}},"Combobox.Chevron":{"props":{"color":{"defaultValue":null,"description":"","name":"color","required":false,"type":{"name":"MantineColor"}},"error":{"defaultValue":null,"description":"","name":"error","required":false,"type":{"name":"React.ReactNode"}},"size":{"defaultValue":null,"description":"","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}}}},"Combobox.Footer":{"description":"","props":{}},"Combobox.Header":{"description":"","props":{}},"Combobox.EventsTarget":{"props":{"autoComplete":{"defaultValue":null,"description":"Input autocomplete attribute","name":"autoComplete","required":false,"type":{"name":"string"}},"children":{"defaultValue":null,"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"refProp":{"defaultValue":null,"description":"Key of the prop is used to access element ref","name":"refProp","required":false,"type":{"name":"string"}},"targetType":{"defaultValue":"`input`","description":"Determines which events should be handled by the target element.\\n<code>button</code> target type handles <code>Space</code> and <code>Enter</code> keys to toggle dropdown opened state.","name":"targetType","required":false,"type":{"name":"\\"button\\" | \\"input\\"","raw":"\\"button\\" | \\"input\\" | undefined","value":[{"value":"undefined"},{"value":"\\"button\\""},{"value":"\\"input\\""}]}},"withAriaAttributes":{"defaultValue":"`true`","description":"If set, the target has <code>aria-</code> attributes","name":"withAriaAttributes","required":false,"type":{"name":"boolean"}},"withExpandedAttribute":{"defaultValue":"`false`","description":"If set, the target has <code>aria-expanded</code> attribute","name":"withExpandedAttribute","required":false,"type":{"name":"boolean"}},"withKeyboardNavigation":{"defaultValue":"`true`","description":"If set, the component responds to the keyboard events","name":"withKeyboardNavigation","required":false,"type":{"name":"boolean"}}}},"Combobox.DropdownTarget":{"props":{"children":{"defaultValue":null,"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"refProp":{"defaultValue":null,"description":"Key of the prop that should be used to access element ref","name":"refProp","required":false,"type":{"name":"string"}}}},"Combobox.Group":{"props":{"label":{"defaultValue":null,"description":"Group label","name":"label","required":false,"type":{"name":"React.ReactNode"}}}},"Combobox.HiddenInput":{"props":{"value":{"defaultValue":null,"description":"Input value","name":"value","required":true,"type":{"name":"string | string[] | null"}},"valuesDivider":{"defaultValue":",","description":"Divider character to join array values into string","name":"valuesDivider","required":false,"type":{"name":"string"}}}},"Container":{"props":{"fluid":{"defaultValue":"`false`","description":"If set, the container takes 100% width of its parent and <code>size</code> prop is ignored.","name":"fluid","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":"`\'md\'`","description":"<code>max-width</code> of the container, value is not responsive – it is the same for all screen sizes. Numbers are converted to rem. Ignored when <code>fluid</code> prop is set.","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"strategy":{"defaultValue":"`\'block\'`","description":"Centering strategy","name":"strategy","required":false,"type":{"name":"\\"block\\" | \\"grid\\"","raw":"\\"block\\" | \\"grid\\" | undefined","value":[{"value":"undefined"},{"value":"\\"block\\""},{"value":"\\"grid\\""}]}}}},"CopyButton":{"props":{"children":{"defaultValue":null,"description":"Children callback, provides current status and copy function as an argument","name":"children","required":true,"type":{"name":"(payload: { copied: boolean; copy: () => void; }) => ReactNode"}},"timeout":{"defaultValue":"`1000`","description":"Copied status timeout in ms","name":"timeout","required":false,"type":{"name":"number"}},"value":{"defaultValue":null,"description":"Value that is copied to the clipboard when the button is clicked","name":"value","required":true,"type":{"name":"string"}}}},"Dialog":{"props":{"children":{"defaultValue":null,"description":"Dialog content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"keepMounted":{"defaultValue":null,"description":"If set, dialog is not unmounted from the DOM when hidden, <code>display: none</code> styles are applied instead","name":"keepMounted","required":false,"type":{"name":"boolean"}},"onClose":{"defaultValue":null,"description":"Called when the close button is clicked","name":"onClose","required":false,"type":{"name":"() => void"}},"opened":{"defaultValue":null,"description":"Opened state","name":"opened","required":true,"type":{"name":"boolean"}},"portalProps":{"defaultValue":null,"description":"Props passed down to the <code>Portal</code> component. Ignored when <code>withinPortal</code> is <code>false</code>.","name":"portalProps","required":false,"type":{"name":"BasePortalProps"}},"position":{"defaultValue":"`{ bottom: 0, right: 0 }`","description":"Affix position on screen","name":"position","required":false,"type":{"name":"AffixPosition"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"shadow":{"defaultValue":null,"description":"Key of <code>theme.shadows</code> or any valid CSS value to set <code>box-shadow</code>","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"size":{"defaultValue":"`\'md\'`","description":"Controls <code>width</code> of the dialog","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"transitionProps":{"defaultValue":"`{ transition: \'pop-top-right\', duration: 200 }`","description":"Props passed down to the underlying <code>Transition</code> component","name":"transitionProps","required":false,"type":{"name":"TransitionProps"}},"withBorder":{"defaultValue":null,"description":"Adds border to the root element","name":"withBorder","required":false,"type":{"name":"boolean"}},"withCloseButton":{"defaultValue":"`true`","description":"If set, the close button is displayed","name":"withCloseButton","required":false,"type":{"name":"boolean"}},"withinPortal":{"defaultValue":"`true`","description":"Determines whether the component is rendered within <code>Portal</code>","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":"`200`","description":"Root element <code>z-index</code> property","name":"zIndex","required":false,"type":{"name":"React.CSSProperties[\\"zIndex\\"]"}}}},"Divider":{"props":{"color":{"defaultValue":null,"description":"Key of <code>theme.colors</code> or any valid CSS color value, by default value depends on color scheme","name":"color","required":false,"type":{"name":"MantineColor"}},"label":{"defaultValue":null,"description":"Divider label, visible only when <code>orientation</code> is <code>horizontal</code>","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelPosition":{"defaultValue":"`\'center\'`","description":"Controls label position","name":"labelPosition","required":false,"type":{"name":"\\"center\\" | \\"left\\" | \\"right\\"","raw":"\\"center\\" | \\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"center\\""},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"orientation":{"defaultValue":"`\'horizontal\'`","description":"Controls orientation","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"size":{"defaultValue":"`\'xs\'`","description":"Controls width/height (depends on orientation)","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}}}},"Drawer":{"props":{"children":{"defaultValue":null,"description":"Drawer content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"closeButtonProps":{"defaultValue":null,"description":"Props passed down to the close button","name":"closeButtonProps","required":false,"type":{"name":"ModalBaseCloseButtonProps"}},"closeOnClickOutside":{"defaultValue":"`true`","description":"If set, the modal/drawer is closed when user clicks on the overlay","name":"closeOnClickOutside","required":false,"type":{"name":"boolean"}},"closeOnEscape":{"defaultValue":"`true`","description":"If set, <code>onClose</code> is called when user presses the escape key","name":"closeOnEscape","required":false,"type":{"name":"boolean"}},"id":{"defaultValue":null,"description":"Id used to connect modal/drawer with body and title","name":"id","required":false,"type":{"name":"string"}},"keepMounted":{"defaultValue":"`false`","description":"If set modal/drawer is not unmounted from the DOM when hidden. <code>display: none</code> styles are applied instead.","name":"keepMounted","required":false,"type":{"name":"boolean"}},"lockScroll":{"defaultValue":"`true`","description":"If set, scroll is locked when <code>opened={true}</code>","name":"lockScroll","required":false,"type":{"name":"boolean"}},"offset":{"defaultValue":"`0`","description":"Drawer container offset from the viewport end","name":"offset","required":false,"type":{"name":"string | number"}},"onClose":{"defaultValue":null,"description":"Called when modal/drawer is closed","name":"onClose","required":true,"type":{"name":"() => void"}},"onEnterTransitionEnd":{"defaultValue":null,"description":"Called when enter transition ends","name":"onEnterTransitionEnd","required":false,"type":{"name":"() => void"}},"onExitTransitionEnd":{"defaultValue":null,"description":"Called when exit transition ends","name":"onExitTransitionEnd","required":false,"type":{"name":"() => void"}},"opened":{"defaultValue":null,"description":"Controls opened state","name":"opened","required":true,"type":{"name":"boolean"}},"overlayProps":{"defaultValue":null,"description":"Props passed down to the <code>Overlay</code> component, can be used to configure opacity, <code>background-color</code>, styles and other properties","name":"overlayProps","required":false,"type":{"name":"ModalBaseOverlayProps"}},"padding":{"defaultValue":"`\'md\'`","description":"Key of <code>theme.spacing</code> or any valid CSS value to set content, header and footer padding","name":"padding","required":false,"type":{"name":"MantineSpacing"}},"portalProps":{"defaultValue":null,"description":"Props passed down to the Portal component when <code>withinPortal</code> is set","name":"portalProps","required":false,"type":{"name":"BasePortalProps"}},"position":{"defaultValue":"`\'left\'`","description":"Side of the screen on which drawer will be opened","name":"position","required":false,"type":{"name":"DrawerPosition","raw":"DrawerPosition | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""},{"value":"\\"bottom\\""},{"value":"\\"top\\""}]}},"radius":{"defaultValue":"`0`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"removeScrollProps":{"defaultValue":null,"description":"Props passed down to react-remove-scroll, can be used to customize scroll lock behavior","name":"removeScrollProps","required":false,"type":{"name":"RemoveScrollProps"}},"returnFocus":{"defaultValue":"`true`","description":"If set, focus is returned to the last active element when <code>onClose</code> is called","name":"returnFocus","required":false,"type":{"name":"boolean"}},"scrollAreaComponent":{"defaultValue":"`\'div\'`","description":"Scroll area component","name":"scrollAreaComponent","required":false,"type":{"name":"ScrollAreaComponent"}},"shadow":{"defaultValue":"`\'xl\'`","description":"Key of <code>theme.shadows</code> or any valid CSS box-shadow value","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"size":{"defaultValue":"`\'md\'`","description":"Controls width of the content area","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"stackId":{"defaultValue":null,"description":"Id of the drawer in the <code>Drawer.Stack</code>","name":"stackId","required":false,"type":{"name":"string"}},"title":{"defaultValue":null,"description":"Drawer title","name":"title","required":false,"type":{"name":"React.ReactNode"}},"transitionProps":{"defaultValue":null,"description":"Props added to the <code>Transition</code> component that used to animate overlay and body, use to configure duration and animation type, <code>{ duration: 200, transition: \'fade-down\' }</code> by default","name":"transitionProps","required":false,"type":{"name":"TransitionProps"}},"trapFocus":{"defaultValue":"`true`","description":"If set, focus is trapped within the modal/drawer","name":"trapFocus","required":false,"type":{"name":"boolean"}},"withCloseButton":{"defaultValue":"`true`","description":"If set, the close button is displayed","name":"withCloseButton","required":false,"type":{"name":"boolean"}},"withOverlay":{"defaultValue":"`true`","description":"If set, the overlay is displayed","name":"withOverlay","required":false,"type":{"name":"boolean"}},"withinPortal":{"defaultValue":"`true`","description":"If set, the component is rendered inside <code>Portal</code>","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":"`200`","description":"<code>z-index</code> CSS property of the root element","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Fieldset":{"props":{"legend":{"defaultValue":null,"description":"Fieldset legend","name":"legend","required":false,"type":{"name":"React.ReactNode"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}}}},"FileButton":{"props":{"accept":{"defaultValue":null,"description":"File input accept attribute, for example, <code>\\"image/png,image/jpeg\\"</code>","name":"accept","required":false,"type":{"name":"string"}},"capture":{"defaultValue":null,"description":"Specifies that, optionally, a new file should be captured, and which device should be used to capture that new media of a type defined by the accept attribute.","name":"capture","required":false,"type":{"name":"boolean | \\"user\\" | \\"environment\\""}},"children":{"defaultValue":null,"description":"Function that receives button props and returns react node that should be rendered","name":"children","required":true,"type":{"name":"(props: { onClick: () => void; }) => ReactNode"}},"disabled":{"defaultValue":null,"description":"Disables file picker","name":"disabled","required":false,"type":{"name":"boolean"}},"form":{"defaultValue":null,"description":"Input form attribute","name":"form","required":false,"type":{"name":"string"}},"inputProps":{"defaultValue":null,"description":"Passes down props to the input element used to capture files","name":"inputProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"input\\">"}},"multiple":{"defaultValue":null,"description":"If set, user can pick more than one file","name":"multiple","required":false,"type":{"name":"boolean"}},"name":{"defaultValue":null,"description":"Input name attribute","name":"name","required":false,"type":{"name":"string"}},"onChange":{"defaultValue":null,"description":"Called when files are picked","name":"onChange","required":true,"type":{"name":"(payload: Multiple extends true ? File[] : File | null) => void"}},"resetRef":{"defaultValue":null,"description":"Reference of the function that should be called when value changes to null or empty array","name":"resetRef","required":false,"type":{"name":"ForwardedRef<() => void>"}}}},"FileInput":{"props":{"accept":{"defaultValue":null,"description":"File input accept attribute, for example, <code>\\"image/png,image/jpeg\\"</code>","name":"accept","required":false,"type":{"name":"string"}},"capture":{"defaultValue":null,"description":"Specifies that, optionally, a new file should be captured, and which device should be used to capture that new media of a type defined by the accept attribute.","name":"capture","required":false,"type":{"name":"boolean | \\"user\\" | \\"environment\\""}},"clearButtonProps":{"defaultValue":null,"description":"Props passed down to the clear button","name":"clearButtonProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"clearable":{"defaultValue":"`false`","description":"If set, the clear button is displayed in the right section","name":"clearable","required":false,"type":{"name":"boolean"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"File | File[] | null"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"fileInputProps":{"defaultValue":null,"description":"Props passed down to the hidden input element which is used to capture files","name":"fileInputProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"input\\">"}},"form":{"defaultValue":null,"description":"Input form attribute","name":"form","required":false,"type":{"name":"string"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"multiple":{"defaultValue":"`false`","description":"If set, user can pick more than one file","name":"multiple","required":false,"type":{"name":"boolean"}},"name":{"defaultValue":null,"description":"Input name attribute","name":"name","required":false,"type":{"name":"string"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(payload: Multiple extends true ? File[] : File | null) => void"}},"placeholder":{"defaultValue":null,"description":"Input placeholder","name":"placeholder","required":false,"type":{"name":"React.ReactNode"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"defaultValue":null,"description":"If set, the input value cannot be changed","name":"readOnly","required":false,"type":{"name":"boolean"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"resetRef":{"defaultValue":null,"description":"Reference of the function that should be called when value changes to null or empty array","name":"resetRef","required":false,"type":{"name":"ForwardedRef<() => void>"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"File | File[] | null"}},"valueComponent":{"defaultValue":null,"description":"Value renderer. By default, displays file name.","name":"valueComponent","required":false,"type":{"name":"FC<{ value: File | File[] | null; }>"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"Flex":{"props":{"align":{"defaultValue":null,"description":"<code>align-items</code> CSS property","name":"align","required":false,"type":{"name":"StyleProp<AlignItems>"}},"columnGap":{"defaultValue":null,"description":"<code>column-gap</code> CSS property","name":"columnGap","required":false,"type":{"name":"StyleProp<MantineSpacing>"}},"direction":{"defaultValue":null,"description":"<code>flex-direction</code> CSS property","name":"direction","required":false,"type":{"name":"StyleProp<FlexDirection>"}},"gap":{"defaultValue":null,"description":"<code>gap</code> CSS property","name":"gap","required":false,"type":{"name":"StyleProp<MantineSpacing>"}},"justify":{"defaultValue":null,"description":"<code>justify-content</code> CSS property","name":"justify","required":false,"type":{"name":"StyleProp<JustifyContent>"}},"rowGap":{"defaultValue":null,"description":"<code>row-gap</code> CSS property","name":"rowGap","required":false,"type":{"name":"StyleProp<MantineSpacing>"}},"wrap":{"defaultValue":null,"description":"<code>flex-wrap</code> CSS property","name":"wrap","required":false,"type":{"name":"StyleProp<FlexWrap>"}}}},"FloatingIndicator":{"props":{"displayAfterTransitionEnd":{"defaultValue":null,"description":"If set, the indicator is displayed after transition ends.\\nShould be set if the component is used inside a container that has <code>transform: scale(n)</code> styles.","name":"displayAfterTransitionEnd","required":false,"type":{"name":"boolean"}},"parent":{"defaultValue":null,"description":"Parent element with relative position based on which indicator position is calculated","name":"parent","required":true,"type":{"name":"HTMLElement | null"}},"target":{"defaultValue":null,"description":"Target element over which indicator is displayed","name":"target","required":true,"type":{"name":"HTMLElement | null"}},"transitionDuration":{"defaultValue":"`150`","description":"Transition duration in ms","name":"transitionDuration","required":false,"type":{"name":"string | number"}}}},"FocusTrap":{"props":{"active":{"defaultValue":"true","description":"If set to <code>false</code>, disables focus trap","name":"active","required":false,"type":{"name":"boolean"}},"children":{"defaultValue":null,"description":"Element to trap focus at, must support ref prop","name":"children","required":true,"type":{"name":"any"}},"innerRef":{"defaultValue":null,"description":"Ref to combine with the focus trap ref","name":"innerRef","required":false,"type":{"name":"ForwardedRef<any>"}},"refProp":{"defaultValue":"ref","description":"Prop that is used to access element ref","name":"refProp","required":false,"type":{"name":"string"}}}},"FocusTrap.InitialFocus":{"description":"","props":{}},"Grid":{"props":{"align":{"defaultValue":"`stretch`","description":"Sets <code>align-items</code>","name":"align","required":false,"type":{"name":"AlignItems"}},"breakpoints":{"defaultValue":null,"description":"Breakpoints values, only used with <code>type=\\"container\\"</code>","name":"breakpoints","required":false,"type":{"name":"GridBreakpoints"}},"columns":{"defaultValue":"`12`","description":"Number of columns in each row","name":"columns","required":false,"type":{"name":"number"}},"grow":{"defaultValue":"`false`","description":"If set, columns in the last row expand to fill all available space","name":"grow","required":false,"type":{"name":"boolean"}},"gutter":{"defaultValue":"`\'md\'`","description":"Gutter between columns, key of <code>theme.spacing</code> or any valid CSS value","name":"gutter","required":false,"type":{"name":"StyleProp<MantineSpacing>"}},"justify":{"defaultValue":"`flex-start`","description":"Sets <code>justify-content</code>","name":"justify","required":false,"type":{"name":"JustifyContent"}},"overflow":{"defaultValue":"`\'visible\'`","description":"Sets <code>overflow</code> CSS property on the root element","name":"overflow","required":false,"type":{"name":"Overflow"}},"type":{"defaultValue":"`\'media\'`","description":"Type of queries used for responsive styles","name":"type","required":false,"type":{"name":"\\"media\\" | \\"container\\"","raw":"\\"media\\" | \\"container\\" | undefined","value":[{"value":"undefined"},{"value":"\\"media\\""},{"value":"\\"container\\""}]}}}},"Group":{"props":{"align":{"defaultValue":"`\'center\'`","description":"Controls <code>align-items</code> CSS property","name":"align","required":false,"type":{"name":"AlignItems"}},"gap":{"defaultValue":"`\'md\'`","description":"Key of <code>theme.spacing</code> or any valid CSS value for <code>gap</code>, numbers are converted to rem","name":"gap","required":false,"type":{"name":"MantineSpacing"}},"grow":{"defaultValue":"`false`","description":"Determines whether each child element should have <code>flex-grow: 1</code> style","name":"grow","required":false,"type":{"name":"boolean"}},"justify":{"defaultValue":"`\'flex-start\'`","description":"Controls <code>justify-content</code> CSS property","name":"justify","required":false,"type":{"name":"JustifyContent"}},"preventGrowOverflow":{"defaultValue":"`true`","description":"Determines whether children should take only dedicated amount of space (<code>max-width</code> style is set based on the number of children)","name":"preventGrowOverflow","required":false,"type":{"name":"boolean"}},"wrap":{"defaultValue":"`\'wrap\'`","description":"Controls <code>flex-wrap</code> CSS property","name":"wrap","required":false,"type":{"name":"FlexWrap","raw":"FlexWrap | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"wrap\\""},{"value":"\\"nowrap\\""},{"value":"\\"wrap-reverse\\""}]}}}},"Highlight":{"props":{"children":{"defaultValue":null,"description":"String parts of which must be highlighted","name":"children","required":true,"type":{"name":"string"}},"color":{"defaultValue":"`yellow`","description":"Key of <code>theme.colors</code> or any valid CSS color, passed to <code>Mark</code> component <code>color</code> prop","name":"color","required":false,"type":{"name":"string | (string & {})"}},"gradient":{"defaultValue":"`theme.defaultGradient`","description":"Gradient configuration, ignored when <code>variant</code> is not <code>gradient</code>","name":"gradient","required":false,"type":{"name":"MantineGradient"}},"highlight":{"defaultValue":null,"description":"Substring or a list of substrings to highlight in <code>children</code>","name":"highlight","required":true,"type":{"name":"string | string[]"}},"highlightStyles":{"defaultValue":null,"description":"Styles applied to <code>mark</code> elements","name":"highlightStyles","required":false,"type":{"name":"CSSProperties | ((theme: MantineTheme) => CSSProperties)"}},"inherit":{"defaultValue":"`false`","description":"Determines whether font properties should be inherited from the parent","name":"inherit","required":false,"type":{"name":"boolean"}},"inline":{"defaultValue":"`false`","description":"Sets <code>line-height</code> to 1 for centering","name":"inline","required":false,"type":{"name":"boolean"}},"lineClamp":{"defaultValue":null,"description":"Number of lines after which Text will be truncated","name":"lineClamp","required":false,"type":{"name":"number"}},"size":{"defaultValue":"`\'md\'`","description":"Controls <code>font-size</code> and <code>line-height</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"span":{"defaultValue":null,"description":"Shorthand for <code>component=\\"span\\"</code>","name":"span","required":false,"type":{"name":"boolean"}},"truncate":{"defaultValue":null,"description":"Side on which Text must be truncated, if <code>true</code>, text is truncated from the start","name":"truncate","required":false,"type":{"name":"TextTruncate"}}}},"HoverCard":{"props":{"arrowOffset":{"defaultValue":"`5`","description":"Arrow offset in px","name":"arrowOffset","required":false,"type":{"name":"number"}},"arrowPosition":{"defaultValue":null,"description":"Arrow position","name":"arrowPosition","required":false,"type":{"name":"ArrowPosition","raw":"ArrowPosition | undefined","value":[{"value":"undefined"},{"value":"\\"center\\""},{"value":"\\"side\\""}]}},"arrowRadius":{"defaultValue":"`0`","description":"Arrow <code>border-radius</code> in px","name":"arrowRadius","required":false,"type":{"name":"number"}},"arrowSize":{"defaultValue":"`7`","description":"Arrow size in px","name":"arrowSize","required":false,"type":{"name":"number"}},"children":{"defaultValue":null,"description":"<code>Popover.Target</code> and <code>Popover.Dropdown</code> components","name":"children","required":false,"type":{"name":"React.ReactNode"}},"clickOutsideEvents":{"defaultValue":null,"description":"Events that trigger outside clicks","name":"clickOutsideEvents","required":false,"type":{"name":"string[]"}},"closeDelay":{"defaultValue":null,"description":"Close delay in ms","name":"closeDelay","required":false,"type":{"name":"number"}},"closeOnClickOutside":{"defaultValue":"`true`","description":"Determines whether dropdown should be closed on outside clicks","name":"closeOnClickOutside","required":false,"type":{"name":"boolean"}},"closeOnEscape":{"defaultValue":"`true`","description":"Determines whether dropdown should be closed when <code>Escape</code> key is pressed","name":"closeOnEscape","required":false,"type":{"name":"boolean"}},"defaultOpened":{"defaultValue":null,"description":"Initial opened state for uncontrolled component","name":"defaultOpened","required":false,"type":{"name":"boolean"}},"disabled":{"defaultValue":null,"description":"If set, popover dropdown will not be rendered","name":"disabled","required":false,"type":{"name":"boolean"}},"floatingStrategy":{"defaultValue":"`\'absolute\'`","description":"Changes floating ui [position strategy](https://floating-ui.com/docs/usefloating#strategy)","name":"floatingStrategy","required":false,"type":{"name":"FloatingStrategy","raw":"FloatingStrategy | undefined","value":[{"value":"undefined"},{"value":"\\"fixed\\""},{"value":"\\"absolute\\""}]}},"hideDetached":{"defaultValue":"`true`","description":"If set, the dropdown is hidden when the element is hidden with styles or not visible on the screen","name":"hideDetached","required":false,"type":{"name":"boolean"}},"id":{"defaultValue":null,"description":"Id base to create accessibility connections","name":"id","required":false,"type":{"name":"string"}},"initiallyOpened":{"defaultValue":null,"description":"Initial opened state","name":"initiallyOpened","required":false,"type":{"name":"boolean"}},"keepMounted":{"defaultValue":null,"description":"If set, the dropdown is not unmounted from the DOM when hidden. <code>display: none</code> styles are added instead.","name":"keepMounted","required":false,"type":{"name":"boolean"}},"middlewares":{"defaultValue":"`{ flip: true, shift: true, inline: false }`","description":"Floating ui middlewares to configure position handling","name":"middlewares","required":false,"type":{"name":"PopoverMiddlewares"}},"offset":{"defaultValue":"`8`","description":"Offset of the dropdown element","name":"offset","required":false,"type":{"name":"number | FloatingAxesOffsets"}},"onClose":{"defaultValue":null,"description":"Called when the dropdown is closed","name":"onClose","required":false,"type":{"name":"() => void"}},"onDismiss":{"defaultValue":null,"description":"Called when the popover is dismissed by clicking outside or by pressing escape","name":"onDismiss","required":false,"type":{"name":"() => void"}},"onEnterTransitionEnd":{"defaultValue":null,"description":"Called when enter transition ends","name":"onEnterTransitionEnd","required":false,"type":{"name":"() => void"}},"onExitTransitionEnd":{"defaultValue":null,"description":"Called when exit transition ends","name":"onExitTransitionEnd","required":false,"type":{"name":"() => void"}},"onOpen":{"defaultValue":null,"description":"Called when the dropdown is opened","name":"onOpen","required":false,"type":{"name":"() => void"}},"onPositionChange":{"defaultValue":null,"description":"Called when dropdown position changes","name":"onPositionChange","required":false,"type":{"name":"(position: FloatingPosition) => void"}},"openDelay":{"defaultValue":null,"description":"Open delay in ms","name":"openDelay","required":false,"type":{"name":"number"}},"overlayProps":{"defaultValue":null,"description":"Props passed down to <code>Overlay</code> component","name":"overlayProps","required":false,"type":{"name":"OverlayProps & ElementProps<\\"div\\">"}},"portalProps":{"defaultValue":null,"description":"Props to pass down to the <code>Portal</code> when <code>withinPortal</code> is true","name":"portalProps","required":false,"type":{"name":"BasePortalProps"}},"position":{"defaultValue":"`\'bottom\'`","description":"Dropdown position relative to the target element","name":"position","required":false,"type":{"name":"FloatingPosition","raw":"FloatingPosition | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""},{"value":"\\"bottom\\""},{"value":"\\"top\\""},{"value":"\\"left-end\\""},{"value":"\\"left-start\\""},{"value":"\\"right-end\\""},{"value":"\\"right-start\\""},{"value":"\\"bottom-end\\""},{"value":"\\"bottom-start\\""},{"value":"\\"top-end\\""},{"value":"\\"top-start\\""}]}},"positionDependencies":{"defaultValue":null,"description":"@deprecated : Do not use, will be removed in 9.0","name":"positionDependencies","required":false,"type":{"name":"any[]"}},"preventPositionChangeWhenVisible":{"defaultValue":null,"description":"Prevents popover from flipping/shifting when it the dropdown is visible","name":"preventPositionChangeWhenVisible","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"returnFocus":{"defaultValue":"`false`","description":"Determines whether focus should be automatically returned to control when dropdown closes","name":"returnFocus","required":false,"type":{"name":"boolean"}},"shadow":{"defaultValue":null,"description":"Key of <code>theme.shadows</code> or any other valid CSS <code>box-shadow</code> value","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"transitionProps":{"defaultValue":"`{ duration: 150, transition: \'fade\' }`","description":"Props passed down to the <code>Transition</code> component. Use to configure duration and animation type.","name":"transitionProps","required":false,"type":{"name":"TransitionProps"}},"trapFocus":{"defaultValue":"`false`","description":"Determines whether focus should be trapped within dropdown","name":"trapFocus","required":false,"type":{"name":"boolean"}},"width":{"defaultValue":"`\'max-content\'`","description":"Dropdown width, or <code>\'target\'</code> to make dropdown width the same as target element","name":"width","required":false,"type":{"name":"PopoverWidth"}},"withArrow":{"defaultValue":"`false`","description":"Determines whether component should have an arrow","name":"withArrow","required":false,"type":{"name":"boolean"}},"withOverlay":{"defaultValue":"`false`","description":"Determines whether the overlay should be displayed when the dropdown is opened","name":"withOverlay","required":false,"type":{"name":"boolean"}},"withRoles":{"defaultValue":"`true`","description":"Determines whether dropdown and target elements should have accessible roles","name":"withRoles","required":false,"type":{"name":"boolean"}},"withinPortal":{"defaultValue":"`true`","description":"Determines whether dropdown should be rendered within the <code>Portal</code>","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":"`300`","description":"Dropdown <code>z-index</code>","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"HoverCard.Dropdown":{"props":{"children":{"defaultValue":null,"description":"Dropdown content","name":"children","required":false,"type":{"name":"React.ReactNode"}}}},"HoverCard.Group":{"props":{"children":{"defaultValue":null,"description":"<code>HoverCard</code> components","name":"children","required":true,"type":{"name":"React.ReactNode"}},"closeDelay":{"defaultValue":null,"description":"Close delay in ms","name":"closeDelay","required":false,"type":{"name":"number"}},"openDelay":{"defaultValue":null,"description":"Open delay in ms","name":"openDelay","required":false,"type":{"name":"number"}}}},"Image":{"props":{"fallbackSrc":{"defaultValue":null,"description":"Image url used as a fallback if the image cannot be loaded","name":"fallbackSrc","required":false,"type":{"name":"string"}},"fit":{"defaultValue":"`\'cover\'`","description":"Controls <code>object-fit</code> style","name":"fit","required":false,"type":{"name":"ObjectFit","raw":"ObjectFit | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"contain\\""},{"value":"\\"cover\\""},{"value":"\\"fill\\""},{"value":"\\"scale-down\\""}]}},"onError":{"defaultValue":null,"description":"Called when image fails to load","name":"onError","required":false,"type":{"name":"(event: SyntheticEvent<HTMLImageElement, Event>) => void"}},"radius":{"defaultValue":"`0`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"src":{"defaultValue":null,"description":"Image url","name":"src","required":false,"type":{"name":"any"}}}},"Indicator":{"props":{"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color value","name":"color","required":false,"type":{"name":"MantineColor"}},"disabled":{"defaultValue":null,"description":"If set, the indicator is hidden","name":"disabled","required":false,"type":{"name":"boolean"}},"inline":{"defaultValue":"`false`","description":"Determines whether the indicator container should be an inline element","name":"inline","required":false,"type":{"name":"boolean"}},"label":{"defaultValue":null,"description":"Label displayed inside the indicator, for example, notification count","name":"label","required":false,"type":{"name":"React.ReactNode"}},"offset":{"defaultValue":null,"description":"Indicator offset relative to the target element, usually used for elements with border-radius","name":"offset","required":false,"type":{"name":"number"}},"position":{"defaultValue":"`\'top-end\'`","description":"Indicator position relative to the target element","name":"position","required":false,"type":{"name":"\\"bottom-end\\" | \\"bottom-start\\" | \\"top-end\\" | \\"top-start\\" | \\"bottom-center\\" | \\"top-center\\" | \\"middle-center\\" | \\"middle-end\\" | \\"middle-start\\"","raw":"\\"bottom-end\\" | \\"bottom-start\\" | \\"top-end\\" | \\"top-start\\" | \\"bottom-center\\" | \\"top-center\\" | \\"middle-center\\" | \\"middle-end\\" | \\"middle-start\\" | undefined","value":[{"value":"undefined"},{"value":"\\"bottom-end\\""},{"value":"\\"bottom-start\\""},{"value":"\\"top-end\\""},{"value":"\\"top-start\\""},{"value":"\\"bottom-center\\""},{"value":"\\"top-center\\""},{"value":"\\"middle-center\\""},{"value":"\\"middle-end\\""},{"value":"\\"middle-start\\""}]}},"processing":{"defaultValue":"`false`","description":"If set, the indicator has processing animation","name":"processing","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`100`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"defaultValue":"`10`","description":"Indicator width and height","name":"size","required":false,"type":{"name":"string | number"}},"withBorder":{"defaultValue":null,"description":"Adds border to the root element","name":"withBorder","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":"`200`","description":"Indicator z-index","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Input":{"props":{"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Determines whether the input should have error styles and <code>aria-invalid</code> attribute","name":"error","required":false,"type":{"name":"React.ReactNode"}},"id":{"defaultValue":null,"description":"Input element id","name":"id","required":false,"type":{"name":"string"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"multiline":{"defaultValue":"`false`","description":"Determines whether the input can have multiple lines, for example when <code>component=\\"textarea\\"</code>","name":"multiline","required":false,"type":{"name":"boolean"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"defaultValue":null,"description":"Sets <code>required</code> attribute on the <code>input</code> element","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAria":{"defaultValue":"`true`","description":"Determines whether <code>aria-</code> and other accessibility attributes should be added to the input","name":"withAria","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element of the <code>Input</code> component","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"InputBase":{"props":{"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"multiline":{"defaultValue":"`false`","description":"If set, the input can have multiple lines, for example when <code>component=\\"textarea\\"</code>","name":"multiline","required":false,"type":{"name":"boolean"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAria":{"defaultValue":"`true`","description":"If set, <code>aria-</code> and other accessibility attributes are added to the input","name":"withAria","required":false,"type":{"name":"boolean"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element (<code>Input.Wrapper</code> component)","name":"wrapperProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \\"ref\\"> & DataAttributes"}}}},"JsonInput":{"props":{"autosize":{"defaultValue":"`false`","description":"If set, enables textarea height growing with its content","name":"autosize","required":false,"type":{"name":"boolean"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"deserialize":{"defaultValue":"`JSON.parse`","description":"Function to deserialize string value, used for value formatting and input JSON validation, must throw error if string cannot be processed","name":"deserialize","required":false,"type":{"name":"((text: string, reviver?: ((this: any, key: string, value: any) => any)) => any) | undefined"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"formatOnBlur":{"defaultValue":"`false`","description":"Determines whether the value should be formatted on blur","name":"formatOnBlur","required":false,"type":{"name":"boolean"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"maxRows":{"defaultValue":null,"description":"Maximum rows for autosize textarea to grow, ignored if <code>autosize</code> prop is not set","name":"maxRows","required":false,"type":{"name":"number"}},"minRows":{"defaultValue":null,"description":"Minimum rows of autosize textarea, ignored if <code>autosize</code> prop is not set","name":"minRows","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: string) => void"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"resize":{"defaultValue":"`\'none\'`","description":"Controls <code>resize</code> CSS property","name":"resize","required":false,"type":{"name":"Resize","raw":"Resize | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"block\\""},{"value":"\\"inline\\""},{"value":"\\"both\\""},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"serialize":{"defaultValue":"`JSON.stringify`","description":"Function to serialize value into a string, used for value formatting","name":"serialize","required":false,"type":{"name":"{ (value: any, replacer?: ((this: any, key: string, value: any) => any), space?: string | number | undefined): string; (value: any, replacer?: (string | number)[] | null | undefined, space?: string | ... 1 more ... | undefined): string; } | undefined"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"validationError":{"defaultValue":null,"description":"Error message displayed when value is not valid JSON","name":"validationError","required":false,"type":{"name":"React.ReactNode"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"Kbd":{"props":{"size":{"defaultValue":"`\'sm\'`","description":"Controls <code>font-size</code> and <code>padding</code>","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}}}},"List":{"props":{"center":{"defaultValue":"`false`","description":"Determines whether items must be centered with their icon","name":"center","required":false,"type":{"name":"boolean"}},"children":{"defaultValue":null,"description":"<code>List.Item</code> components","name":"children","required":false,"type":{"name":"React.ReactNode"}},"icon":{"defaultValue":null,"description":"Icon to replace list item dot","name":"icon","required":false,"type":{"name":"React.ReactNode"}},"listStyleType":{"defaultValue":null,"description":"Controls <code>list-style-type</code>, by default inferred from <code>type</code>","name":"listStyleType","required":false,"type":{"name":"ListStyleType"}},"size":{"defaultValue":"`\'md\'`","description":"Controls <code>font-size</code> and <code>line-height</code>","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"spacing":{"defaultValue":"`0`","description":"Key of <code>theme.spacing</code> or any valid CSS value to set spacing between items","name":"spacing","required":false,"type":{"name":"MantineSpacing"}},"type":{"defaultValue":"`\'unordered\'`","description":"List type","name":"type","required":false,"type":{"name":"\\"ordered\\" | \\"unordered\\"","raw":"\\"ordered\\" | \\"unordered\\" | undefined","value":[{"value":"undefined"},{"value":"\\"ordered\\""},{"value":"\\"unordered\\""}]}},"withPadding":{"defaultValue":"`false`","description":"Determines whether list items should be offset with padding","name":"withPadding","required":false,"type":{"name":"boolean"}}}},"Loader":{"props":{"children":{"defaultValue":null,"description":"Overrides default loader with given content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color","name":"color","required":false,"type":{"name":"MantineColor"}},"loaders":{"defaultValue":null,"description":"Object of loaders components, can be customized via default props or inline.","name":"loaders","required":false,"type":{"name":"Partial<Record<(string & {}) | \\"bars\\" | \\"dots\\" | \\"oval\\", MantineLoaderComponent>>"}},"size":{"defaultValue":"`\'md\'`","description":"Controls <code>width</code> and <code>height</code> of the loader. <code>Loader</code> has predefined <code>xs</code>-<code>xl</code> values. Numbers are converted to rem.","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"type":{"defaultValue":"`\'oval\'`","description":"Loader type, key of <code>loaders</code> prop","name":"type","required":false,"type":{"name":"(string & {}) | \\"bars\\" | \\"dots\\" | \\"oval\\""}}}},"LoadingOverlay":{"props":{"loaderProps":{"defaultValue":null,"description":"Props passed down to <code>Loader</code> component","name":"loaderProps","required":false,"type":{"name":"LoaderProps"}},"overlayProps":{"defaultValue":null,"description":"Props passed down to <code>Overlay</code> component","name":"overlayProps","required":false,"type":{"name":"OverlayProps"}},"transitionProps":{"defaultValue":"`{ transition: \'fade\', duration: 0 }`","description":"Props passed down to <code>Transition</code> component","name":"transitionProps","required":false,"type":{"name":"TransitionProps"}},"visible":{"defaultValue":"`false`","description":"Determines whether the overlay should be visible","name":"visible","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":"`400`","description":"Controls overlay <code>z-index</code>","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Mark":{"props":{"color":{"defaultValue":"`yellow`","description":"Key of <code>theme.colors</code> or any valid CSS color","name":"color","required":false,"type":{"name":"MantineColor"}}}},"Menu":{"props":{"arrowOffset":{"defaultValue":"`5`","description":"Arrow offset in px","name":"arrowOffset","required":false,"type":{"name":"number"}},"arrowPosition":{"defaultValue":null,"description":"Arrow position","name":"arrowPosition","required":false,"type":{"name":"ArrowPosition","raw":"ArrowPosition | undefined","value":[{"value":"undefined"},{"value":"\\"center\\""},{"value":"\\"side\\""}]}},"arrowRadius":{"defaultValue":"`0`","description":"Arrow <code>border-radius</code> in px","name":"arrowRadius","required":false,"type":{"name":"number"}},"arrowSize":{"defaultValue":"`7`","description":"Arrow size in px","name":"arrowSize","required":false,"type":{"name":"number"}},"children":{"defaultValue":null,"description":"Menu children","name":"children","required":false,"type":{"name":"React.ReactNode"}},"clickOutsideEvents":{"defaultValue":"`[\'mousedown\', \'touchstart\', \'keydown\']`","description":"Events that trigger outside clicks","name":"clickOutsideEvents","required":false,"type":{"name":"string[]"}},"closeDelay":{"defaultValue":null,"description":"Close delay in ms, applicable only to <code>trigger=\\"hover\\"</code> variant","name":"closeDelay","required":false,"type":{"name":"number"}},"closeOnClickOutside":{"defaultValue":null,"description":"If set, the dropdown is closed on outside clicks","name":"closeOnClickOutside","required":false,"type":{"name":"boolean"}},"closeOnEscape":{"defaultValue":"`true`","description":"If set, the dropdown is closed when the <code>Escape</code> key is pressed","name":"closeOnEscape","required":false,"type":{"name":"boolean"}},"closeOnItemClick":{"defaultValue":null,"description":"If set, the Menu is closed when one of the items is clicked","name":"closeOnItemClick","required":false,"type":{"name":"boolean"}},"defaultOpened":{"defaultValue":null,"description":"Uncontrolled menu initial opened state","name":"defaultOpened","required":false,"type":{"name":"boolean"}},"disabled":{"defaultValue":null,"description":"If set, popover dropdown will not be rendered","name":"disabled","required":false,"type":{"name":"boolean"}},"floatingStrategy":{"defaultValue":"`\'absolute\'`","description":"Changes floating ui [position strategy](https://floating-ui.com/docs/usefloating#strategy)","name":"floatingStrategy","required":false,"type":{"name":"FloatingStrategy","raw":"FloatingStrategy | undefined","value":[{"value":"undefined"},{"value":"\\"fixed\\""},{"value":"\\"absolute\\""}]}},"hideDetached":{"defaultValue":"`true`","description":"If set, the dropdown is hidden when the element is hidden with styles or not visible on the screen","name":"hideDetached","required":false,"type":{"name":"boolean"}},"id":{"defaultValue":null,"description":"Id base to create accessibility connections","name":"id","required":false,"type":{"name":"string"}},"keepMounted":{"defaultValue":null,"description":"If set, the dropdown is not unmounted from the DOM when hidden. <code>display: none</code> styles are added instead.","name":"keepMounted","required":false,"type":{"name":"boolean"}},"loop":{"defaultValue":null,"description":"If set, arrow key presses loop though items (first to last and last to first)","name":"loop","required":false,"type":{"name":"boolean"}},"menuItemTabIndex":{"defaultValue":"`-1`","description":"Set the <code>tabindex</code> on all menu items","name":"menuItemTabIndex","required":false,"type":{"name":"0 | -1","raw":"0 | -1 | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"-1"}]}},"middlewares":{"defaultValue":"`{ flip: true, shift: true, inline: false }`","description":"Floating ui middlewares to configure position handling","name":"middlewares","required":false,"type":{"name":"PopoverMiddlewares"}},"offset":{"defaultValue":"`8`","description":"Offset of the dropdown element","name":"offset","required":false,"type":{"name":"number | FloatingAxesOffsets"}},"onChange":{"defaultValue":null,"description":"Called when menu opened state changes","name":"onChange","required":false,"type":{"name":"(opened: boolean) => void"}},"onClose":{"defaultValue":null,"description":"Called when Menu is closed","name":"onClose","required":false,"type":{"name":"() => void"}},"onDismiss":{"defaultValue":null,"description":"Called when the popover is dismissed by clicking outside or by pressing escape","name":"onDismiss","required":false,"type":{"name":"() => void"}},"onEnterTransitionEnd":{"defaultValue":null,"description":"Called when enter transition ends","name":"onEnterTransitionEnd","required":false,"type":{"name":"() => void"}},"onExitTransitionEnd":{"defaultValue":null,"description":"Called when exit transition ends","name":"onExitTransitionEnd","required":false,"type":{"name":"() => void"}},"onOpen":{"defaultValue":null,"description":"Called when Menu is opened","name":"onOpen","required":false,"type":{"name":"() => void"}},"onPositionChange":{"defaultValue":null,"description":"Called when dropdown position changes","name":"onPositionChange","required":false,"type":{"name":"(position: FloatingPosition) => void"}},"openDelay":{"defaultValue":null,"description":"Open delay in ms, applicable only to <code>trigger=\\"hover\\"</code> variant","name":"openDelay","required":false,"type":{"name":"number"}},"opened":{"defaultValue":null,"description":"Controlled menu opened state","name":"opened","required":false,"type":{"name":"boolean"}},"overlayProps":{"defaultValue":null,"description":"Props passed down to <code>Overlay</code> component","name":"overlayProps","required":false,"type":{"name":"OverlayProps & ElementProps<\\"div\\">"}},"portalProps":{"defaultValue":null,"description":"Props to pass down to the <code>Portal</code> when <code>withinPortal</code> is true","name":"portalProps","required":false,"type":{"name":"BasePortalProps"}},"position":{"defaultValue":"`\'bottom\'`","description":"Dropdown position relative to the target element","name":"position","required":false,"type":{"name":"FloatingPosition","raw":"FloatingPosition | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""},{"value":"\\"bottom\\""},{"value":"\\"top\\""},{"value":"\\"left-end\\""},{"value":"\\"left-start\\""},{"value":"\\"right-end\\""},{"value":"\\"right-start\\""},{"value":"\\"bottom-end\\""},{"value":"\\"bottom-start\\""},{"value":"\\"top-end\\""},{"value":"\\"top-start\\""}]}},"positionDependencies":{"defaultValue":null,"description":"@deprecated : Do not use, will be removed in 9.0","name":"positionDependencies","required":false,"type":{"name":"any[]"}},"preventPositionChangeWhenVisible":{"defaultValue":null,"description":"Prevents popover from flipping/shifting when it the dropdown is visible","name":"preventPositionChangeWhenVisible","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"returnFocus":{"defaultValue":"`false`","description":"Determines whether focus should be automatically returned to control when dropdown closes","name":"returnFocus","required":false,"type":{"name":"boolean"}},"shadow":{"defaultValue":null,"description":"Key of <code>theme.shadows</code> or any other valid CSS <code>box-shadow</code> value","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"transitionProps":{"defaultValue":"`{ duration: 150, transition: \'fade\' }`","description":"Props passed down to the <code>Transition</code> component. Use to configure duration and animation type.","name":"transitionProps","required":false,"type":{"name":"TransitionProps"}},"trapFocus":{"defaultValue":null,"description":"If set, focus is trapped within the menu dropdown when it is opened","name":"trapFocus","required":false,"type":{"name":"boolean"}},"trigger":{"defaultValue":null,"description":"Event trigger to open menu","name":"trigger","required":false,"type":{"name":"\\"hover\\" | \\"click\\" | \\"click-hover\\"","raw":"\\"hover\\" | \\"click\\" | \\"click-hover\\" | undefined","value":[{"value":"undefined"},{"value":"\\"hover\\""},{"value":"\\"click\\""},{"value":"\\"click-hover\\""}]}},"width":{"defaultValue":"`\'max-content\'`","description":"Dropdown width, or <code>\'target\'</code> to make dropdown width the same as target element","name":"width","required":false,"type":{"name":"PopoverWidth"}},"withArrow":{"defaultValue":"`false`","description":"Determines whether component should have an arrow","name":"withArrow","required":false,"type":{"name":"boolean"}},"withInitialFocusPlaceholder":{"defaultValue":"`true`","description":"If set, focus placeholder element is added before items","name":"withInitialFocusPlaceholder","required":false,"type":{"name":"boolean"}},"withOverlay":{"defaultValue":"`false`","description":"Determines whether the overlay should be displayed when the dropdown is opened","name":"withOverlay","required":false,"type":{"name":"boolean"}},"withinPortal":{"defaultValue":"`true`","description":"Determines whether dropdown should be rendered within the <code>Portal</code>","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":"`300`","description":"Dropdown <code>z-index</code>","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Menu.Item":{"props":{"children":{"defaultValue":null,"description":"Item label","name":"children","required":false,"type":{"name":"React.ReactNode"}},"closeMenuOnClick":{"defaultValue":null,"description":"If set, the menu is closed when the item is clicked. Overrides <code>closeOnItemClick</code> prop on the <code>Menu</code> component.","name":"closeMenuOnClick","required":false,"type":{"name":"boolean"}},"color":{"defaultValue":null,"description":"Key of <code>theme.colors</code> or any valid CSS color","name":"color","required":false,"type":{"name":"MantineColor"}},"disabled":{"defaultValue":null,"description":"Sets disabled attribute, applies disabled styles","name":"disabled","required":false,"type":{"name":"boolean"}},"leftSection":{"defaultValue":null,"description":"Section displayed at the start of the label","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"rightSection":{"defaultValue":null,"description":"Section displayed at the end of the label","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}}}},"Menu.Label":{"description":"","props":{}},"Menu.Dropdown":{"description":"","props":{}},"Menu.Divider":{"description":"","props":{}},"Menu.Sub":{"props":{"arrowOffset":{"defaultValue":"`5`","description":"Arrow offset in px","name":"arrowOffset","required":false,"type":{"name":"number"}},"arrowPosition":{"defaultValue":null,"description":"Arrow position","name":"arrowPosition","required":false,"type":{"name":"ArrowPosition","raw":"ArrowPosition | undefined","value":[{"value":"undefined"},{"value":"\\"center\\""},{"value":"\\"side\\""}]}},"arrowRadius":{"defaultValue":"`0`","description":"Arrow <code>border-radius</code> in px","name":"arrowRadius","required":false,"type":{"name":"number"}},"arrowSize":{"defaultValue":"`7`","description":"Arrow size in px","name":"arrowSize","required":false,"type":{"name":"number"}},"closeDelay":{"defaultValue":null,"description":"Close delay in ms","name":"closeDelay","required":false,"type":{"name":"number"}},"disabled":{"defaultValue":null,"description":"If set, popover dropdown will not be rendered","name":"disabled","required":false,"type":{"name":"boolean"}},"floatingStrategy":{"defaultValue":"`\'absolute\'`","description":"Changes floating ui [position strategy](https://floating-ui.com/docs/usefloating#strategy)","name":"floatingStrategy","required":false,"type":{"name":"FloatingStrategy","raw":"FloatingStrategy | undefined","value":[{"value":"undefined"},{"value":"\\"fixed\\""},{"value":"\\"absolute\\""}]}},"hideDetached":{"defaultValue":"`true`","description":"If set, the dropdown is hidden when the element is hidden with styles or not visible on the screen","name":"hideDetached","required":false,"type":{"name":"boolean"}},"keepMounted":{"defaultValue":null,"description":"If set, the dropdown is not unmounted from the DOM when hidden. <code>display: none</code> styles are added instead.","name":"keepMounted","required":false,"type":{"name":"boolean"}},"middlewares":{"defaultValue":"`{ flip: true, shift: true, inline: false }`","description":"Floating ui middlewares to configure position handling","name":"middlewares","required":false,"type":{"name":"PopoverMiddlewares"}},"offset":{"defaultValue":"`0`","description":"Offset of the dropdown element","name":"offset","required":false,"type":{"name":"number | FloatingAxesOffsets"}},"onChange":{"defaultValue":null,"description":"Called with current state when dropdown opens or closes","name":"onChange","required":false,"type":{"name":"(opened: boolean) => void"}},"onClose":{"defaultValue":null,"description":"Called when dropdown closes","name":"onClose","required":false,"type":{"name":"() => void"}},"onDismiss":{"defaultValue":null,"description":"Called when the popover is dismissed by clicking outside or by pressing escape","name":"onDismiss","required":false,"type":{"name":"() => void"}},"onEnterTransitionEnd":{"defaultValue":null,"description":"Called when enter transition ends","name":"onEnterTransitionEnd","required":false,"type":{"name":"() => void"}},"onExitTransitionEnd":{"defaultValue":null,"description":"Called when exit transition ends","name":"onExitTransitionEnd","required":false,"type":{"name":"() => void"}},"onOpen":{"defaultValue":null,"description":"Called when dropdown opens","name":"onOpen","required":false,"type":{"name":"() => void"}},"onPositionChange":{"defaultValue":null,"description":"Called when dropdown position changes","name":"onPositionChange","required":false,"type":{"name":"(position: FloatingPosition) => void"}},"overlayProps":{"defaultValue":null,"description":"Props passed down to <code>Overlay</code> component","name":"overlayProps","required":false,"type":{"name":"OverlayProps & ElementProps<\\"div\\">"}},"portalProps":{"defaultValue":null,"description":"Props to pass down to the <code>Portal</code> when <code>withinPortal</code> is true","name":"portalProps","required":false,"type":{"name":"BasePortalProps"}},"position":{"defaultValue":"`\'right-start\'`","description":"Dropdown position relative to the target element","name":"position","required":false,"type":{"name":"FloatingPosition","raw":"FloatingPosition | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""},{"value":"\\"bottom\\""},{"value":"\\"top\\""},{"value":"\\"left-end\\""},{"value":"\\"left-start\\""},{"value":"\\"right-end\\""},{"value":"\\"right-start\\""},{"value":"\\"bottom-end\\""},{"value":"\\"bottom-start\\""},{"value":"\\"top-end\\""},{"value":"\\"top-start\\""}]}},"positionDependencies":{"defaultValue":null,"description":"@deprecated : Do not use, will be removed in 9.0","name":"positionDependencies","required":false,"type":{"name":"any[]"}},"preventPositionChangeWhenVisible":{"defaultValue":null,"description":"Prevents popover from flipping/shifting when it the dropdown is visible","name":"preventPositionChangeWhenVisible","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"returnFocus":{"defaultValue":"`false`","description":"Determines whether focus should be automatically returned to control when dropdown closes","name":"returnFocus","required":false,"type":{"name":"boolean"}},"shadow":{"defaultValue":null,"description":"Key of <code>theme.shadows</code> or any other valid CSS <code>box-shadow</code> value","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"transitionProps":{"defaultValue":"`{ duration: 0 }`","description":"Props passed down to the <code>Transition</code> component that used to animate dropdown presence, use to configure duration and animation type","name":"transitionProps","required":false,"type":{"name":"TransitionProps"}},"width":{"defaultValue":"`\'max-content\'`","description":"Dropdown width, or <code>\'target\'</code> to make dropdown width the same as target element","name":"width","required":false,"type":{"name":"PopoverWidth"}},"withArrow":{"defaultValue":"`false`","description":"Determines whether component should have an arrow","name":"withArrow","required":false,"type":{"name":"boolean"}},"withOverlay":{"defaultValue":"`false`","description":"Determines whether the overlay should be displayed when the dropdown is opened","name":"withOverlay","required":false,"type":{"name":"boolean"}},"withinPortal":{"defaultValue":"`true`","description":"Determines whether dropdown should be rendered within the <code>Portal</code>","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":"`300`","description":"Dropdown <code>z-index</code>","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Modal":{"props":{"centered":{"defaultValue":"`false`","description":"If set, the modal is centered vertically","name":"centered","required":false,"type":{"name":"boolean"}},"children":{"defaultValue":null,"description":"Modal content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"closeButtonProps":{"defaultValue":null,"description":"Props passed down to the close button","name":"closeButtonProps","required":false,"type":{"name":"ModalBaseCloseButtonProps"}},"closeOnClickOutside":{"defaultValue":"`true`","description":"If set, the modal/drawer is closed when user clicks on the overlay","name":"closeOnClickOutside","required":false,"type":{"name":"boolean"}},"closeOnEscape":{"defaultValue":"`true`","description":"If set, <code>onClose</code> is called when user presses the escape key","name":"closeOnEscape","required":false,"type":{"name":"boolean"}},"fullScreen":{"defaultValue":"`false`","description":"If set, the modal takes the entire screen","name":"fullScreen","required":false,"type":{"name":"boolean"}},"id":{"defaultValue":null,"description":"Id used to connect modal/drawer with body and title","name":"id","required":false,"type":{"name":"string"}},"keepMounted":{"defaultValue":"`false`","description":"If set modal/drawer is not unmounted from the DOM when hidden. <code>display: none</code> styles are applied instead.","name":"keepMounted","required":false,"type":{"name":"boolean"}},"lockScroll":{"defaultValue":"`true`","description":"If set, scroll is locked when <code>opened={true}</code>","name":"lockScroll","required":false,"type":{"name":"boolean"}},"onClose":{"defaultValue":null,"description":"Called when modal/drawer is closed","name":"onClose","required":true,"type":{"name":"() => void"}},"onEnterTransitionEnd":{"defaultValue":null,"description":"Called when enter transition ends","name":"onEnterTransitionEnd","required":false,"type":{"name":"() => void"}},"onExitTransitionEnd":{"defaultValue":null,"description":"Called when exit transition ends","name":"onExitTransitionEnd","required":false,"type":{"name":"() => void"}},"opened":{"defaultValue":null,"description":"Controls opened state","name":"opened","required":true,"type":{"name":"boolean"}},"overlayProps":{"defaultValue":null,"description":"Props passed down to the <code>Overlay</code> component, use to configure opacity, <code>background-color</code>, styles and other properties","name":"overlayProps","required":false,"type":{"name":"ModalBaseOverlayProps"}},"padding":{"defaultValue":"`\'md\'`","description":"Key of <code>theme.spacing</code> or any valid CSS value to set content, header and footer padding","name":"padding","required":false,"type":{"name":"MantineSpacing"}},"portalProps":{"defaultValue":null,"description":"Props passed down to the Portal component when <code>withinPortal</code> is set","name":"portalProps","required":false,"type":{"name":"BasePortalProps"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"removeScrollProps":{"defaultValue":null,"description":"Props passed down to react-remove-scroll, can be used to customize scroll lock behavior","name":"removeScrollProps","required":false,"type":{"name":"RemoveScrollProps"}},"returnFocus":{"defaultValue":"`true`","description":"If set, focus is returned to the last active element when <code>onClose</code> is called","name":"returnFocus","required":false,"type":{"name":"boolean"}},"scrollAreaComponent":{"defaultValue":"`\'div\'`","description":"Scroll area component","name":"scrollAreaComponent","required":false,"type":{"name":"ScrollAreaComponent"}},"shadow":{"defaultValue":"`\'xl\'`","description":"Key of <code>theme.shadows</code> or any valid CSS box-shadow value","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"size":{"defaultValue":"`\'md\'`","description":"Controls width of the content area","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"stackId":{"defaultValue":null,"description":"Id of the modal in the <code>Modal.Stack</code>","name":"stackId","required":false,"type":{"name":"string"}},"title":{"defaultValue":null,"description":"Modal title","name":"title","required":false,"type":{"name":"React.ReactNode"}},"transitionProps":{"defaultValue":null,"description":"Props added to the <code>Transition</code> component that used to animate overlay and body, use to configure duration and animation type, <code>{ duration: 200, transition: \'fade-down\' }</code> by default","name":"transitionProps","required":false,"type":{"name":"TransitionProps"}},"trapFocus":{"defaultValue":"`true`","description":"If set, focus is trapped within the modal/drawer","name":"trapFocus","required":false,"type":{"name":"boolean"}},"withCloseButton":{"defaultValue":"`true`","description":"If set, the close button is rendered","name":"withCloseButton","required":false,"type":{"name":"boolean"}},"withOverlay":{"defaultValue":"`true`","description":"If set, the overlay is rendered","name":"withOverlay","required":false,"type":{"name":"boolean"}},"withinPortal":{"defaultValue":"`true`","description":"If set, the component is rendered inside <code>Portal</code>","name":"withinPortal","required":false,"type":{"name":"boolean"}},"xOffset":{"defaultValue":"`5vw`","description":"Left/right modal offset","name":"xOffset","required":false,"type":{"name":"MarginLeft<string | number>"}},"yOffset":{"defaultValue":"`5dvh`","description":"Top/bottom modal offset","name":"yOffset","required":false,"type":{"name":"MarginTop<string | number>"}},"zIndex":{"defaultValue":"`200`","description":"<code>z-index</code> CSS property of the root element","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"ModalBase":{"props":{"children":{"defaultValue":null,"description":"Modal/drawer content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"closeOnClickOutside":{"defaultValue":"`true`","description":"If set, the modal/drawer is closed when user clicks on the overlay","name":"closeOnClickOutside","required":false,"type":{"name":"boolean"}},"closeOnEscape":{"defaultValue":"`true`","description":"If set, <code>onClose</code> is called when user presses the escape key","name":"closeOnEscape","required":false,"type":{"name":"boolean"}},"id":{"defaultValue":null,"description":"Id used to connect modal/drawer with body and title","name":"id","required":false,"type":{"name":"string"}},"keepMounted":{"defaultValue":"`false`","description":"If set modal/drawer is not unmounted from the DOM when hidden. <code>display: none</code> styles are applied instead.","name":"keepMounted","required":false,"type":{"name":"boolean"}},"lockScroll":{"defaultValue":"`true`","description":"If set, scroll is locked when <code>opened={true}</code>","name":"lockScroll","required":false,"type":{"name":"boolean"}},"onClose":{"defaultValue":null,"description":"Called when modal/drawer is closed","name":"onClose","required":true,"type":{"name":"() => void"}},"onEnterTransitionEnd":{"defaultValue":null,"description":"Called when enter transition ends","name":"onEnterTransitionEnd","required":false,"type":{"name":"() => void"}},"onExitTransitionEnd":{"defaultValue":null,"description":"Called when exit transition ends","name":"onExitTransitionEnd","required":false,"type":{"name":"() => void"}},"opened":{"defaultValue":null,"description":"Controls opened state","name":"opened","required":true,"type":{"name":"boolean"}},"padding":{"defaultValue":"`\'md\'`","description":"Key of <code>theme.spacing</code> or any valid CSS value to set content, header and footer padding","name":"padding","required":false,"type":{"name":"MantineSpacing"}},"portalProps":{"defaultValue":null,"description":"Props passed down to the Portal component when <code>withinPortal</code> is set","name":"portalProps","required":false,"type":{"name":"BasePortalProps"}},"removeScrollProps":{"defaultValue":null,"description":"Props passed down to react-remove-scroll, can be used to customize scroll lock behavior","name":"removeScrollProps","required":false,"type":{"name":"RemoveScrollProps"}},"returnFocus":{"defaultValue":"`true`","description":"If set, focus is returned to the last active element when <code>onClose</code> is called","name":"returnFocus","required":false,"type":{"name":"boolean"}},"shadow":{"defaultValue":"`\'xl\'`","description":"Key of <code>theme.shadows</code> or any valid CSS box-shadow value","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"size":{"defaultValue":"`\'md\'`","description":"Controls width of the content area","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"transitionProps":{"defaultValue":null,"description":"Props added to the <code>Transition</code> component that used to animate overlay and body, use to configure duration and animation type, <code>{ duration: 200, transition: \'fade-down\' }</code> by default","name":"transitionProps","required":false,"type":{"name":"TransitionProps"}},"trapFocus":{"defaultValue":"`true`","description":"If set, focus is trapped within the modal/drawer","name":"trapFocus","required":false,"type":{"name":"boolean"}},"withinPortal":{"defaultValue":"`true`","description":"If set, the component is rendered inside <code>Portal</code>","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":"`200`","description":"<code>z-index</code> CSS property of the root element","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"MultiSelect":{"props":{"checkIconPosition":{"defaultValue":"`\'left\'`","description":"Position of the check icon relative to the option label","name":"checkIconPosition","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"chevronColor":{"defaultValue":null,"description":"Controls color of the default chevron","name":"chevronColor","required":false,"type":{"name":"MantineColor"}},"clearButtonProps":{"defaultValue":null,"description":"Props passed down to the clear button","name":"clearButtonProps","required":false,"type":{"name":"InputClearButtonProps"}},"clearSearchOnChange":{"defaultValue":null,"description":"Clear search value when item is selected","name":"clearSearchOnChange","required":false,"type":{"name":"boolean"}},"clearable":{"defaultValue":"`false`","description":"If set, the clear button is displayed in the right section when the component has value","name":"clearable","required":false,"type":{"name":"boolean"}},"comboboxProps":{"defaultValue":null,"description":"Props passed down to <code>Combobox</code> component","name":"comboboxProps","required":false,"type":{"name":"ComboboxProps"}},"data":{"defaultValue":null,"description":"Data used to generate options. Values must be unique, otherwise an error will be thrown and component will not render.","name":"data","required":false,"type":{"name":"ComboboxData"}},"defaultDropdownOpened":{"defaultValue":null,"description":"Uncontrolled dropdown initial opened state","name":"defaultDropdownOpened","required":false,"type":{"name":"boolean"}},"defaultSearchValue":{"defaultValue":null,"description":"Default search value","name":"defaultSearchValue","required":false,"type":{"name":"string"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string[]"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownOpened":{"defaultValue":null,"description":"Controlled dropdown opened state","name":"dropdownOpened","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"filter":{"defaultValue":null,"description":"Function based on which items are filtered and sorted","name":"filter","required":false,"type":{"name":"OptionsFilter"}},"hiddenInputProps":{"defaultValue":null,"description":"Props passed down to the hidden input","name":"hiddenInputProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"input\\">"}},"hiddenInputValuesDivider":{"defaultValue":"`\',\'`","description":"Divider used to separate values in the hidden input <code>value</code> attribute","name":"hiddenInputValuesDivider","required":false,"type":{"name":"string"}},"hidePickedOptions":{"defaultValue":"`false`","description":"If set, picked options are removed from the options list","name":"hidePickedOptions","required":false,"type":{"name":"boolean"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"limit":{"defaultValue":null,"description":"Maximum number of options displayed at a time, <code>Infinity</code> by default","name":"limit","required":false,"type":{"name":"number"}},"maxDropdownHeight":{"defaultValue":null,"description":"<code>max-height</code> of the dropdown, only applicable when <code>withScrollArea</code> prop is <code>true</code>, <code>250</code> by default","name":"maxDropdownHeight","required":false,"type":{"name":"string | number"}},"maxValues":{"defaultValue":null,"description":"Maximum number of values, no limit if not set","name":"maxValues","required":false,"type":{"name":"number"}},"nothingFoundMessage":{"defaultValue":null,"description":"Message displayed when no option matches the current search query while the <code>searchable</code> prop is set or there is no data","name":"nothingFoundMessage","required":false,"type":{"name":"React.ReactNode"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: string[]) => void"}},"onClear":{"defaultValue":null,"description":"Called when the clear button is clicked","name":"onClear","required":false,"type":{"name":"() => void"}},"onDropdownClose":{"defaultValue":null,"description":"Called when dropdown closes","name":"onDropdownClose","required":false,"type":{"name":"() => void"}},"onDropdownOpen":{"defaultValue":null,"description":"Called when dropdown opens","name":"onDropdownOpen","required":false,"type":{"name":"() => void"}},"onOptionSubmit":{"defaultValue":null,"description":"Called when option is submitted from dropdown with mouse click or <code>Enter</code> key","name":"onOptionSubmit","required":false,"type":{"name":"(value: string) => void"}},"onRemove":{"defaultValue":null,"description":"Called with <code>value</code> of the removed item","name":"onRemove","required":false,"type":{"name":"(value: string) => void"}},"onSearchChange":{"defaultValue":null,"description":"Called when search changes","name":"onSearchChange","required":false,"type":{"name":"(value: string) => void"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"renderOption":{"defaultValue":null,"description":"A function to render content of the option, replaces the default content of the option","name":"renderOption","required":false,"type":{"name":"(item: ComboboxLikeRenderOptionInput<ComboboxItem>) => ReactNode"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"scrollAreaProps":{"defaultValue":null,"description":"Props passed down to the underlying <code>ScrollArea</code> component in the dropdown","name":"scrollAreaProps","required":false,"type":{"name":"ScrollAreaProps"}},"searchValue":{"defaultValue":null,"description":"Controlled search value","name":"searchValue","required":false,"type":{"name":"string"}},"searchable":{"defaultValue":"`false`","description":"Allows searching","name":"searchable","required":false,"type":{"name":"boolean"}},"selectFirstOptionOnChange":{"defaultValue":null,"description":"If set, the first option is selected when value changes, <code>false</code> by default","name":"selectFirstOptionOnChange","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string[]"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withCheckIcon":{"defaultValue":"`true`","description":"If set, the check icon is displayed near the selected option label","name":"withCheckIcon","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withScrollArea":{"defaultValue":null,"description":"Determines whether the options should be wrapped with <code>ScrollArea.AutoSize</code>, <code>true</code> by default","name":"withScrollArea","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"NativeSelect":{"props":{"data":{"defaultValue":null,"description":"Data used to render options, can be replaced with <code>children</code>","name":"data","required":false,"type":{"name":"ComboboxData"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"NavLink":{"props":{"active":{"defaultValue":"`false`","description":"Determines whether the link should have active styles","name":"active","required":false,"type":{"name":"boolean"}},"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"children":{"defaultValue":null,"description":"Child <code>NavLink</code> components","name":"children","required":false,"type":{"name":"React.ReactNode"}},"childrenOffset":{"defaultValue":"`\'lg\'`","description":"Key of <code>theme.spacing</code> or any valid CSS value to set collapsed links <code>padding-left</code>","name":"childrenOffset","required":false,"type":{"name":"MantineSpacing"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> of any valid CSS color to control active styles","name":"color","required":false,"type":{"name":"MantineColor"}},"defaultOpened":{"defaultValue":null,"description":"Uncontrolled nested items collapse initial state","name":"defaultOpened","required":false,"type":{"name":"boolean"}},"description":{"defaultValue":null,"description":"Link description, displayed below the label","name":"description","required":false,"type":{"name":"React.ReactNode"}},"disableRightSectionRotation":{"defaultValue":"`false`","description":"If set, right section will not be rotated when collapse is opened","name":"disableRightSectionRotation","required":false,"type":{"name":"boolean"}},"disabled":{"defaultValue":"`false`","description":"If set, disabled styles will be added to the root element","name":"disabled","required":false,"type":{"name":"boolean"}},"label":{"defaultValue":null,"description":"Main link label","name":"label","required":false,"type":{"name":"React.ReactNode"}},"leftSection":{"defaultValue":null,"description":"Section displayed on the left side of the label","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"noWrap":{"defaultValue":"`false`","description":"If set, label and description do not wrap to the next line","name":"noWrap","required":false,"type":{"name":"boolean"}},"onChange":{"defaultValue":null,"description":"Called when open state changes","name":"onChange","required":false,"type":{"name":"(opened: boolean) => void"}},"onClick":{"defaultValue":null,"description":"Called when the root element is clicked","name":"onClick","required":false,"type":{"name":"MouseEventHandler<HTMLElement>"}},"onKeyDown":{"defaultValue":null,"description":"Called on keydown of the root element","name":"onKeyDown","required":false,"type":{"name":"KeyboardEventHandler<HTMLElement>"}},"opened":{"defaultValue":null,"description":"Controlled nested items collapse state","name":"opened","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Section displayed on the right side of the label","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}}}},"Notification":{"props":{"children":{"defaultValue":null,"description":"Main notification message","name":"children","required":false,"type":{"name":"React.ReactNode"}},"closeButtonProps":{"defaultValue":null,"description":"Props passed down to the close button","name":"closeButtonProps","required":false,"type":{"name":"Record<string, any>"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Controls notification line or icon color, key of <code>theme.colors</code> or any valid CSS color","name":"color","required":false,"type":{"name":"MantineColor"}},"icon":{"defaultValue":null,"description":"Notification icon, replaces color line","name":"icon","required":false,"type":{"name":"React.ReactNode"}},"loaderProps":{"defaultValue":null,"description":"Props passed down to the <code>Loader</code> component","name":"loaderProps","required":false,"type":{"name":"LoaderProps"}},"loading":{"defaultValue":null,"description":"If set, the <code>Loader</code> component is displayed instead of the icon","name":"loading","required":false,"type":{"name":"boolean"}},"onClose":{"defaultValue":null,"description":"Called when the close button is clicked","name":"onClose","required":false,"type":{"name":"() => void"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"title":{"defaultValue":null,"description":"Notification title, displayed above the message body","name":"title","required":false,"type":{"name":"React.ReactNode"}},"withBorder":{"defaultValue":null,"description":"Adds border to the root element","name":"withBorder","required":false,"type":{"name":"boolean"}},"withCloseButton":{"defaultValue":"`true`","description":"If set, the close button is visible","name":"withCloseButton","required":false,"type":{"name":"boolean"}}}},"NumberFormatter":{"props":{"allowNegative":{"defaultValue":"`true`","description":"If set, negative values are allowed","name":"allowNegative","required":false,"type":{"name":"boolean"}},"decimalScale":{"defaultValue":"`Infinity`","description":"Limits the number of digits that are displayed after the decimal point","name":"decimalScale","required":false,"type":{"name":"number"}},"decimalSeparator":{"defaultValue":null,"description":"Character used as a decimal separator, <code>\'.\'</code> by default","name":"decimalSeparator","required":false,"type":{"name":"string"}},"fixedDecimalScale":{"defaultValue":"`false`","description":"If set, zeros are added after <code>decimalSeparator</code> to match given <code>decimalScale</code>.","name":"fixedDecimalScale","required":false,"type":{"name":"boolean"}},"prefix":{"defaultValue":null,"description":"Prefix added before the value","name":"prefix","required":false,"type":{"name":"string"}},"suffix":{"defaultValue":null,"description":"Suffix added after the value","name":"suffix","required":false,"type":{"name":"string"}},"thousandSeparator":{"defaultValue":"`\',\'`","description":"A character used to separate thousands","name":"thousandSeparator","required":false,"type":{"name":"string | boolean"}},"thousandsGroupStyle":{"defaultValue":null,"description":"Defines the thousand grouping style","name":"thousandsGroupStyle","required":false,"type":{"name":"\\"none\\" | \\"thousand\\" | \\"lakh\\" | \\"wan\\"","raw":"\\"none\\" | \\"thousand\\" | \\"lakh\\" | \\"wan\\" | undefined","value":[{"value":"undefined"},{"value":"\\"none\\""},{"value":"\\"thousand\\""},{"value":"\\"lakh\\""},{"value":"\\"wan\\""}]}},"value":{"defaultValue":null,"description":"Value to format","name":"value","required":false,"type":{"name":"string | number"}}}},"NumberInput":{"props":{"allowDecimal":{"defaultValue":"`true`","description":"If set, decimal values are allowed","name":"allowDecimal","required":false,"type":{"name":"boolean"}},"allowLeadingZeros":{"defaultValue":"`true`","description":"Determines whether leading zeros are allowed. If set to <code>false</code>, leading zeros are removed when the input value becomes a valid number.","name":"allowLeadingZeros","required":false,"type":{"name":"boolean"}},"allowNegative":{"defaultValue":"`true`","description":"If set, negative values are allowed","name":"allowNegative","required":false,"type":{"name":"boolean"}},"allowedDecimalSeparators":{"defaultValue":"`[\'.\']`","description":"Characters which when pressed result in a decimal separator","name":"allowedDecimalSeparators","required":false,"type":{"name":"string[]"}},"clampBehavior":{"defaultValue":null,"description":"Controls how value is clamped, <code>strict</code> – user is not allowed to enter values that are not in <code>[min, max]</code> range, <code>blur</code> – user is allowed to enter any values, but the value is clamped when the input loses focus (default behavior), <code>none</code> – lifts all restrictions, <code>[min, max]</code> range is applied only for controls and up/down keys","name":"clampBehavior","required":false,"type":{"name":"\\"none\\" | \\"blur\\" | \\"strict\\"","raw":"\\"none\\" | \\"blur\\" | \\"strict\\" | undefined","value":[{"value":"undefined"},{"value":"\\"none\\""},{"value":"\\"blur\\""},{"value":"\\"strict\\""}]}},"decimalScale":{"defaultValue":"`Infinity`","description":"Limits the number of digits that can be entered after the decimal point","name":"decimalScale","required":false,"type":{"name":"number"}},"decimalSeparator":{"defaultValue":"`\'.\'`","description":"Character used as a decimal separator","name":"decimalSeparator","required":false,"type":{"name":"string"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string | number"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"fixedDecimalScale":{"defaultValue":"`false`","description":"If set, 0s are added after <code>decimalSeparator</code> to match given <code>decimalScale</code>.","name":"fixedDecimalScale","required":false,"type":{"name":"boolean"}},"handlersRef":{"defaultValue":null,"description":"Increment/decrement handlers","name":"handlersRef","required":false,"type":{"name":"ForwardedRef<NumberInputHandlers> | undefined"}},"hideControls":{"defaultValue":"`false`","description":"If set, the up/down controls are hidden","name":"hideControls","required":false,"type":{"name":"boolean"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"isAllowed":{"defaultValue":null,"description":"A function to validate the input value. If this function returns <code>false</code>, the <code>onChange</code> will not be called and the input value will not change.","name":"isAllowed","required":false,"type":{"name":"(values: NumberFormatValues) => boolean"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"max":{"defaultValue":null,"description":"Maximum possible value","name":"max","required":false,"type":{"name":"number"}},"min":{"defaultValue":null,"description":"Minimum possible value","name":"min","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: string | number) => void"}},"onValueChange":{"defaultValue":null,"description":"Called when value changes with <code>react-number-format</code> payload","name":"onValueChange","required":false,"type":{"name":"OnValueChange"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"prefix":{"defaultValue":null,"description":"Prefix added before the input value","name":"prefix","required":false,"type":{"name":"string"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"startValue":{"defaultValue":"`0`","description":"Value set to the input when increment/decrement buttons are clicked or up/down arrows pressed if the input is empty","name":"startValue","required":false,"type":{"name":"number"}},"step":{"defaultValue":"`1`","description":"Number by which value will be incremented/decremented with up/down controls and keyboard arrows","name":"step","required":false,"type":{"name":"number"}},"stepHoldDelay":{"defaultValue":null,"description":"Initial delay in milliseconds before stepping the value.","name":"stepHoldDelay","required":false,"type":{"name":"number"}},"stepHoldInterval":{"defaultValue":null,"description":"Delay before stepping the value. Can be a number of milliseconds or a function that receives the current step count and returns the delay in milliseconds.","name":"stepHoldInterval","required":false,"type":{"name":"number | ((stepCount: number) => number)"}},"suffix":{"defaultValue":null,"description":"Suffix added after the input value","name":"suffix","required":false,"type":{"name":"string"}},"thousandSeparator":{"defaultValue":null,"description":"A character used to separate thousands","name":"thousandSeparator","required":false,"type":{"name":"string | boolean"}},"thousandsGroupStyle":{"defaultValue":null,"description":"Defines the thousand grouping style.","name":"thousandsGroupStyle","required":false,"type":{"name":"\\"none\\" | \\"thousand\\" | \\"lakh\\" | \\"wan\\"","raw":"\\"none\\" | \\"thousand\\" | \\"lakh\\" | \\"wan\\" | undefined","value":[{"value":"undefined"},{"value":"\\"none\\""},{"value":"\\"thousand\\""},{"value":"\\"lakh\\""},{"value":"\\"wan\\""}]}},"trimLeadingZeroesOnBlur":{"defaultValue":"`true`","description":"If set, leading zeros are removed on blur. For example, <code>00100</code> -> <code>100</code>","name":"trimLeadingZeroesOnBlur","required":false,"type":{"name":"boolean"}},"type":{"defaultValue":"`\'text\'`","description":"Controls input <code>type</code> attribute","name":"type","required":false,"type":{"name":"\\"text\\" | \\"tel\\" | \\"password\\"","raw":"\\"text\\" | \\"tel\\" | \\"password\\" | undefined","value":[{"value":"undefined"},{"value":"\\"text\\""},{"value":"\\"tel\\""},{"value":"\\"password\\""}]}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string | number"}},"valueIsNumericString":{"defaultValue":"`false`","description":"If value is passed as string representation of numbers (unformatted) and number is used in any format props like in prefix or suffix in numeric format and format prop in pattern format then this should be passed as <code>true</code>.","name":"valueIsNumericString","required":false,"type":{"name":"boolean"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withKeyboardEvents":{"defaultValue":"`true`","description":"If set, up/down keyboard events increment/decrement value","name":"withKeyboardEvents","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"Overlay":{"props":{"backgroundOpacity":{"defaultValue":"`0.6`","description":"Overlay <code>background-color</code> opacity 0–1, ignored when <code>gradient</code> prop is set","name":"backgroundOpacity","required":false,"type":{"name":"number"}},"blur":{"defaultValue":"`0`","description":"Overlay background blur","name":"blur","required":false,"type":{"name":"string | number"}},"center":{"defaultValue":"`false`","description":"Centers content inside the overlay","name":"center","required":false,"type":{"name":"boolean"}},"children":{"defaultValue":null,"description":"Content inside overlay","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"defaultValue":"`#000`","description":"Overlay <code>background-color</code>","name":"color","required":false,"type":{"name":"BackgroundColor"}},"fixed":{"defaultValue":"`false`","description":"Changes position to <code>fixed</code>","name":"fixed","required":false,"type":{"name":"boolean"}},"gradient":{"defaultValue":null,"description":"Changes overlay to gradient. If set, <code>color</code> prop is ignored.","name":"gradient","required":false,"type":{"name":"string"}},"radius":{"defaultValue":"`0`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"zIndex":{"defaultValue":"`200`","description":"Overlay z-index","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Pagination":{"props":{"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"boundaries":{"defaultValue":"`1`","description":"Number of elements visible on the left/right edges","name":"boundaries","required":false,"type":{"name":"number"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code>, active item color","name":"color","required":false,"type":{"name":"MantineColor"}},"defaultValue":{"defaultValue":null,"description":"Active page for uncontrolled component, must be an integer in [0, total] interval","name":"defaultValue","required":false,"type":{"name":"number"}},"disabled":{"defaultValue":null,"description":"Disables all controls, applies disabled styles","name":"disabled","required":false,"type":{"name":"boolean"}},"dotsIcon":{"defaultValue":null,"description":"Dots icon component","name":"dotsIcon","required":false,"type":{"name":"PaginationIcon"}},"firstIcon":{"defaultValue":null,"description":"First control icon component","name":"firstIcon","required":false,"type":{"name":"PaginationIcon"}},"gap":{"defaultValue":"`8`","description":"Key of <code>theme.spacing</code>, gap between controls","name":"gap","required":false,"type":{"name":"MantineSpacing"}},"getControlProps":{"defaultValue":null,"description":"Props passed down to next/previous/first/last controls","name":"getControlProps","required":false,"type":{"name":"(control: \\"next\\" | \\"previous\\" | \\"first\\" | \\"last\\") => Record<string, any>"}},"getItemProps":{"defaultValue":null,"description":"Additional props passed down to controls","name":"getItemProps","required":false,"type":{"name":"(page: number) => Record<string, any>"}},"hideWithOnePage":{"defaultValue":"`false`","description":"If set, the pagination is hidden when only one page is available (<code>total={1}</code>)","name":"hideWithOnePage","required":false,"type":{"name":"boolean"}},"lastIcon":{"defaultValue":null,"description":"Last control icon component","name":"lastIcon","required":false,"type":{"name":"PaginationIcon"}},"nextIcon":{"defaultValue":null,"description":"Next control icon component","name":"nextIcon","required":false,"type":{"name":"PaginationIcon"}},"onChange":{"defaultValue":null,"description":"Called when page changes","name":"onChange","required":false,"type":{"name":"(value: number) => void"}},"onFirstPage":{"defaultValue":null,"description":"Called when first page control is clicked","name":"onFirstPage","required":false,"type":{"name":"() => void"}},"onLastPage":{"defaultValue":null,"description":"Called when last page control is clicked","name":"onLastPage","required":false,"type":{"name":"() => void"}},"onNextPage":{"defaultValue":null,"description":"Called when next page control is clicked","name":"onNextPage","required":false,"type":{"name":"() => void"}},"onPreviousPage":{"defaultValue":null,"description":"Called when previous page control is clicked","name":"onPreviousPage","required":false,"type":{"name":"() => void"}},"previousIcon":{"defaultValue":null,"description":"Previous control icon component","name":"previousIcon","required":false,"type":{"name":"PaginationIcon"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"siblings":{"defaultValue":"`1`","description":"Number of siblings displayed on the left/right side of the selected page","name":"siblings","required":false,"type":{"name":"number"}},"size":{"defaultValue":"`\'md\'`","description":"<code>height</code> and <code>min-width</code> of controls","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"total":{"defaultValue":null,"description":"Total number of pages, must be an integer","name":"total","required":true,"type":{"name":"number"}},"value":{"defaultValue":null,"description":"Active page for controlled component, must be an integer in [0, total] interval","name":"value","required":false,"type":{"name":"number"}},"withControls":{"defaultValue":"`true`","description":"If set, next/previous controls are displayed","name":"withControls","required":false,"type":{"name":"boolean"}},"withEdges":{"defaultValue":"`false`","description":"If set, first/last controls are displayed","name":"withEdges","required":false,"type":{"name":"boolean"}},"withPages":{"defaultValue":"`true`","description":"If set to <code>false</code>, pages controls are hidden","name":"withPages","required":false,"type":{"name":"boolean"}}}},"Paper":{"props":{"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"shadow":{"defaultValue":null,"description":"Key of <code>theme.shadows</code> or any valid CSS value to set <code>box-shadow</code>","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"withBorder":{"defaultValue":null,"description":"Adds border to the root element","name":"withBorder","required":false,"type":{"name":"boolean"}}}},"PasswordInput":{"props":{"defaultVisible":{"defaultValue":null,"description":"If set, the input value is visible by default","name":"defaultVisible","required":false,"type":{"name":"boolean"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"onVisibilityChange":{"defaultValue":null,"description":"Called when visibility changes","name":"onVisibilityChange","required":false,"type":{"name":"(visible: boolean) => void"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"visibilityToggleButtonProps":{"defaultValue":null,"description":"Props passed down to the visibility toggle button","name":"visibilityToggleButtonProps","required":false,"type":{"name":"Record<string, any>"}},"visibilityToggleIcon":{"defaultValue":null,"description":"A component to replace the visibility toggle icon","name":"visibilityToggleIcon","required":false,"type":{"name":"FC<{ reveal: boolean; }>"}},"visible":{"defaultValue":null,"description":"If set, the input value is visible visible","name":"visible","required":false,"type":{"name":"boolean"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"Pill":{"props":{"disabled":{"defaultValue":null,"description":"Adds disabled attribute, applies disabled styles","name":"disabled","required":false,"type":{"name":"boolean"}},"onRemove":{"defaultValue":null,"description":"Called when the remove button is clicked","name":"onRemove","required":false,"type":{"name":"() => void"}},"radius":{"defaultValue":"`\'xl\'`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius. Numbers are converted to rem.","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"removeButtonProps":{"defaultValue":null,"description":"Props passed down to the remove button","name":"removeButtonProps","required":false,"type":{"name":"CloseButtonProps & Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \\"ref\\">"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls pill <code>font-size</code> and <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"withRemoveButton":{"defaultValue":"`false`","description":"Controls visibility of the remove button","name":"withRemoveButton","required":false,"type":{"name":"boolean"}}}},"PillsInput":{"props":{"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"PinInput":{"props":{"ariaLabel":{"defaultValue":null,"description":"<code>aria-label</code> attribute","name":"ariaLabel","required":false,"type":{"name":"string"}},"autoFocus":{"defaultValue":"`false`","description":"If set, the first input is focused when component is mounted","name":"autoFocus","required":false,"type":{"name":"boolean"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string"}},"disabled":{"defaultValue":null,"description":"Adds disabled attribute to all inputs","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Sets <code>aria-invalid</code> attribute and applies error styles to all inputs","name":"error","required":false,"type":{"name":"boolean"}},"form":{"defaultValue":null,"description":"Hidden input <code>form</code> attribute","name":"form","required":false,"type":{"name":"string"}},"gap":{"defaultValue":"`\'md\'`","description":"Key of <code>theme.spacing</code> or any valid CSS value to set <code>gap</code> between inputs, numbers are converted to rem","name":"gap","required":false,"type":{"name":"MantineSpacing"}},"getInputProps":{"defaultValue":null,"description":"Props added to the input element depending on its index","name":"getInputProps","required":false,"type":{"name":"(index: number) => InputProps & ElementProps<\\"input\\", \\"size\\">"}},"hiddenInputProps":{"defaultValue":null,"description":"Props passed down to the hidden input","name":"hiddenInputProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"input\\">"}},"id":{"defaultValue":null,"description":"Base id used to generate unique ids for inputs","name":"id","required":false,"type":{"name":"string"}},"inputMode":{"defaultValue":null,"description":"<code>inputmode</code> attribute, inferred from the <code>type</code> prop if not specified","name":"inputMode","required":false,"type":{"name":"\\"search\\" | \\"text\\" | \\"none\\" | \\"tel\\" | \\"url\\" | \\"email\\" | \\"numeric\\" | \\"decimal\\"","raw":"\\"search\\" | \\"text\\" | \\"none\\" | \\"tel\\" | \\"url\\" | \\"email\\" | \\"numeric\\" | \\"decimal\\" | undefined","value":[{"value":"undefined"},{"value":"\\"search\\""},{"value":"\\"text\\""},{"value":"\\"none\\""},{"value":"\\"tel\\""},{"value":"\\"url\\""},{"value":"\\"email\\""},{"value":"\\"numeric\\""},{"value":"\\"decimal\\""}]}},"inputType":{"defaultValue":null,"description":"Inputs <code>type</code> attribute, inferred from the <code>type</code> prop if not specified","name":"inputType","required":false,"type":{"name":"HTMLInputTypeAttribute"}},"length":{"defaultValue":"`4`","description":"Number of inputs","name":"length","required":false,"type":{"name":"number"}},"manageFocus":{"defaultValue":"`true`","description":"Determines whether focus should be moved automatically to the next input once filled","name":"manageFocus","required":false,"type":{"name":"boolean"}},"mask":{"defaultValue":"`false`","description":"Changes input type to <code>\\"password\\"</code>","name":"mask","required":false,"type":{"name":"boolean"}},"name":{"defaultValue":null,"description":"Hidden input <code>name</code> attribute","name":"name","required":false,"type":{"name":"string"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: string) => void"}},"onComplete":{"defaultValue":null,"description":"Called when all inputs have value","name":"onComplete","required":false,"type":{"name":"(value: string) => void"}},"oneTimeCode":{"defaultValue":"`true`","description":"Determines whether <code>autocomplete=\\"one-time-code\\"</code> attribute should be set on all inputs","name":"oneTimeCode","required":false,"type":{"name":"boolean"}},"placeholder":{"defaultValue":"`\'○\'`","description":"Inputs placeholder","name":"placeholder","required":false,"type":{"name":"string"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"defaultValue":null,"description":"If set, the user cannot edit the value","name":"readOnly","required":false,"type":{"name":"boolean"}},"rootRef":{"defaultValue":null,"description":"Assigns ref of the root element","name":"rootRef","required":false,"type":{"name":"ForwardedRef<HTMLDivElement>"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls inputs <code>width</code> and <code>height</code>","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"type":{"defaultValue":"`\'alphanumeric\'`","description":"Determines which values can be entered","name":"type","required":false,"type":{"name":"\\"number\\" | RegExp | \\"alphanumeric\\""}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string"}}}},"Popover":{"props":{"arrowOffset":{"defaultValue":"`5`","description":"Arrow offset in px","name":"arrowOffset","required":false,"type":{"name":"number"}},"arrowPosition":{"defaultValue":null,"description":"Arrow position","name":"arrowPosition","required":false,"type":{"name":"ArrowPosition","raw":"ArrowPosition | undefined","value":[{"value":"undefined"},{"value":"\\"center\\""},{"value":"\\"side\\""}]}},"arrowRadius":{"defaultValue":"`0`","description":"Arrow <code>border-radius</code> in px","name":"arrowRadius","required":false,"type":{"name":"number"}},"arrowSize":{"defaultValue":"`7`","description":"Arrow size in px","name":"arrowSize","required":false,"type":{"name":"number"}},"children":{"defaultValue":null,"description":"<code>Popover.Target</code> and <code>Popover.Dropdown</code> components","name":"children","required":false,"type":{"name":"React.ReactNode"}},"clickOutsideEvents":{"defaultValue":null,"description":"Events that trigger outside clicks","name":"clickOutsideEvents","required":false,"type":{"name":"string[]"}},"closeOnClickOutside":{"defaultValue":"`true`","description":"Determines whether dropdown should be closed on outside clicks","name":"closeOnClickOutside","required":false,"type":{"name":"boolean"}},"closeOnEscape":{"defaultValue":"`true`","description":"Determines whether dropdown should be closed when <code>Escape</code> key is pressed","name":"closeOnEscape","required":false,"type":{"name":"boolean"}},"defaultOpened":{"defaultValue":null,"description":"Initial opened state for uncontrolled component","name":"defaultOpened","required":false,"type":{"name":"boolean"}},"disabled":{"defaultValue":null,"description":"If set, popover dropdown will not be rendered","name":"disabled","required":false,"type":{"name":"boolean"}},"floatingStrategy":{"defaultValue":"`\'absolute\'`","description":"Changes floating ui [position strategy](https://floating-ui.com/docs/usefloating#strategy)","name":"floatingStrategy","required":false,"type":{"name":"FloatingStrategy","raw":"FloatingStrategy | undefined","value":[{"value":"undefined"},{"value":"\\"fixed\\""},{"value":"\\"absolute\\""}]}},"hideDetached":{"defaultValue":"`true`","description":"If set, the dropdown is hidden when the element is hidden with styles or not visible on the screen","name":"hideDetached","required":false,"type":{"name":"boolean"}},"id":{"defaultValue":null,"description":"Id base to create accessibility connections","name":"id","required":false,"type":{"name":"string"}},"keepMounted":{"defaultValue":null,"description":"If set, the dropdown is not unmounted from the DOM when hidden. <code>display: none</code> styles are added instead.","name":"keepMounted","required":false,"type":{"name":"boolean"}},"middlewares":{"defaultValue":"`{ flip: true, shift: true, inline: false }`","description":"Floating ui middlewares to configure position handling","name":"middlewares","required":false,"type":{"name":"PopoverMiddlewares"}},"offset":{"defaultValue":"`8`","description":"Offset of the dropdown element","name":"offset","required":false,"type":{"name":"number | FloatingAxesOffsets"}},"onChange":{"defaultValue":null,"description":"Called with current state when dropdown opens or closes","name":"onChange","required":false,"type":{"name":"(opened: boolean) => void"}},"onClose":{"defaultValue":null,"description":"Called when dropdown closes","name":"onClose","required":false,"type":{"name":"() => void"}},"onDismiss":{"defaultValue":null,"description":"Called when the popover is dismissed by clicking outside or by pressing escape","name":"onDismiss","required":false,"type":{"name":"() => void"}},"onEnterTransitionEnd":{"defaultValue":null,"description":"Called when enter transition ends","name":"onEnterTransitionEnd","required":false,"type":{"name":"() => void"}},"onExitTransitionEnd":{"defaultValue":null,"description":"Called when exit transition ends","name":"onExitTransitionEnd","required":false,"type":{"name":"() => void"}},"onOpen":{"defaultValue":null,"description":"Called when dropdown opens","name":"onOpen","required":false,"type":{"name":"() => void"}},"onPositionChange":{"defaultValue":null,"description":"Called when dropdown position changes","name":"onPositionChange","required":false,"type":{"name":"(position: FloatingPosition) => void"}},"opened":{"defaultValue":null,"description":"Controlled dropdown opened state","name":"opened","required":false,"type":{"name":"boolean"}},"overlayProps":{"defaultValue":null,"description":"Props passed down to <code>Overlay</code> component","name":"overlayProps","required":false,"type":{"name":"OverlayProps & ElementProps<\\"div\\">"}},"portalProps":{"defaultValue":null,"description":"Props to pass down to the <code>Portal</code> when <code>withinPortal</code> is true","name":"portalProps","required":false,"type":{"name":"BasePortalProps"}},"position":{"defaultValue":"`\'bottom\'`","description":"Dropdown position relative to the target element","name":"position","required":false,"type":{"name":"FloatingPosition","raw":"FloatingPosition | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""},{"value":"\\"bottom\\""},{"value":"\\"top\\""},{"value":"\\"left-end\\""},{"value":"\\"left-start\\""},{"value":"\\"right-end\\""},{"value":"\\"right-start\\""},{"value":"\\"bottom-end\\""},{"value":"\\"bottom-start\\""},{"value":"\\"top-end\\""},{"value":"\\"top-start\\""}]}},"positionDependencies":{"defaultValue":null,"description":"@deprecated : Do not use, will be removed in 9.0","name":"positionDependencies","required":false,"type":{"name":"any[]"}},"preventPositionChangeWhenVisible":{"defaultValue":null,"description":"Prevents popover from flipping/shifting when it the dropdown is visible","name":"preventPositionChangeWhenVisible","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"returnFocus":{"defaultValue":"`false`","description":"Determines whether focus should be automatically returned to control when dropdown closes","name":"returnFocus","required":false,"type":{"name":"boolean"}},"shadow":{"defaultValue":null,"description":"Key of <code>theme.shadows</code> or any other valid CSS <code>box-shadow</code> value","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"transitionProps":{"defaultValue":"`{ duration: 150, transition: \'fade\' }`","description":"Props passed down to the <code>Transition</code> component. Use to configure duration and animation type.","name":"transitionProps","required":false,"type":{"name":"TransitionProps"}},"trapFocus":{"defaultValue":"`false`","description":"Determines whether focus should be trapped within dropdown","name":"trapFocus","required":false,"type":{"name":"boolean"}},"width":{"defaultValue":"`\'max-content\'`","description":"Dropdown width, or <code>\'target\'</code> to make dropdown width the same as target element","name":"width","required":false,"type":{"name":"PopoverWidth"}},"withArrow":{"defaultValue":"`false`","description":"Determines whether component should have an arrow","name":"withArrow","required":false,"type":{"name":"boolean"}},"withOverlay":{"defaultValue":"`false`","description":"Determines whether the overlay should be displayed when the dropdown is opened","name":"withOverlay","required":false,"type":{"name":"boolean"}},"withRoles":{"defaultValue":"`true`","description":"Determines whether dropdown and target elements should have accessible roles","name":"withRoles","required":false,"type":{"name":"boolean"}},"withinPortal":{"defaultValue":"`true`","description":"Determines whether dropdown should be rendered within the <code>Portal</code>","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":"`300`","description":"Dropdown <code>z-index</code>","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Popover.Target":{"props":{"children":{"defaultValue":null,"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"popupType":{"defaultValue":"`\'dialog\'`","description":"Popup accessible type","name":"popupType","required":false,"type":{"name":"string"}},"refProp":{"defaultValue":null,"description":"Key of the prop that should be used to access element ref","name":"refProp","required":false,"type":{"name":"string"}}}},"Popover.Dropdown":{"description":"","props":{}},"Portal":{"props":{"children":{"defaultValue":null,"description":"Portal children, for example, custom modal or popover","name":"children","required":true,"type":{"name":"React.ReactNode"}},"reuseTargetNode":{"defaultValue":"`true`","description":"If set, all portals are rendered in the same DOM node","name":"reuseTargetNode","required":false,"type":{"name":"boolean"}},"target":{"defaultValue":null,"description":"Element inside which portal should be created, by default a new div element is created and appended to the <code>document.body</code>","name":"target","required":false,"type":{"name":"string | HTMLElement"}}}},"Progress":{"props":{"animated":{"defaultValue":"`false`","description":"If set, the sections stripes are animated, <code>striped</code> prop is ignored","name":"animated","required":false,"type":{"name":"boolean"}},"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS value","name":"color","required":false,"type":{"name":"MantineColor"}},"orientation":{"defaultValue":"`\'horizontal\'`","description":"Controls orientation","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"defaultValue":"`\'md\'`","description":"Controls track height","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"striped":{"defaultValue":"`false`","description":"If set, the section has stripes","name":"striped","required":false,"type":{"name":"boolean"}},"transitionDuration":{"defaultValue":"`100`","description":"Controls sections width transition duration, value is specified in ms","name":"transitionDuration","required":false,"type":{"name":"number"}},"value":{"defaultValue":null,"description":"Value of the progress","name":"value","required":true,"type":{"name":"number"}}}},"Radio":{"props":{"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color to set input color in checked state","name":"color","required":false,"type":{"name":"MantineColor"}},"description":{"defaultValue":null,"description":"Description displayed below the label","name":"description","required":false,"type":{"name":"React.ReactNode"}},"error":{"defaultValue":null,"description":"Error displayed below the label","name":"error","required":false,"type":{"name":"React.ReactNode"}},"icon":{"defaultValue":null,"description":"A component that replaces default check icon","name":"icon","required":false,"type":{"name":"FC<RadioIconProps>"}},"iconColor":{"defaultValue":null,"description":"Key of <code>theme.colors</code> or any valid CSS color to set icon color, by default value depends on <code>theme.autoContrast</code>","name":"iconColor","required":false,"type":{"name":"MantineColor"}},"label":{"defaultValue":null,"description":"Content of the <code>label</code> associated with the radio","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelPosition":{"defaultValue":"`\'right\'`","description":"Position of the label relative to the input","name":"labelPosition","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"radius":{"defaultValue":"`\'xl\'`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius,</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"rootRef":{"defaultValue":null,"description":"Assigns ref of the root element","name":"rootRef","required":false,"type":{"name":"ForwardedRef<HTMLDivElement>"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls size of the component","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \\"ref\\"> & DataAttributes"}}}},"Rating":{"props":{"color":{"defaultValue":"`\'yellow\'`","description":"Key of <code>theme.colors</code> or any CSS color value","name":"color","required":false,"type":{"name":"MantineColor"}},"count":{"defaultValue":"`5`","description":"Number of controls","name":"count","required":false,"type":{"name":"number"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"number"}},"emptySymbol":{"defaultValue":null,"description":"Icon displayed when the symbol is empty","name":"emptySymbol","required":false,"type":{"name":"ReactNode | ((value: number) => ReactNode)"}},"fractions":{"defaultValue":"`1`","description":"Number of fractions each item can be divided into","name":"fractions","required":false,"type":{"name":"number"}},"fullSymbol":{"defaultValue":null,"description":"Icon displayed when the symbol is full","name":"fullSymbol","required":false,"type":{"name":"ReactNode | ((value: number) => ReactNode)"}},"getSymbolLabel":{"defaultValue":null,"description":"A function to assign <code>aria-label</code> of the the control at index given in the argument. If not specified, control index is used as <code>aria-label</code>.","name":"getSymbolLabel","required":false,"type":{"name":"(index: number) => string"}},"highlightSelectedOnly":{"defaultValue":"`false`","description":"If set, only the selected symbol changes to full symbol when selected","name":"highlightSelectedOnly","required":false,"type":{"name":"boolean"}},"name":{"defaultValue":null,"description":"<code>name</code> attribute passed down to all inputs. By default, <code>name</code> is generated randomly.","name":"name","required":false,"type":{"name":"string"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: number) => void"}},"onHover":{"defaultValue":null,"description":"Called when one of the controls is hovered","name":"onHover","required":false,"type":{"name":"(value: number) => void"}},"readOnly":{"defaultValue":"`false`","description":"If set, the user cannot interact with the component","name":"readOnly","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls component size","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"number"}}}},"RingProgress":{"props":{"label":{"defaultValue":null,"description":"Label displayed in the center of the ring","name":"label","required":false,"type":{"name":"React.ReactNode"}},"rootColor":{"defaultValue":null,"description":"Color of the root section, key of theme.colors or CSS color value","name":"rootColor","required":false,"type":{"name":"MantineColor"}},"roundCaps":{"defaultValue":null,"description":"Sets whether the edges of the progress circle are rounded","name":"roundCaps","required":false,"type":{"name":"boolean"}},"sections":{"defaultValue":null,"description":"Ring sections","name":"sections","required":true,"type":{"name":"RingProgressSection[]"}},"size":{"defaultValue":"120","description":"Width and height of the progress ring","name":"size","required":false,"type":{"name":"number"}},"thickness":{"defaultValue":"12","description":"Ring thickness","name":"thickness","required":false,"type":{"name":"number"}},"transitionDuration":{"defaultValue":"`0`","description":"Transition duration of filled section styles changes in ms","name":"transitionDuration","required":false,"type":{"name":"number"}}}},"ScrollArea":{"props":{"offsetScrollbars":{"defaultValue":"`false`","description":"Determines whether scrollbars should be offset with padding on given axis","name":"offsetScrollbars","required":false,"type":{"name":"boolean | \\"x\\" | \\"y\\" | \\"present\\""}},"onBottomReached":{"defaultValue":null,"description":"Called when scrollarea is scrolled all the way to the bottom","name":"onBottomReached","required":false,"type":{"name":"() => void"}},"onScrollPositionChange":{"defaultValue":null,"description":"Called with current position (<code>x</code> and <code>y</code> coordinates) when viewport is scrolled","name":"onScrollPositionChange","required":false,"type":{"name":"(position: { x: number; y: number; }) => void"}},"onTopReached":{"defaultValue":null,"description":"Called when scrollarea is scrolled all the way to the top","name":"onTopReached","required":false,"type":{"name":"() => void"}},"overscrollBehavior":{"defaultValue":null,"description":"Defines <code>overscroll-behavior</code> of the viewport","name":"overscrollBehavior","required":false,"type":{"name":"OverscrollBehavior"}},"scrollHideDelay":{"defaultValue":"`1000`","description":"Scroll hide delay in ms, applicable only when type is set to <code>hover</code> or <code>scroll</code>","name":"scrollHideDelay","required":false,"type":{"name":"number"}},"scrollbarSize":{"defaultValue":null,"description":"Scrollbar size, any valid CSS value for width/height, numbers are converted to rem, default value is 0.75rem","name":"scrollbarSize","required":false,"type":{"name":"string | number"}},"scrollbars":{"defaultValue":"`\'xy\'`","description":"Axis at which scrollbars must be rendered","name":"scrollbars","required":false,"type":{"name":"false | \\"x\\" | \\"y\\" | \\"xy\\""}},"type":{"defaultValue":null,"description":"Defines scrollbars behavior, <code>hover</code> by default\\n- <code>hover</code> – scrollbars are visible when mouse is over the scroll area\\n- <code>scroll</code> – scrollbars are visible when the scroll area is scrolled\\n- <code>always</code> – scrollbars are always visible\\n- <code>never</code> – scrollbars are always hidden\\n- <code>auto</code> – similar to <code>overflow: auto</code> – scrollbars are always visible when the content is overflowing","name":"type","required":false,"type":{"name":"\\"auto\\" | \\"scroll\\" | \\"always\\" | \\"hover\\" | \\"never\\"","raw":"\\"auto\\" | \\"scroll\\" | \\"always\\" | \\"hover\\" | \\"never\\" | undefined","value":[{"value":"undefined"},{"value":"\\"auto\\""},{"value":"\\"scroll\\""},{"value":"\\"always\\""},{"value":"\\"hover\\""},{"value":"\\"never\\""}]}},"viewportProps":{"defaultValue":null,"description":"Props passed down to the viewport element","name":"viewportProps","required":false,"type":{"name":"DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>"}},"viewportRef":{"defaultValue":null,"description":"Assigns viewport element (scrollable container) ref","name":"viewportRef","required":false,"type":{"name":"ForwardedRef<HTMLDivElement>"}}}},"SegmentedControl":{"props":{"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"color":{"defaultValue":null,"description":"Key of <code>theme.colors</code> or any valid CSS color, changes color of indicator, by default color is based on current color scheme","name":"color","required":false,"type":{"name":"MantineColor"}},"data":{"defaultValue":null,"description":"Data based on which controls are rendered","name":"data","required":true,"type":{"name":"(string | SegmentedControlItem)[]"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string"}},"disabled":{"defaultValue":null,"description":"Determines whether the component is disabled","name":"disabled","required":false,"type":{"name":"boolean"}},"fullWidth":{"defaultValue":"`false`","description":"Determines whether the component should take 100% width of its parent","name":"fullWidth","required":false,"type":{"name":"boolean"}},"name":{"defaultValue":null,"description":"Name of the radio group, by default random name is generated","name":"name","required":false,"type":{"name":"string"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: string) => void"}},"orientation":{"defaultValue":"`\'horizontal\'`","description":"Component orientation","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"defaultValue":null,"description":"If set to <code>false</code>, prevents changing the value","name":"readOnly","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls <code>font-size</code>, <code>padding</code> and <code>height</code> properties","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"transitionDuration":{"defaultValue":"`200`","description":"Indicator <code>transition-duration</code> in ms, set <code>0</code> to turn off transitions","name":"transitionDuration","required":false,"type":{"name":"number"}},"transitionTimingFunction":{"defaultValue":"`ease`","description":"Indicator <code>transition-timing-function</code> property","name":"transitionTimingFunction","required":false,"type":{"name":"string"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string"}},"withItemsBorders":{"defaultValue":"`true`","description":"Determines whether there should be borders between items","name":"withItemsBorders","required":false,"type":{"name":"boolean"}}}},"Select":{"props":{"allowDeselect":{"defaultValue":"`true`","description":"If set, it becomes possible to deselect value by clicking on the selected option","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"autoSelectOnBlur":{"defaultValue":"`false`","description":"If set, the highlighted option is selected when the input loses focus","name":"autoSelectOnBlur","required":false,"type":{"name":"boolean"}},"checkIconPosition":{"defaultValue":"`\'left\'`","description":"Position of the check icon relative to the option label","name":"checkIconPosition","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"chevronColor":{"defaultValue":null,"description":"Controls color of the default chevron, by default depends on the color scheme","name":"chevronColor","required":false,"type":{"name":"MantineColor"}},"clearButtonProps":{"defaultValue":null,"description":"Props passed down to the clear button","name":"clearButtonProps","required":false,"type":{"name":"InputClearButtonProps"}},"clearable":{"defaultValue":"`false`","description":"If set, the clear button is displayed in the right section when the component has value","name":"clearable","required":false,"type":{"name":"boolean"}},"comboboxProps":{"defaultValue":null,"description":"Props passed down to <code>Combobox</code> component","name":"comboboxProps","required":false,"type":{"name":"ComboboxProps"}},"data":{"defaultValue":null,"description":"Data used to generate options. Values must be unique, otherwise an error will be thrown and component will not render.","name":"data","required":false,"type":{"name":"ComboboxData"}},"defaultDropdownOpened":{"defaultValue":null,"description":"Uncontrolled dropdown initial opened state","name":"defaultDropdownOpened","required":false,"type":{"name":"boolean"}},"defaultSearchValue":{"defaultValue":null,"description":"Default search value","name":"defaultSearchValue","required":false,"type":{"name":"string"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string | null"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownOpened":{"defaultValue":null,"description":"Controlled dropdown opened state","name":"dropdownOpened","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"filter":{"defaultValue":null,"description":"Function based on which items are filtered and sorted","name":"filter","required":false,"type":{"name":"OptionsFilter"}},"hiddenInputProps":{"defaultValue":null,"description":"Props passed down to the hidden input","name":"hiddenInputProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"input\\">"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"limit":{"defaultValue":null,"description":"Maximum number of options displayed at a time, <code>Infinity</code> by default","name":"limit","required":false,"type":{"name":"number"}},"maxDropdownHeight":{"defaultValue":null,"description":"<code>max-height</code> of the dropdown, only applicable when <code>withScrollArea</code> prop is <code>true</code>, <code>250</code> by default","name":"maxDropdownHeight","required":false,"type":{"name":"string | number"}},"nothingFoundMessage":{"defaultValue":null,"description":"Message displayed when no option matches the current search query when the <code>searchable</code> prop is set or there is no data","name":"nothingFoundMessage","required":false,"type":{"name":"React.ReactNode"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: string | null, option: ComboboxItem) => void"}},"onClear":{"defaultValue":null,"description":"Called when the clear button is clicked","name":"onClear","required":false,"type":{"name":"() => void"}},"onDropdownClose":{"defaultValue":null,"description":"Called when dropdown closes","name":"onDropdownClose","required":false,"type":{"name":"() => void"}},"onDropdownOpen":{"defaultValue":null,"description":"Called when dropdown opens","name":"onDropdownOpen","required":false,"type":{"name":"() => void"}},"onOptionSubmit":{"defaultValue":null,"description":"Called when option is submitted from dropdown with mouse click or <code>Enter</code> key","name":"onOptionSubmit","required":false,"type":{"name":"(value: string) => void"}},"onSearchChange":{"defaultValue":null,"description":"Called when search changes","name":"onSearchChange","required":false,"type":{"name":"(value: string) => void"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"renderOption":{"defaultValue":null,"description":"A function to render content of the option, replaces the default content of the option","name":"renderOption","required":false,"type":{"name":"(item: ComboboxLikeRenderOptionInput<ComboboxItem>) => ReactNode"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"scrollAreaProps":{"defaultValue":null,"description":"Props passed down to the underlying <code>ScrollArea</code> component in the dropdown","name":"scrollAreaProps","required":false,"type":{"name":"ScrollAreaProps"}},"searchValue":{"defaultValue":null,"description":"Controlled search value","name":"searchValue","required":false,"type":{"name":"string"}},"searchable":{"defaultValue":"`false`","description":"Determines whether the select should be searchable","name":"searchable","required":false,"type":{"name":"boolean"}},"selectFirstOptionOnChange":{"defaultValue":null,"description":"If set, the first option is selected when value changes, <code>false</code> by default","name":"selectFirstOptionOnChange","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string | null"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withCheckIcon":{"defaultValue":"`true`","description":"If set, the check icon is displayed near the selected option label","name":"withCheckIcon","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withScrollArea":{"defaultValue":null,"description":"Determines whether the options should be wrapped with <code>ScrollArea.AutoSize</code>, <code>true</code> by default","name":"withScrollArea","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"SemiCircleProgress":{"props":{"emptySegmentColor":{"defaultValue":null,"description":"Key of <code>theme.colors</code> or any valid CSS color value, by default the value is determined based on the color scheme value","name":"emptySegmentColor","required":false,"type":{"name":"MantineColor"}},"fillDirection":{"defaultValue":"`\'left-to-right\'`","description":"Direction from which the circle is filled","name":"fillDirection","required":false,"type":{"name":"\\"right-to-left\\" | \\"left-to-right\\"","raw":"\\"right-to-left\\" | \\"left-to-right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"right-to-left\\""},{"value":"\\"left-to-right\\""}]}},"filledSegmentColor":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color value","name":"filledSegmentColor","required":false,"type":{"name":"MantineColor"}},"label":{"defaultValue":null,"description":"Label rendered inside the circle","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelPosition":{"defaultValue":"`\'bottom\'`","description":"Label position relative to the circle center","name":"labelPosition","required":false,"type":{"name":"\\"center\\" | \\"bottom\\"","raw":"\\"center\\" | \\"bottom\\" | undefined","value":[{"value":"undefined"},{"value":"\\"center\\""},{"value":"\\"bottom\\""}]}},"orientation":{"defaultValue":"`\'up\'`","description":"Orientation of the circle","name":"orientation","required":false,"type":{"name":"\\"up\\" | \\"down\\"","raw":"\\"up\\" | \\"down\\" | undefined","value":[{"value":"undefined"},{"value":"\\"up\\""},{"value":"\\"down\\""}]}},"size":{"defaultValue":"`200`","description":"Diameter of the svg in px","name":"size","required":false,"type":{"name":"number"}},"thickness":{"defaultValue":"`12`","description":"Circle thickness in px","name":"thickness","required":false,"type":{"name":"number"}},"transitionDuration":{"defaultValue":"`0`","description":"Transition duration of filled section styles changes in ms","name":"transitionDuration","required":false,"type":{"name":"number"}},"value":{"defaultValue":null,"description":"Progress value from <code>0</code> to <code>100</code>","name":"value","required":true,"type":{"name":"number"}}}},"SimpleGrid":{"props":{"cols":{"defaultValue":"`1`","description":"Number of columns","name":"cols","required":false,"type":{"name":"StyleProp<number>"}},"spacing":{"defaultValue":"`\'md\'`","description":"Spacing between columns","name":"spacing","required":false,"type":{"name":"StyleProp<MantineSpacing>"}},"type":{"defaultValue":"`\'media\'`","description":"Determines typeof of queries that are used for responsive styles","name":"type","required":false,"type":{"name":"\\"media\\" | \\"container\\"","raw":"\\"media\\" | \\"container\\" | undefined","value":[{"value":"undefined"},{"value":"\\"media\\""},{"value":"\\"container\\""}]}},"verticalSpacing":{"defaultValue":"`\'md\'`","description":"Spacing between rows","name":"verticalSpacing","required":false,"type":{"name":"StyleProp<MantineSpacing>"}}}},"Skeleton":{"props":{"animate":{"defaultValue":"`true`","description":"Enables animation","name":"animate","required":false,"type":{"name":"boolean"}},"circle":{"defaultValue":"`false`","description":"If set, Skeleton <code>width</code> and <code>border-radius</code> are equal to its <code>height</code>","name":"circle","required":false,"type":{"name":"boolean"}},"height":{"defaultValue":"`auto`","description":"Skeleton <code>height</code>, numbers are converted to rem","name":"height","required":false,"type":{"name":"Height<string | number>"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius. Numbers are converted to rem.","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"visible":{"defaultValue":"`true`","description":"Determines whether Skeleton overlay should be displayed","name":"visible","required":false,"type":{"name":"boolean"}},"width":{"defaultValue":"`100%`","description":"Skeleton <code>width</code>, numbers are converted to rem, ignored when <code>circle</code> prop is set.","name":"width","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}}}},"Space":{"description":"","props":{}},"Spoiler":{"props":{"controlRef":{"defaultValue":null,"description":"Get ref of spoiler toggle button","name":"controlRef","required":false,"type":{"name":"ForwardedRef<HTMLButtonElement>"}},"expanded":{"defaultValue":null,"description":"Controlled expanded state value","name":"expanded","required":false,"type":{"name":"boolean"}},"hideLabel":{"defaultValue":null,"description":"Label for close spoiler action","name":"hideLabel","required":true,"type":{"name":"React.ReactNode"}},"initialState":{"defaultValue":null,"description":"Initial spoiler state, <code>true</code> to wrap content in spoiler, <code>false</code> to show content without spoiler, opened state is updated on mount","name":"initialState","required":false,"type":{"name":"boolean"}},"maxHeight":{"defaultValue":"`100`","description":"Maximum height of the visible content, when this point is reached spoiler appears","name":"maxHeight","required":false,"type":{"name":"number"}},"onExpandedChange":{"defaultValue":null,"description":"Called when expanded state changes (when spoiler visibility is toggled by the user)","name":"onExpandedChange","required":false,"type":{"name":"(expanded: boolean) => void"}},"showLabel":{"defaultValue":null,"description":"Label for open spoiler action","name":"showLabel","required":true,"type":{"name":"React.ReactNode"}},"transitionDuration":{"defaultValue":"`200`","description":"Spoiler reveal transition duration in ms, set 0 or null to turn off animation","name":"transitionDuration","required":false,"type":{"name":"number"}}}},"Stack":{"props":{"align":{"defaultValue":"`\'stretch\'`","description":"Controls <code>align-items</code> CSS property","name":"align","required":false,"type":{"name":"AlignItems"}},"gap":{"defaultValue":"`\'md\'`","description":"Key of <code>theme.spacing</code> or any valid CSS value to set <code>gap</code> property, numbers are converted to rem","name":"gap","required":false,"type":{"name":"MantineSpacing"}},"justify":{"defaultValue":"`\'flex-start\'`","description":"Controls <code>justify-content</code> CSS property","name":"justify","required":false,"type":{"name":"JustifyContent"}}}},"Stepper":{"props":{"active":{"defaultValue":null,"description":"Index of the active step","name":"active","required":true,"type":{"name":"number"}},"allowNextStepsSelect":{"defaultValue":"`true`","description":"If set, next steps can be selected","name":"allowNextStepsSelect","required":false,"type":{"name":"boolean"}},"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"children":{"defaultValue":null,"description":"<code>Stepper.Step</code> components","name":"children","required":true,"type":{"name":"React.ReactNode"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color, controls colors of active and progress steps","name":"color","required":false,"type":{"name":"MantineColor"}},"completedIcon":{"defaultValue":null,"description":"Step icon displayed when step is completed, check icon by default","name":"completedIcon","required":false,"type":{"name":"ReactNode | StepFragmentComponent"}},"contentPadding":{"defaultValue":null,"description":"Key of <code>theme.spacing</code> or any valid CSS value to set <code>padding-top</code> of the content","name":"contentPadding","required":false,"type":{"name":"MantineSpacing"}},"icon":{"defaultValue":null,"description":"Step icon, default value is <code>step index + 1</code>","name":"icon","required":false,"type":{"name":"ReactNode | StepFragmentComponent"}},"iconPosition":{"defaultValue":"`\'left\'`","description":"Icon position relative to the step body","name":"iconPosition","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"iconSize":{"defaultValue":null,"description":"Controls size of the step icon, by default icon size is inferred from <code>size</code> prop","name":"iconSize","required":false,"type":{"name":"string | number"}},"onStepClick":{"defaultValue":null,"description":"Called when step is clicked","name":"onStepClick","required":false,"type":{"name":"(stepIndex: number) => void"}},"orientation":{"defaultValue":"`\'horizontal\'`","description":"Stepper orientation","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"progressIcon":{"defaultValue":null,"description":"Step icon displayed when step is in progress, default value is <code>step index + 1</code>","name":"progressIcon","required":false,"type":{"name":"ReactNode | StepFragmentComponent"}},"radius":{"defaultValue":"`\\"xl\\"`","description":"Key of <code>theme.radius</code> or any valid CSS value to set steps border-radius","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"defaultValue":null,"description":"Controls size of various Stepper elements","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"wrap":{"defaultValue":"`true`","description":"Determines whether steps should wrap to the next line if no space is available","name":"wrap","required":false,"type":{"name":"boolean"}}}},"Switch":{"props":{"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color to set input color in checked state","name":"color","required":false,"type":{"name":"MantineColor"}},"description":{"defaultValue":null,"description":"Description displayed below the label","name":"description","required":false,"type":{"name":"React.ReactNode"}},"error":{"defaultValue":null,"description":"Error displayed below the label","name":"error","required":false,"type":{"name":"React.ReactNode"}},"id":{"defaultValue":null,"description":"Id used to bind input and label, if not passed, unique id will be generated instead","name":"id","required":false,"type":{"name":"string"}},"label":{"defaultValue":null,"description":"Content of the <code>label</code> associated with the radio","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelPosition":{"defaultValue":"`\'right\'`","description":"Position of the label relative to the input","name":"labelPosition","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"offLabel":{"defaultValue":null,"description":"Inner label when the <code>Switch</code> is in unchecked state","name":"offLabel","required":false,"type":{"name":"React.ReactNode"}},"onLabel":{"defaultValue":null,"description":"Inner label when the <code>Switch</code> is in checked state","name":"onLabel","required":false,"type":{"name":"React.ReactNode"}},"radius":{"defaultValue":"`\'xl\'`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius,</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"rootRef":{"defaultValue":null,"description":"Assigns ref of the root element","name":"rootRef","required":false,"type":{"name":"ForwardedRef<HTMLDivElement>"}},"size":{"defaultValue":null,"description":"Controls size of all elements","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"thumbIcon":{"defaultValue":null,"description":"Icon inside the thumb of the switch","name":"thumbIcon","required":false,"type":{"name":"React.ReactNode"}},"withThumbIndicator":{"defaultValue":"`true`","description":"If set, the indicator will be displayed inside thumb","name":"withThumbIndicator","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \\"ref\\"> & DataAttributes"}}}},"Table":{"props":{"borderColor":{"defaultValue":null,"description":"Color of table borders, key of <code>theme.colors</code> or any valid CSS color","name":"borderColor","required":false,"type":{"name":"MantineColor"}},"captionSide":{"defaultValue":"`bottom`","description":"Side of the <code>Table.Caption</code>","name":"captionSide","required":false,"type":{"name":"\\"bottom\\" | \\"top\\"","raw":"\\"bottom\\" | \\"top\\" | undefined","value":[{"value":"undefined"},{"value":"\\"bottom\\""},{"value":"\\"top\\""}]}},"data":{"defaultValue":null,"description":"Data used to generate table, ignored if <code>children</code> prop is set","name":"data","required":false,"type":{"name":"TableData"}},"highlightOnHover":{"defaultValue":"`false`","description":"If set, table rows background changes to <code>highlightOnHoverColor</code> when hovered","name":"highlightOnHover","required":false,"type":{"name":"boolean"}},"highlightOnHoverColor":{"defaultValue":null,"description":"Background color of table rows when hovered, key of <code>theme.colors</code> or any valid CSS color","name":"highlightOnHoverColor","required":false,"type":{"name":"MantineColor"}},"horizontalSpacing":{"defaultValue":"`xs`","description":"Horizontal cells spacing, key of <code>theme.spacing</code> or any valid CSS value for padding, numbers are converted to rem","name":"horizontalSpacing","required":false,"type":{"name":"MantineSpacing"}},"layout":{"defaultValue":"`auto`","description":"Value of <code>table-layout</code> style","name":"layout","required":false,"type":{"name":"TableLayout","raw":"TableLayout | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"auto\\""},{"value":"\\"fixed\\""}]}},"stickyHeader":{"defaultValue":"`false`","description":"If set, <code>Table.Thead</code> is sticky","name":"stickyHeader","required":false,"type":{"name":"boolean"}},"stickyHeaderOffset":{"defaultValue":"`0`","description":"Offset from top at which <code>Table.Thead</code> should become sticky","name":"stickyHeaderOffset","required":false,"type":{"name":"string | number"}},"striped":{"defaultValue":"`false`","description":"If set, every odd/even row background changes to <code>strippedColor</code>, if set to <code>true</code>, then <code>odd</code> value will be used","name":"striped","required":false,"type":{"name":"boolean | \\"odd\\" | \\"even\\""}},"stripedColor":{"defaultValue":null,"description":"Background color of striped rows, key of <code>theme.colors</code> or any valid CSS color","name":"stripedColor","required":false,"type":{"name":"MantineColor"}},"tabularNums":{"defaultValue":"`false`","description":"If set, <code>font-variant-numeric: tabular-nums</code> style is applied","name":"tabularNums","required":false,"type":{"name":"boolean"}},"verticalSpacing":{"defaultValue":"`xs`","description":"Vertical cells spacing, key of <code>theme.spacing</code> or any valid CSS value for padding, numbers are converted to rem","name":"verticalSpacing","required":false,"type":{"name":"MantineSpacing"}},"withColumnBorders":{"defaultValue":"`false`","description":"If set, the table has borders between columns","name":"withColumnBorders","required":false,"type":{"name":"boolean"}},"withRowBorders":{"defaultValue":"`true`","description":"If set, the table has borders between rows","name":"withRowBorders","required":false,"type":{"name":"boolean"}},"withTableBorder":{"defaultValue":"`false`","description":"If set, the table has the outer border","name":"withTableBorder","required":false,"type":{"name":"boolean"}}}},"TableOfContents":{"props":{"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color value","name":"color","required":false,"type":{"name":"MantineColor"}},"depthOffset":{"defaultValue":null,"description":"Controls padding on the left side of control, multiplied by (<code>depth</code> - <code>minDepthToOffset</code>), <code>20px</code> by default","name":"depthOffset","required":false,"type":{"name":"string | number"}},"getControlProps":{"defaultValue":null,"description":"A function to pass props down to controls, accepts values from <code>use-scroll-spy</code> hook as an argument and active state.","name":"getControlProps","required":false,"type":{"name":"(payload: TableOfContentsGetControlPropsPayload) => UnstyledButtonProps & ElementProps<\\"button\\"> & Record<...>"}},"initialData":{"defaultValue":null,"description":"Data used to render content until actual values are retrieved from the DOM","name":"initialData","required":false,"type":{"name":"InitialTableOfContentsData[]"}},"minDepthToOffset":{"defaultValue":null,"description":"Minimum <code>depth</code> value that requires offset, <code>1</code> by default","name":"minDepthToOffset","required":false,"type":{"name":"number"}},"radius":{"defaultValue":null,"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>@default <code>theme.defaultRadius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"reinitializeRef":{"defaultValue":null,"description":"A function to reinitialize headings from <code>use-scroll-spy</code> hook","name":"reinitializeRef","required":false,"type":{"name":"RefObject<() => void>"}},"scrollSpyOptions":{"defaultValue":null,"description":"Options passed down to <code>use-scroll-spy</code> hook","name":"scrollSpyOptions","required":false,"type":{"name":"UseScrollSpyOptions"}},"size":{"defaultValue":"`\'md\'`","description":"Controls font-size and padding of all elements","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}}}},"Tabs":{"props":{"activateTabWithKeyboard":{"defaultValue":"`true`","description":"If set, tab is activated with arrow key press","name":"activateTabWithKeyboard","required":false,"type":{"name":"boolean"}},"allowTabDeactivation":{"defaultValue":"`false`","description":"If set, tab can be deactivated","name":"allowTabDeactivation","required":false,"type":{"name":"boolean"}},"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>pills</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"children":{"defaultValue":null,"description":"Tabs content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"defaultValue":null,"description":"Changes colors of <code>Tabs.Tab</code> components when variant is <code>pills</code> or <code>default</code>, does nothing for other variants","name":"color","required":false,"type":{"name":"MantineColor"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string | null"}},"id":{"defaultValue":null,"description":"Base id, used to generate ids to connect labels with controls, generated randomly by default","name":"id","required":false,"type":{"name":"string"}},"inverted":{"defaultValue":"`false`","description":"Determines whether tabs should have inverted styles","name":"inverted","required":false,"type":{"name":"boolean"}},"keepMounted":{"defaultValue":"`true`","description":"If set to <code>false</code>, <code>Tabs.Panel</code> content will be unmounted when the associated tab is not active","name":"keepMounted","required":false,"type":{"name":"boolean"}},"loop":{"defaultValue":"`true`","description":"If set, arrow key presses loop though items (first to last and last to first)","name":"loop","required":false,"type":{"name":"boolean"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: string | null) => void"}},"orientation":{"defaultValue":"`\'horizontal\'`","description":"Tabs orientation","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"placement":{"defaultValue":"`\'left\'`","description":"<code>Tabs.List</code> placement relative to <code>Tabs.Panel</code>, applicable only when <code>orientation=\\"vertical\\"</code>","name":"placement","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"radius":{"defaultValue":null,"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>@default <code>theme.defaultRadius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string | null"}}}},"TagsInput":{"props":{"acceptValueOnBlur":{"defaultValue":"`true`","description":"If set, the value typed in by the user but not submitted is accepted when the input is blurred","name":"acceptValueOnBlur","required":false,"type":{"name":"boolean"}},"allowDuplicates":{"defaultValue":"`false`","description":"If set, duplicate tags are allowed","name":"allowDuplicates","required":false,"type":{"name":"boolean"}},"clearButtonProps":{"defaultValue":null,"description":"Props passed down to the clear button","name":"clearButtonProps","required":false,"type":{"name":"InputClearButtonProps"}},"clearable":{"defaultValue":"`false`","description":"If set, the clear button is displayed in the right section when the component has value","name":"clearable","required":false,"type":{"name":"boolean"}},"comboboxProps":{"defaultValue":null,"description":"Props passed down to <code>Combobox</code> component","name":"comboboxProps","required":false,"type":{"name":"ComboboxProps"}},"data":{"defaultValue":null,"description":"Data displayed in the dropdown. Values must be unique.","name":"data","required":false,"type":{"name":"ComboboxStringData"}},"defaultDropdownOpened":{"defaultValue":null,"description":"Uncontrolled dropdown initial opened state","name":"defaultDropdownOpened","required":false,"type":{"name":"boolean"}},"defaultSearchValue":{"defaultValue":null,"description":"Default search value","name":"defaultSearchValue","required":false,"type":{"name":"string"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string[]"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownOpened":{"defaultValue":null,"description":"Controlled dropdown opened state","name":"dropdownOpened","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"filter":{"defaultValue":null,"description":"Function based on which items are filtered and sorted","name":"filter","required":false,"type":{"name":"OptionsFilter"}},"hiddenInputProps":{"defaultValue":null,"description":"Props passed down to the hidden input","name":"hiddenInputProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"input\\">"}},"hiddenInputValuesDivider":{"defaultValue":"`\',\'`","description":"Divider used to separate values in the hidden input <code>value</code> attribute","name":"hiddenInputValuesDivider","required":false,"type":{"name":"string"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"isDuplicate":{"defaultValue":null,"description":"Custom function to determine if a tag is duplicate. Accepts tag value and array of current values. By default, checks if the tag exists case-insensitively.","name":"isDuplicate","required":false,"type":{"name":"(value: string, currentValues: string[]) => boolean"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"limit":{"defaultValue":null,"description":"Maximum number of options displayed at a time, <code>Infinity</code> by default","name":"limit","required":false,"type":{"name":"number"}},"maxDropdownHeight":{"defaultValue":null,"description":"<code>max-height</code> of the dropdown, only applicable when <code>withScrollArea</code> prop is <code>true</code>, <code>250</code> by default","name":"maxDropdownHeight","required":false,"type":{"name":"string | number"}},"maxTags":{"defaultValue":"`Infinity`","description":"Maximum number of tags","name":"maxTags","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: string[]) => void"}},"onClear":{"defaultValue":null,"description":"Called when the clear button is clicked","name":"onClear","required":false,"type":{"name":"() => void"}},"onDropdownClose":{"defaultValue":null,"description":"Called when dropdown closes","name":"onDropdownClose","required":false,"type":{"name":"() => void"}},"onDropdownOpen":{"defaultValue":null,"description":"Called when dropdown opens","name":"onDropdownOpen","required":false,"type":{"name":"() => void"}},"onDuplicate":{"defaultValue":null,"description":"Called when user tries to submit a duplicated tag","name":"onDuplicate","required":false,"type":{"name":"(value: string) => void"}},"onOptionSubmit":{"defaultValue":null,"description":"Called when option is submitted from dropdown with mouse click or <code>Enter</code> key","name":"onOptionSubmit","required":false,"type":{"name":"(value: string) => void"}},"onRemove":{"defaultValue":null,"description":"Called when tag is removed","name":"onRemove","required":false,"type":{"name":"(value: string) => void"}},"onSearchChange":{"defaultValue":null,"description":"Called when search changes","name":"onSearchChange","required":false,"type":{"name":"(value: string) => void"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"renderOption":{"defaultValue":null,"description":"A function to render content of the option, replaces the default content of the option","name":"renderOption","required":false,"type":{"name":"(input: ComboboxLikeRenderOptionInput<ComboboxStringItem>) => ReactNode"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"scrollAreaProps":{"defaultValue":null,"description":"Props passed down to the underlying <code>ScrollArea</code> component in the dropdown","name":"scrollAreaProps","required":false,"type":{"name":"ScrollAreaProps"}},"searchValue":{"defaultValue":null,"description":"Controlled search value","name":"searchValue","required":false,"type":{"name":"string"}},"selectFirstOptionOnChange":{"defaultValue":null,"description":"If set, the first option is selected when value changes, <code>false</code> by default","name":"selectFirstOptionOnChange","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"splitChars":{"defaultValue":null,"description":"Characters that should trigger tags split, <code>[\',\']</code> by default","name":"splitChars","required":false,"type":{"name":"string[]"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string[]"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withScrollArea":{"defaultValue":null,"description":"Determines whether the options should be wrapped with <code>ScrollArea.AutoSize</code>, <code>true</code> by default","name":"withScrollArea","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"Text":{"props":{"color":{"defaultValue":null,"description":"@deprecated Use <code>c</code> prop instead","name":"color","required":false,"type":{"name":"MantineColor"}},"gradient":{"defaultValue":"`theme.defaultGradient`","description":"Gradient configuration, ignored when <code>variant</code> is not <code>gradient</code>","name":"gradient","required":false,"type":{"name":"MantineGradient"}},"inherit":{"defaultValue":"`false`","description":"Determines whether font properties should be inherited from the parent","name":"inherit","required":false,"type":{"name":"boolean"}},"inline":{"defaultValue":"`false`","description":"Sets <code>line-height</code> to 1 for centering","name":"inline","required":false,"type":{"name":"boolean"}},"lineClamp":{"defaultValue":null,"description":"Number of lines after which Text will be truncated","name":"lineClamp","required":false,"type":{"name":"number"}},"size":{"defaultValue":"`\'md\'`","description":"Controls <code>font-size</code> and <code>line-height</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"span":{"defaultValue":null,"description":"Shorthand for <code>component=\\"span\\"</code>","name":"span","required":false,"type":{"name":"boolean"}},"truncate":{"defaultValue":null,"description":"Side on which Text must be truncated, if <code>true</code>, text is truncated from the start","name":"truncate","required":false,"type":{"name":"TextTruncate"}}}},"TextInput":{"props":{"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"Textarea":{"props":{"autosize":{"defaultValue":"`false`","description":"If set, enables textarea height growing with its content","name":"autosize","required":false,"type":{"name":"boolean"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"maxRows":{"defaultValue":null,"description":"Maximum rows for autosize textarea to grow, ignored if <code>autosize</code> prop is not set","name":"maxRows","required":false,"type":{"name":"number"}},"minRows":{"defaultValue":null,"description":"Minimum rows of autosize textarea, ignored if <code>autosize</code> prop is not set","name":"minRows","required":false,"type":{"name":"number"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"resize":{"defaultValue":"`\'none\'`","description":"Controls <code>resize</code> CSS property","name":"resize","required":false,"type":{"name":"Resize","raw":"Resize | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"block\\""},{"value":"\\"inline\\""},{"value":"\\"both\\""},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"ThemeIcon":{"props":{"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"children":{"defaultValue":null,"description":"Icon displayed inside the component","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color.","name":"color","required":false,"type":{"name":"MantineColor"}},"gradient":{"defaultValue":"`theme.defaultGradient`","description":"Gradient data used when <code>variant=\\"gradient\\"</code>","name":"gradient","required":false,"type":{"name":"MantineGradient"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius. Numbers are converted to rem.","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"defaultValue":"`\'md\'`","description":"Controls width and height of the button. Numbers are converted to rem.","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}}}},"Timeline":{"props":{"active":{"defaultValue":null,"description":"Index of the active element","name":"active","required":false,"type":{"name":"number"}},"align":{"defaultValue":"`\'left\'`","description":"Position of content relative to the bullet","name":"align","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"bulletSize":{"defaultValue":"`20`","description":"Size of the bullet","name":"bulletSize","required":false,"type":{"name":"string | number"}},"children":{"defaultValue":null,"description":"<code>Timeline.Item</code> components","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color to control active item colors","name":"color","required":false,"type":{"name":"MantineColor"}},"lineWidth":{"defaultValue":null,"description":"Control width of the line","name":"lineWidth","required":false,"type":{"name":"string | number"}},"radius":{"defaultValue":"`\'xl\'`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"reverseActive":{"defaultValue":"`false`","description":"If set, the active items direction is reversed without reversing items order","name":"reverseActive","required":false,"type":{"name":"boolean"}}}},"Title":{"props":{"lineClamp":{"defaultValue":null,"description":"Number of lines after which heading will be truncated","name":"lineClamp","required":false,"type":{"name":"number"}},"order":{"defaultValue":"`1`","description":"Heading order (1-6), controls <code>font-size</code> style if <code>size</code> prop is not set","name":"order","required":false,"type":{"name":"TitleOrder","raw":"TitleOrder | undefined","value":[{"value":"undefined"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"size":{"defaultValue":null,"description":"Changes title size, if not set, then size is controlled by <code>order</code> prop","name":"size","required":false,"type":{"name":"TitleSize"}},"textWrap":{"defaultValue":"`\'wrap\'`","description":"Heading <code>text-wrap</code> CSS property","name":"textWrap","required":false,"type":{"name":"\\"wrap\\" | \\"nowrap\\" | \\"balance\\" | \\"pretty\\" | \\"stable\\"","raw":"\\"wrap\\" | \\"nowrap\\" | \\"balance\\" | \\"pretty\\" | \\"stable\\" | undefined","value":[{"value":"undefined"},{"value":"\\"wrap\\""},{"value":"\\"nowrap\\""},{"value":"\\"balance\\""},{"value":"\\"pretty\\""},{"value":"\\"stable\\""}]}}}},"Tooltip":{"props":{"arrowOffset":{"defaultValue":"`5`","description":"Arrow offset in px","name":"arrowOffset","required":false,"type":{"name":"number"}},"arrowPosition":{"defaultValue":"`side`","description":"Arrow position relative to the tooltip","name":"arrowPosition","required":false,"type":{"name":"ArrowPosition","raw":"ArrowPosition | undefined","value":[{"value":"undefined"},{"value":"\\"center\\""},{"value":"\\"side\\""}]}},"arrowRadius":{"defaultValue":"`0`","description":"Arrow <code>border-radius</code> in px","name":"arrowRadius","required":false,"type":{"name":"number"}},"arrowSize":{"defaultValue":"`4`","description":"Arrow size in px","name":"arrowSize","required":false,"type":{"name":"number"}},"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"children":{"defaultValue":null,"description":"Target element, must support <code>ref</code> prop and <code>...others</code>","name":"children","required":false,"type":{"name":"React.ReactNode"}},"closeDelay":{"defaultValue":"`0`","description":"Close delay in ms","name":"closeDelay","required":false,"type":{"name":"number"}},"color":{"defaultValue":null,"description":"Key of <code>theme.colors</code> or any valid CSS color, controls tooltip background, by default set based on current color scheme","name":"color","required":false,"type":{"name":"MantineColor"}},"defaultOpened":{"defaultValue":null,"description":"Uncontrolled tooltip initial opened state","name":"defaultOpened","required":false,"type":{"name":"boolean"}},"disabled":{"defaultValue":null,"description":"If set, tooltip element will not be rendered","name":"disabled","required":false,"type":{"name":"boolean"}},"events":{"defaultValue":"`{ hover: true, focus: false, touch: false }`","description":"Determines which events will be used to show tooltip","name":"events","required":false,"type":{"name":"{ hover: boolean; focus: boolean; touch: boolean; }"}},"floatingStrategy":{"defaultValue":"`\'absolute\'`","description":"Changes floating ui [position strategy](https://floating-ui.com/docs/usefloating#strategy)","name":"floatingStrategy","required":false,"type":{"name":"FloatingStrategy","raw":"FloatingStrategy | undefined","value":[{"value":"undefined"},{"value":"\\"fixed\\""},{"value":"\\"absolute\\""}]}},"inline":{"defaultValue":null,"description":"Must be set if the tooltip target is an inline element","name":"inline","required":false,"type":{"name":"boolean"}},"keepMounted":{"defaultValue":null,"description":"If set, the tooltip is not unmounted from the DOM when hidden, <code>display: none</code> styles are applied instead","name":"keepMounted","required":false,"type":{"name":"boolean"}},"label":{"defaultValue":null,"description":"Tooltip content","name":"label","required":true,"type":{"name":"React.ReactNode"}},"middlewares":{"defaultValue":null,"description":"Floating ui middlewares to configure position handling, <code>{ flip: true, shift: true, inline: false }</code> by default","name":"middlewares","required":false,"type":{"name":"TooltipMiddlewares"}},"multiline":{"defaultValue":null,"description":"Determines whether content should be wrapped on to the next line, <code>false</code> by default","name":"multiline","required":false,"type":{"name":"boolean"}},"offset":{"defaultValue":"`5`","description":"Space between target element and tooltip in px","name":"offset","required":false,"type":{"name":"number | FloatingAxesOffsets"}},"onPositionChange":{"defaultValue":null,"description":"Called when tooltip position changes","name":"onPositionChange","required":false,"type":{"name":"(position: FloatingPosition) => void"}},"openDelay":{"defaultValue":null,"description":"Open delay in ms","name":"openDelay","required":false,"type":{"name":"number"}},"opened":{"defaultValue":null,"description":"Controlled opened state","name":"opened","required":false,"type":{"name":"boolean"}},"portalProps":{"defaultValue":null,"description":"Props to pass down to the portal when withinPortal is true","name":"portalProps","required":false,"type":{"name":"Omit<BasePortalProps, \\"withinPortal\\">"}},"position":{"defaultValue":null,"description":"Tooltip position relative to target element (<code>Tooltip</code> component) or mouse (<code>Tooltip.Floating</code> component)","name":"position","required":false,"type":{"name":"FloatingPosition","raw":"FloatingPosition | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""},{"value":"\\"bottom\\""},{"value":"\\"top\\""},{"value":"\\"left-end\\""},{"value":"\\"left-start\\""},{"value":"\\"right-end\\""},{"value":"\\"right-start\\""},{"value":"\\"bottom-end\\""},{"value":"\\"bottom-start\\""},{"value":"\\"top-end\\""},{"value":"\\"top-start\\""}]}},"positionDependencies":{"defaultValue":null,"description":"@deprecated : Do not use, will be removed in 9.0","name":"positionDependencies","required":false,"type":{"name":"any[]"}},"radius":{"defaultValue":null,"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, numbers are converted to rem@default <code>theme.defaultRadius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"refProp":{"defaultValue":null,"description":"Key of the prop that can be used to access element ref, <code>ref</code> by default","name":"refProp","required":false,"type":{"name":"string"}},"target":{"defaultValue":null,"description":"Selector, ref of an element or element itself that should be used for positioning","name":"target","required":false,"type":{"name":"string | HTMLElement | RefObject<HTMLElement | null> | null"}},"transitionProps":{"defaultValue":"`{ duration: 100, transition: \'fade\' }`","description":"Props passed down to the <code>Transition</code> component that used to animate tooltip presence, use to configure duration and animation type","name":"transitionProps","required":false,"type":{"name":"TransitionProps"}},"withArrow":{"defaultValue":"`false`","description":"If set, the tooltip has an arrow","name":"withArrow","required":false,"type":{"name":"boolean"}},"withinPortal":{"defaultValue":null,"description":"Determines whether tooltip should be rendered within <code>Portal</code>, <code>true</code> by default","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":null,"description":"Tooltip z-index, <code>300</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Transition":{"props":{"children":{"defaultValue":null,"description":"Render function with transition styles argument","name":"children","required":true,"type":{"name":"(styles: CSSProperties) => Element"}},"duration":{"defaultValue":"250","description":"Transition duration in ms","name":"duration","required":false,"type":{"name":"number"}},"enterDelay":{"defaultValue":null,"description":"Delay in ms before enter transition starts","name":"enterDelay","required":false,"type":{"name":"number"}},"exitDelay":{"defaultValue":null,"description":"Delay in ms before exit transition starts","name":"exitDelay","required":false,"type":{"name":"number"}},"exitDuration":{"defaultValue":"250","description":"Exit transition duration in ms","name":"exitDuration","required":false,"type":{"name":"number"}},"keepMounted":{"defaultValue":null,"description":"If set, the element is not unmounted from the DOM when hidden, <code>display: none</code> styles are applied instead","name":"keepMounted","required":false,"type":{"name":"boolean"}},"mounted":{"defaultValue":null,"description":"Determines whether component should be mounted to the DOM","name":"mounted","required":true,"type":{"name":"boolean"}},"onEnter":{"defaultValue":null,"description":"Called when enter transition starts","name":"onEnter","required":false,"type":{"name":"() => void"}},"onEntered":{"defaultValue":null,"description":"Called when enter transition ends","name":"onEntered","required":false,"type":{"name":"() => void"}},"onExit":{"defaultValue":null,"description":"Called when exit transition starts","name":"onExit","required":false,"type":{"name":"() => void"}},"onExited":{"defaultValue":null,"description":"Called when exit transition ends","name":"onExited","required":false,"type":{"name":"() => void"}},"timingFunction":{"defaultValue":"ease","description":"Transition timing function","name":"timingFunction","required":false,"type":{"name":"string"}},"transition":{"defaultValue":"fade","description":"Transition name or object","name":"transition","required":false,"type":{"name":"MantineTransition"}}}},"Tree":{"props":{"allowRangeSelection":{"defaultValue":"`true`","description":"If set, tree nodes range can be selected with click when <code>Shift</code> key is pressed","name":"allowRangeSelection","required":false,"type":{"name":"boolean"}},"checkOnSpace":{"defaultValue":"`false`","description":"If set, tree node is checked on space key press","name":"checkOnSpace","required":false,"type":{"name":"boolean"}},"clearSelectionOnOutsideClick":{"defaultValue":"`false`","description":"If set, selection is cleared when user clicks outside of the tree","name":"clearSelectionOnOutsideClick","required":false,"type":{"name":"boolean"}},"data":{"defaultValue":null,"description":"Data used to render nodes","name":"data","required":true,"type":{"name":"TreeNodeData[]"}},"expandOnClick":{"defaultValue":"`true`","description":"If set, tree node with children is expanded on click","name":"expandOnClick","required":false,"type":{"name":"boolean"}},"expandOnSpace":{"defaultValue":"`true`","description":"If set, tree node with children is expanded on space key press","name":"expandOnSpace","required":false,"type":{"name":"boolean"}},"levelOffset":{"defaultValue":"`\'lg\'`","description":"Horizontal padding of each subtree level, key of <code>theme.spacing</code> or any valid CSS value","name":"levelOffset","required":false,"type":{"name":"MantineSpacing"}},"renderNode":{"defaultValue":null,"description":"A function to render tree node label","name":"renderNode","required":false,"type":{"name":"RenderNode"}},"selectOnClick":{"defaultValue":"`false`","description":"If set, tree node is selected on click","name":"selectOnClick","required":false,"type":{"name":"boolean"}},"tree":{"defaultValue":null,"description":"Use-tree hook instance that can be used to manipulate component state","name":"tree","required":false,"type":{"name":"UseTreeReturnType"}}}},"Typography":{"description":"","props":{}},"UnstyledButton":{"props":{"size":{"defaultValue":null,"description":"Size passed from parent component, sets <code>data-size</code> if value is not number like","name":"size","required":false,"type":{"name":"string | number"}}}},"VisuallyHidden":{"description":"","props":{}},"Calendar":{"props":{"ariaLabels":{"defaultValue":null,"description":"<code>aria-label</code> attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll with next/prev buttons, same as <code>numberOfColumns</code> if not set explicitly","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Displayed date in controlled mode","name":"date","required":false,"type":{"name":"string | Date"}},"decadeLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"<code>dayjs</code> format for decade label or a function that returns decade label based on the date value","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: string, endOfDecade: string) => ReactNode)"}},"defaultDate":{"defaultValue":null,"description":"Initial displayed date in uncontrolled mode","name":"defaultDate","required":false,"type":{"name":"string | Date"}},"defaultLevel":{"defaultValue":null,"description":"Initial displayed level in uncontrolled mode","name":"defaultLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"enableKeyboardNavigation":{"defaultValue":null,"description":"Enable enhanced keyboard navigation (Ctrl/Cmd + Arrow keys for year navigation, Ctrl/Cmd + Shift + Arrow keys for decade navigation, Y key to open year view)","name":"enableKeyboardNavigation","required":false,"type":{"name":"boolean"}},"excludeDate":{"defaultValue":null,"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"(date: string) => boolean"}},"firstDayOfWeek":{"defaultValue":"`1` – Monday","description":"Number 0-6, where 0 – Sunday and 6 – Saturday.","name":"firstDayOfWeek","required":false,"type":{"name":"0 | 1 | 2 | 3 | 4 | 5 | 6","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"defaultValue":null,"description":"Assigns <code>aria-label</code> to <code>Day</code> components based on date","name":"getDayAriaLabel","required":false,"type":{"name":"(date: string) => string"}},"getDayProps":{"defaultValue":null,"description":"Passes props down to <code>Day</code> components","name":"getDayProps","required":false,"type":{"name":"(date: string) => Omit<Partial<DayProps>, \\"classNames\\" | \\"styles\\" | \\"vars\\"> & DataAttributes"}},"getMonthControlProps":{"defaultValue":null,"description":"Passes props down month picker control","name":"getMonthControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"getYearControlProps":{"defaultValue":null,"description":"Passes props down to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"headerControlsOrder":{"defaultValue":"`[\'previous\', \'level\', \'next\']`","description":"Controls order","name":"headerControlsOrder","required":false,"type":{"name":"(\\"next\\" | \\"previous\\" | \\"level\\")[]"}},"hideOutsideDates":{"defaultValue":"`false`","description":"Determines whether outside dates should be hidden","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"defaultValue":"`false`","description":"Determines whether weekdays row should be hidden","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"highlightToday":{"defaultValue":"`false`","description":"Determines whether today should be highlighted with a border","name":"highlightToday","required":false,"type":{"name":"boolean"}},"level":{"defaultValue":null,"description":"Current displayed level displayed in controlled mode","name":"level","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"defaultValue":null,"description":"Dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"maxDate","required":false,"type":{"name":"string | Date"}},"maxLevel":{"defaultValue":"`\'decade\'`","description":"Max level that user can go up to (decade, year, month)","name":"maxLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"minDate":{"defaultValue":null,"description":"Minimum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"minDate","required":false,"type":{"name":"string | Date"}},"minLevel":{"defaultValue":"`\'month\'`","description":"Min level that user can go down to (decade, year, month)","name":"minLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"monthLabelFormat":{"defaultValue":"`\\"MMMM YYYY\\"`","description":"dayjs label format to display month label or a function that returns month label based on month value","name":"monthLabelFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"monthsListFormat":{"defaultValue":null,"description":"<code>dayjs</code> format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"defaultValue":null,"description":"Next button <code>aria-label</code>","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":"`1`","description":"Number of columns displayed next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: string) => void"}},"onLevelChange":{"defaultValue":null,"description":"Called when level changes","name":"onLevelChange","required":false,"type":{"name":"(level: CalendarLevel) => void"}},"onMonthMouseEnter":{"defaultValue":null,"description":"Called when mouse enters month control","name":"onMonthMouseEnter","required":false,"type":{"name":"(event: MouseEvent<HTMLButtonElement, MouseEvent>, date: string) => void"}},"onMonthSelect":{"defaultValue":null,"description":"Called when user selects month","name":"onMonthSelect","required":false,"type":{"name":"(date: string) => void"}},"onNextDecade":{"defaultValue":null,"description":"Called when the next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"(date: string) => void"}},"onNextMonth":{"defaultValue":null,"description":"Called when the next month button is clicked","name":"onNextMonth","required":false,"type":{"name":"(date: string) => void"}},"onNextYear":{"defaultValue":null,"description":"Called when the next year button is clicked","name":"onNextYear","required":false,"type":{"name":"(date: string) => void"}},"onPreviousDecade":{"defaultValue":null,"description":"Called when the previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"(date: string) => void"}},"onPreviousMonth":{"defaultValue":null,"description":"Called when the previous month button is clicked","name":"onPreviousMonth","required":false,"type":{"name":"(date: string) => void"}},"onPreviousYear":{"defaultValue":null,"description":"Called when the previous year button is clicked","name":"onPreviousYear","required":false,"type":{"name":"(date: string) => void"}},"onYearMouseEnter":{"defaultValue":null,"description":"Called when mouse enters year control","name":"onYearMouseEnter","required":false,"type":{"name":"(event: MouseEvent<HTMLButtonElement, MouseEvent>, date: string) => void"}},"onYearSelect":{"defaultValue":null,"description":"Called when user selects year","name":"onYearSelect","required":false,"type":{"name":"(date: string) => void"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"defaultValue":null,"description":"Previous button <code>aria-label</code>","name":"previousLabel","required":false,"type":{"name":"string"}},"renderDay":{"defaultValue":null,"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"(date: string) => React.ReactNode"}},"size":{"defaultValue":null,"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"static":{"defaultValue":null,"description":"Determines whether days should be static, static days can be used to display month if it is not expected that user will interact with the component in any way","name":"static","required":false,"type":{"name":"boolean"}},"weekdayFormat":{"defaultValue":"`\'dd\'`","description":"<code>dayjs</code> format for weekdays names","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"weekendDays":{"defaultValue":null,"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday. The default value is defined by <code>DatesProvider</code>.","name":"weekendDays","required":false,"type":{"name":"(0 | 1 | 2 | 3 | 4 | 5 | 6)[]"}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withWeekNumbers":{"defaultValue":"`false`","description":"Determines whether week numbers should be displayed","name":"withWeekNumbers","required":false,"type":{"name":"boolean"}},"yearLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"dayjs label format to display year label or a function that returns year label based on year value","name":"yearLabelFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"yearsListFormat":{"defaultValue":"`\'YYYY\'`","description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"CalendarHeader":{"props":{"hasNextLevel":{"defaultValue":"`true`","description":"Determines whether next level button should be enabled","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"headerControlsOrder":{"defaultValue":"`[\'previous\', \'level\', \'next\']`","description":"Controls order","name":"headerControlsOrder","required":false,"type":{"name":"(\\"next\\" | \\"previous\\" | \\"level\\")[]"}},"label":{"defaultValue":null,"description":"Label displayed between next and previous buttons","name":"label","required":true,"type":{"name":"React.ReactNode"}},"levelControlAriaLabel":{"defaultValue":null,"description":"Level control <code>aria-label</code>","name":"levelControlAriaLabel","required":false,"type":{"name":"string"}},"nextDisabled":{"defaultValue":null,"description":"Disables next control","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"defaultValue":null,"description":"Next button <code>aria-label</code>","name":"nextLabel","required":false,"type":{"name":"string"}},"onLevelClick":{"defaultValue":null,"description":"Called when the level button is clicked","name":"onLevelClick","required":false,"type":{"name":"() => void"}},"onNext":{"defaultValue":null,"description":"Called when the next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onPrevious":{"defaultValue":null,"description":"Called when the previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"previousDisabled":{"defaultValue":null,"description":"Disables previous control","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"defaultValue":null,"description":"Previous button <code>aria-label</code>","name":"previousLabel","required":false,"type":{"name":"string"}},"size":{"defaultValue":null,"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"withNext":{"defaultValue":"`true`","description":"Determines whether next control should be rendered","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"defaultValue":"`true`","description":"Determines whether previous control should be rendered","name":"withPrevious","required":false,"type":{"name":"boolean"}}}},"DateInput":{"props":{"allowDeselect":{"defaultValue":null,"description":"If set, the value can be deselected by deleting everything from the input or by clicking the selected date in the dropdown. By default, <code>true</code> if <code>clearable</code> prop is set, <code>false</code> otherwise.","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"ariaLabels":{"defaultValue":null,"description":"<code>aria-label</code> attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"clearButtonProps":{"defaultValue":null,"description":"Props passed down to the clear button","name":"clearButtonProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"clearable":{"defaultValue":"`false`","description":"If set, clear button is displayed in the <code>rightSection</code> when the component has value. Ignored if <code>rightSection</code> prop is set.","name":"clearable","required":false,"type":{"name":"boolean"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll with next/prev buttons, same as <code>numberOfColumns</code> if not set explicitly","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Displayed date in controlled mode","name":"date","required":false,"type":{"name":"string | Date"}},"dateParser":{"defaultValue":null,"description":"A function to parse user input and convert it to date string value","name":"dateParser","required":false,"type":{"name":"(value: string) => string | Date | null"}},"decadeLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"<code>dayjs</code> format for decade label or a function that returns decade label based on the date value","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: string, endOfDecade: string) => ReactNode)"}},"defaultDate":{"defaultValue":null,"description":"Initial displayed date in uncontrolled mode","name":"defaultDate","required":false,"type":{"name":"string | Date"}},"defaultLevel":{"defaultValue":null,"description":"Initial displayed level (uncontrolled)","name":"defaultLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"DateValue"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"excludeDate":{"defaultValue":null,"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"(date: string) => boolean"}},"firstDayOfWeek":{"defaultValue":"`1` – Monday","description":"Number 0-6, where 0 – Sunday and 6 – Saturday.","name":"firstDayOfWeek","required":false,"type":{"name":"0 | 1 | 2 | 3 | 4 | 5 | 6","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"fixOnBlur":{"defaultValue":null,"description":"If set to <code>false</code>, invalid user input is preserved and is not corrected on blur","name":"fixOnBlur","required":false,"type":{"name":"boolean"}},"getDayAriaLabel":{"defaultValue":null,"description":"Assigns <code>aria-label</code> to <code>Day</code> components based on date","name":"getDayAriaLabel","required":false,"type":{"name":"(date: string) => string"}},"getDayProps":{"defaultValue":null,"description":"Passes props down to <code>Day</code> components","name":"getDayProps","required":false,"type":{"name":"(date: string) => Omit<Partial<DayProps>, \\"classNames\\" | \\"styles\\" | \\"vars\\"> & DataAttributes"}},"getMonthControlProps":{"defaultValue":null,"description":"Passes props down month picker control","name":"getMonthControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"getYearControlProps":{"defaultValue":null,"description":"Passes props down to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"hasNextLevel":{"defaultValue":"`true`","description":"Determines whether next level button should be enabled","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"headerControlsOrder":{"defaultValue":"`[\'previous\', \'level\', \'next\']`","description":"Controls order","name":"headerControlsOrder","required":false,"type":{"name":"(\\"next\\" | \\"previous\\" | \\"level\\")[]"}},"hideOutsideDates":{"defaultValue":"`false`","description":"Determines whether outside dates should be hidden","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"defaultValue":"`false`","description":"Determines whether weekdays row should be hidden","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"highlightToday":{"defaultValue":"`false`","description":"Determines whether today should be highlighted with a border","name":"highlightToday","required":false,"type":{"name":"boolean"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"level":{"defaultValue":null,"description":"Current displayed level (controlled)","name":"level","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"defaultValue":null,"description":"Dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"maxDate","required":false,"type":{"name":"string | Date"}},"maxLevel":{"defaultValue":"`\'decade\'`","description":"Max level that user can go up to","name":"maxLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"minDate":{"defaultValue":null,"description":"Minimum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"minDate","required":false,"type":{"name":"string | Date"}},"monthLabelFormat":{"defaultValue":"`\\"MMMM YYYY\\"`","description":"dayjs label format to display month label or a function that returns month label based on month value","name":"monthLabelFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"monthsListFormat":{"defaultValue":null,"description":"<code>dayjs</code> format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextDisabled":{"defaultValue":null,"description":"Disables next control","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"defaultValue":null,"description":"Next button <code>aria-label</code>","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":"`1`","description":"Number of columns displayed next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: string | null) => void"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: string) => void"}},"onLevelChange":{"defaultValue":null,"description":"Called when the level changes","name":"onLevelChange","required":false,"type":{"name":"(level: CalendarLevel) => void"}},"onLevelClick":{"defaultValue":null,"description":"Called when the level button is clicked","name":"onLevelClick","required":false,"type":{"name":"() => void"}},"onNext":{"defaultValue":null,"description":"Called when the next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onNextDecade":{"defaultValue":null,"description":"Called when the next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"(date: string) => void"}},"onNextMonth":{"defaultValue":null,"description":"Called when the next month button is clicked","name":"onNextMonth","required":false,"type":{"name":"(date: string) => void"}},"onNextYear":{"defaultValue":null,"description":"Called when the next year button is clicked","name":"onNextYear","required":false,"type":{"name":"(date: string) => void"}},"onPrevious":{"defaultValue":null,"description":"Called when the previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"onPreviousDecade":{"defaultValue":null,"description":"Called when the previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"(date: string) => void"}},"onPreviousMonth":{"defaultValue":null,"description":"Called when the previous month button is clicked","name":"onPreviousMonth","required":false,"type":{"name":"(date: string) => void"}},"onPreviousYear":{"defaultValue":null,"description":"Called when the previous year button is clicked","name":"onPreviousYear","required":false,"type":{"name":"(date: string) => void"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"popoverProps":{"defaultValue":null,"description":"Props passed down to the <code>Popover</code> component","name":"popoverProps","required":false,"type":{"name":"Partial<Omit<PopoverProps, \\"children\\">>"}},"previousDisabled":{"defaultValue":null,"description":"Disables previous control","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"defaultValue":null,"description":"Previous button <code>aria-label</code>","name":"previousLabel","required":false,"type":{"name":"string"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"renderDay":{"defaultValue":null,"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"(date: string) => React.ReactNode"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":null,"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"DateValue"}},"valueFormat":{"defaultValue":null,"description":"<code>dayjs</code> format to display input value, <code>\\"MMMM D, YYYY\\"</code> by default","name":"valueFormat","required":false,"type":{"name":"string"}},"weekdayFormat":{"defaultValue":"`\'dd\'`","description":"<code>dayjs</code> format for weekdays names","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"weekendDays":{"defaultValue":null,"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday. The default value is defined by <code>DatesProvider</code>.","name":"weekendDays","required":false,"type":{"name":"(0 | 1 | 2 | 3 | 4 | 5 | 6)[]"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withNext":{"defaultValue":"`true`","description":"Determines whether next control should be rendered","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"defaultValue":"`true`","description":"Determines whether previous control should be rendered","name":"withPrevious","required":false,"type":{"name":"boolean"}},"withWeekNumbers":{"defaultValue":"`false`","description":"Determines whether week numbers should be displayed","name":"withWeekNumbers","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}},"yearLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"dayjs label format to display year label or a function that returns year label based on year value","name":"yearLabelFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"yearsListFormat":{"defaultValue":"`\'YYYY\'`","description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"DatePicker":{"props":{"allowDeselect":{"defaultValue":null,"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"defaultValue":null,"description":"Determines whether a single day can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"defaultValue":null,"description":"<code>aria-label</code> attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll with next/prev buttons, same as <code>numberOfColumns</code> if not set explicitly","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Displayed date in controlled mode","name":"date","required":false,"type":{"name":"string | Date"}},"decadeLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"<code>dayjs</code> format for decade label or a function that returns decade label based on the date value","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: string, endOfDecade: string) => ReactNode)"}},"defaultDate":{"defaultValue":null,"description":"Initial displayed date in uncontrolled mode","name":"defaultDate","required":false,"type":{"name":"string | Date"}},"defaultLevel":{"defaultValue":null,"description":"Initial displayed level (uncontrolled)","name":"defaultLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"defaultValue":{"defaultValue":null,"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"DateValue | DatesRangeValue<DateValue> | DateValue[]"}},"enableKeyboardNavigation":{"defaultValue":null,"description":"Enable enhanced keyboard navigation (Ctrl/Cmd + Arrow keys for year navigation, Ctrl/Cmd + Shift + Arrow keys for decade navigation, Y key to open year view)","name":"enableKeyboardNavigation","required":false,"type":{"name":"boolean"}},"excludeDate":{"defaultValue":null,"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"(date: string) => boolean"}},"firstDayOfWeek":{"defaultValue":"`1` – Monday","description":"Number 0-6, where 0 – Sunday and 6 – Saturday.","name":"firstDayOfWeek","required":false,"type":{"name":"0 | 1 | 2 | 3 | 4 | 5 | 6","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"defaultValue":null,"description":"Assigns <code>aria-label</code> to <code>Day</code> components based on date","name":"getDayAriaLabel","required":false,"type":{"name":"(date: string) => string"}},"getDayProps":{"defaultValue":null,"description":"Passes props down to <code>Day</code> components","name":"getDayProps","required":false,"type":{"name":"(date: string) => Omit<Partial<DayProps>, \\"classNames\\" | \\"styles\\" | \\"vars\\"> & DataAttributes"}},"getMonthControlProps":{"defaultValue":null,"description":"Passes props down month picker control","name":"getMonthControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"getYearControlProps":{"defaultValue":null,"description":"Passes props down to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"headerControlsOrder":{"defaultValue":"`[\'previous\', \'level\', \'next\']`","description":"Controls order","name":"headerControlsOrder","required":false,"type":{"name":"(\\"next\\" | \\"previous\\" | \\"level\\")[]"}},"hideOutsideDates":{"defaultValue":"`false`","description":"Determines whether outside dates should be hidden","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"defaultValue":"`false`","description":"Determines whether weekdays row should be hidden","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"highlightToday":{"defaultValue":"`false`","description":"Determines whether today should be highlighted with a border","name":"highlightToday","required":false,"type":{"name":"boolean"}},"level":{"defaultValue":null,"description":"Current displayed level (controlled)","name":"level","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"defaultValue":null,"description":"Dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"maxDate","required":false,"type":{"name":"string | Date"}},"maxLevel":{"defaultValue":null,"description":"","name":"maxLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"minDate":{"defaultValue":null,"description":"Minimum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"minDate","required":false,"type":{"name":"string | Date"}},"monthLabelFormat":{"defaultValue":"`\\"MMMM YYYY\\"`","description":"dayjs label format to display month label or a function that returns month label based on month value","name":"monthLabelFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"monthsListFormat":{"defaultValue":null,"description":"<code>dayjs</code> format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"defaultValue":null,"description":"Next button <code>aria-label</code>","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":"`1`","description":"Number of columns displayed next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: DatePickerValue<Type, string>) => void"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: string) => void"}},"onLevelChange":{"defaultValue":null,"description":"Called when level changes","name":"onLevelChange","required":false,"type":{"name":"(level: CalendarLevel) => void"}},"onMonthMouseEnter":{"defaultValue":null,"description":"Called when mouse enters month control","name":"onMonthMouseEnter","required":false,"type":{"name":"(event: MouseEvent<HTMLButtonElement, MouseEvent>, date: string) => void"}},"onMonthSelect":{"defaultValue":null,"description":"Called when user selects month","name":"onMonthSelect","required":false,"type":{"name":"(date: string) => void"}},"onNextDecade":{"defaultValue":null,"description":"Called when the next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"(date: string) => void"}},"onNextMonth":{"defaultValue":null,"description":"Called when the next month button is clicked","name":"onNextMonth","required":false,"type":{"name":"(date: string) => void"}},"onNextYear":{"defaultValue":null,"description":"Called when the next year button is clicked","name":"onNextYear","required":false,"type":{"name":"(date: string) => void"}},"onPreviousDecade":{"defaultValue":null,"description":"Called when the previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"(date: string) => void"}},"onPreviousMonth":{"defaultValue":null,"description":"Called when the previous month button is clicked","name":"onPreviousMonth","required":false,"type":{"name":"(date: string) => void"}},"onPreviousYear":{"defaultValue":null,"description":"Called when the previous year button is clicked","name":"onPreviousYear","required":false,"type":{"name":"(date: string) => void"}},"onYearMouseEnter":{"defaultValue":null,"description":"Called when mouse enters year control","name":"onYearMouseEnter","required":false,"type":{"name":"(event: MouseEvent<HTMLButtonElement, MouseEvent>, date: string) => void"}},"onYearSelect":{"defaultValue":null,"description":"Called when user selects year","name":"onYearSelect","required":false,"type":{"name":"(date: string) => void"}},"presets":{"defaultValue":null,"description":"Predefined values to pick from","name":"presets","required":false,"type":{"name":"DatePickerPreset<Type>[]"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"defaultValue":null,"description":"Previous button <code>aria-label</code>","name":"previousLabel","required":false,"type":{"name":"string"}},"renderDay":{"defaultValue":null,"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"(date: string) => React.ReactNode"}},"size":{"defaultValue":null,"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"type":{"defaultValue":null,"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"\\"range\\" | \\"multiple\\" | \\"default\\"","raw":"DatePickerType | undefined","value":[{"value":"undefined"},{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"defaultValue":null,"description":"Value for controlled component","name":"value","required":false,"type":{"name":"DateValue | DatesRangeValue<DateValue> | DateValue[]"}},"weekdayFormat":{"defaultValue":"`\'dd\'`","description":"<code>dayjs</code> format for weekdays names","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"weekendDays":{"defaultValue":null,"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday. The default value is defined by <code>DatesProvider</code>.","name":"weekendDays","required":false,"type":{"name":"(0 | 1 | 2 | 3 | 4 | 5 | 6)[]"}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withWeekNumbers":{"defaultValue":"`false`","description":"Determines whether week numbers should be displayed","name":"withWeekNumbers","required":false,"type":{"name":"boolean"}},"yearLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"dayjs label format to display year label or a function that returns year label based on year value","name":"yearLabelFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"yearsListFormat":{"defaultValue":"`\'YYYY\'`","description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"DatePickerInput":{"props":{"allowDeselect":{"defaultValue":null,"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"defaultValue":null,"description":"Determines whether a single day can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"defaultValue":null,"description":"<code>aria-label</code> attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"clearButtonProps":{"defaultValue":null,"description":"Props passed down to the clear button","name":"clearButtonProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"clearable":{"defaultValue":"`false`","description":"If set, clear button is displayed in the <code>rightSection</code> when the component has value. Ignored if <code>rightSection</code> prop is set.","name":"clearable","required":false,"type":{"name":"boolean"}},"closeOnChange":{"defaultValue":"`true`","description":"Determines whether the dropdown is closed when date is selected, not applicable with <code>type=\\"multiple\\"</code>","name":"closeOnChange","required":false,"type":{"name":"boolean"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll with next/prev buttons, same as <code>numberOfColumns</code> if not set explicitly","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Displayed date in controlled mode","name":"date","required":false,"type":{"name":"string | Date"}},"decadeLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"<code>dayjs</code> format for decade label or a function that returns decade label based on the date value","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: string, endOfDecade: string) => ReactNode)"}},"defaultDate":{"defaultValue":null,"description":"Initial displayed date in uncontrolled mode","name":"defaultDate","required":false,"type":{"name":"string | Date"}},"defaultLevel":{"defaultValue":null,"description":"Initial displayed level (uncontrolled)","name":"defaultLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"defaultValue":{"defaultValue":null,"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"DateValue | DatesRangeValue<DateValue> | DateValue[]"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownType":{"defaultValue":"`\'popover\'`","description":"Type of the dropdown","name":"dropdownType","required":false,"type":{"name":"\\"popover\\" | \\"modal\\"","raw":"\\"popover\\" | \\"modal\\" | undefined","value":[{"value":"undefined"},{"value":"\\"popover\\""},{"value":"\\"modal\\""}]}},"enableKeyboardNavigation":{"defaultValue":null,"description":"Enable enhanced keyboard navigation (Ctrl/Cmd + Arrow keys for year navigation, Ctrl/Cmd + Shift + Arrow keys for decade navigation, Y key to open year view)","name":"enableKeyboardNavigation","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"excludeDate":{"defaultValue":null,"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"(date: string) => boolean"}},"firstDayOfWeek":{"defaultValue":"`1` – Monday","description":"Number 0-6, where 0 – Sunday and 6 – Saturday.","name":"firstDayOfWeek","required":false,"type":{"name":"0 | 1 | 2 | 3 | 4 | 5 | 6","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"defaultValue":null,"description":"Assigns <code>aria-label</code> to <code>Day</code> components based on date","name":"getDayAriaLabel","required":false,"type":{"name":"(date: string) => string"}},"getDayProps":{"defaultValue":null,"description":"Passes props down to <code>Day</code> components","name":"getDayProps","required":false,"type":{"name":"(date: string) => Omit<Partial<DayProps>, \\"classNames\\" | \\"styles\\" | \\"vars\\"> & DataAttributes"}},"getMonthControlProps":{"defaultValue":null,"description":"Passes props down month picker control","name":"getMonthControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"getYearControlProps":{"defaultValue":null,"description":"Passes props down to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"headerControlsOrder":{"defaultValue":"`[\'previous\', \'level\', \'next\']`","description":"Controls order","name":"headerControlsOrder","required":false,"type":{"name":"(\\"next\\" | \\"previous\\" | \\"level\\")[]"}},"hideOutsideDates":{"defaultValue":"`false`","description":"Determines whether outside dates should be hidden","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"defaultValue":"`false`","description":"Determines whether weekdays row should be hidden","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"highlightToday":{"defaultValue":"`false`","description":"Determines whether today should be highlighted with a border","name":"highlightToday","required":false,"type":{"name":"boolean"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"labelSeparator":{"defaultValue":null,"description":"Separator between range value","name":"labelSeparator","required":false,"type":{"name":"string"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"level":{"defaultValue":null,"description":"Current displayed level (controlled)","name":"level","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"defaultValue":null,"description":"Dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"maxDate","required":false,"type":{"name":"string | Date"}},"maxLevel":{"defaultValue":null,"description":"","name":"maxLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"minDate":{"defaultValue":null,"description":"Minimum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"minDate","required":false,"type":{"name":"string | Date"}},"modalProps":{"defaultValue":null,"description":"Props passed down to <code>Modal</code> component","name":"modalProps","required":false,"type":{"name":"Partial<Omit<ModalProps, \\"children\\">>"}},"monthLabelFormat":{"defaultValue":"`\\"MMMM YYYY\\"`","description":"dayjs label format to display month label or a function that returns month label based on month value","name":"monthLabelFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"monthsListFormat":{"defaultValue":null,"description":"<code>dayjs</code> format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"defaultValue":null,"description":"Next button <code>aria-label</code>","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":"`1`","description":"Number of columns displayed next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: DatePickerValue<Type, string>) => void"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: string) => void"}},"onDropdownClose":{"defaultValue":null,"description":"Called when the dropdown is closed","name":"onDropdownClose","required":false,"type":{"name":"() => void"}},"onLevelChange":{"defaultValue":null,"description":"Called when level changes","name":"onLevelChange","required":false,"type":{"name":"(level: CalendarLevel) => void"}},"onMonthMouseEnter":{"defaultValue":null,"description":"Called when mouse enters month control","name":"onMonthMouseEnter","required":false,"type":{"name":"(event: MouseEvent<HTMLButtonElement, MouseEvent>, date: string) => void"}},"onMonthSelect":{"defaultValue":null,"description":"Called when user selects month","name":"onMonthSelect","required":false,"type":{"name":"(date: string) => void"}},"onNextDecade":{"defaultValue":null,"description":"Called when the next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"(date: string) => void"}},"onNextMonth":{"defaultValue":null,"description":"Called when the next month button is clicked","name":"onNextMonth","required":false,"type":{"name":"(date: string) => void"}},"onNextYear":{"defaultValue":null,"description":"Called when the next year button is clicked","name":"onNextYear","required":false,"type":{"name":"(date: string) => void"}},"onPreviousDecade":{"defaultValue":null,"description":"Called when the previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"(date: string) => void"}},"onPreviousMonth":{"defaultValue":null,"description":"Called when the previous month button is clicked","name":"onPreviousMonth","required":false,"type":{"name":"(date: string) => void"}},"onPreviousYear":{"defaultValue":null,"description":"Called when the previous year button is clicked","name":"onPreviousYear","required":false,"type":{"name":"(date: string) => void"}},"onYearMouseEnter":{"defaultValue":null,"description":"Called when mouse enters year control","name":"onYearMouseEnter","required":false,"type":{"name":"(event: MouseEvent<HTMLButtonElement, MouseEvent>, date: string) => void"}},"onYearSelect":{"defaultValue":null,"description":"Called when user selects year","name":"onYearSelect","required":false,"type":{"name":"(date: string) => void"}},"placeholder":{"defaultValue":null,"description":"Input placeholder","name":"placeholder","required":false,"type":{"name":"string"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"popoverProps":{"defaultValue":null,"description":"Props passed down to <code>Popover</code> component","name":"popoverProps","required":false,"type":{"name":"Partial<Omit<PopoverProps, \\"children\\">>"}},"presets":{"defaultValue":null,"description":"Predefined values to pick from","name":"presets","required":false,"type":{"name":"DatePickerPreset<Type>[]"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"defaultValue":null,"description":"Previous button <code>aria-label</code>","name":"previousLabel","required":false,"type":{"name":"string"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"defaultValue":null,"description":"If set, the component value cannot be changed by the user","name":"readOnly","required":false,"type":{"name":"boolean"}},"renderDay":{"defaultValue":null,"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"(date: string) => React.ReactNode"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":null,"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"sortDates":{"defaultValue":"`true`","description":"Determines whether dates values should be sorted before <code>onChange</code> call, only applicable with type=\\"multiple\\"","name":"sortDates","required":false,"type":{"name":"boolean"}},"type":{"defaultValue":null,"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"\\"range\\" | \\"multiple\\" | \\"default\\"","raw":"DatePickerType | undefined","value":[{"value":"undefined"},{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"defaultValue":null,"description":"Value for controlled component","name":"value","required":false,"type":{"name":"DateValue | DatesRangeValue<DateValue> | DateValue[]"}},"valueFormat":{"defaultValue":"`\\"MMMM D, YYYY\\"`","description":"<code>dayjs</code> format for input value","name":"valueFormat","required":false,"type":{"name":"string"}},"valueFormatter":{"defaultValue":null,"description":"A function to format selected dates values into a string. By default, date is formatted based on the input type.","name":"valueFormatter","required":false,"type":{"name":"DateFormatter"}},"weekdayFormat":{"defaultValue":"`\'dd\'`","description":"<code>dayjs</code> format for weekdays names","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"weekendDays":{"defaultValue":null,"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday. The default value is defined by <code>DatesProvider</code>.","name":"weekendDays","required":false,"type":{"name":"(0 | 1 | 2 | 3 | 4 | 5 | 6)[]"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withWeekNumbers":{"defaultValue":"`false`","description":"Determines whether week numbers should be displayed","name":"withWeekNumbers","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}},"yearLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"dayjs label format to display year label or a function that returns year label based on year value","name":"yearLabelFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"yearsListFormat":{"defaultValue":"`\'YYYY\'`","description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"DateTimePicker":{"props":{"ariaLabels":{"defaultValue":null,"description":"<code>aria-label</code> attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"clearButtonProps":{"defaultValue":null,"description":"Props passed down to the clear button","name":"clearButtonProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"clearable":{"defaultValue":"`false`","description":"If set, clear button is displayed in the <code>rightSection</code> when the component has value. Ignored if <code>rightSection</code> prop is set.","name":"clearable","required":false,"type":{"name":"boolean"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll with next/prev buttons, same as <code>numberOfColumns</code> if not set explicitly","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Displayed date in controlled mode","name":"date","required":false,"type":{"name":"string | Date"}},"decadeLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"<code>dayjs</code> format for decade label or a function that returns decade label based on the date value","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: string, endOfDecade: string) => ReactNode)"}},"defaultDate":{"defaultValue":null,"description":"Initial displayed date in uncontrolled mode","name":"defaultDate","required":false,"type":{"name":"string | Date"}},"defaultLevel":{"defaultValue":null,"description":"Initial displayed level in uncontrolled mode","name":"defaultLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"defaultTimeValue":{"defaultValue":null,"description":"Default time value in <code>HH:mm</code> or <code>HH:mm:ss</code> format. Assigned to time when date is selected.","name":"defaultTimeValue","required":false,"type":{"name":"string"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"DateValue"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownType":{"defaultValue":"`\'popover\'`","description":"Type of the dropdown","name":"dropdownType","required":false,"type":{"name":"\\"popover\\" | \\"modal\\"","raw":"\\"popover\\" | \\"modal\\" | undefined","value":[{"value":"undefined"},{"value":"\\"popover\\""},{"value":"\\"modal\\""}]}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"excludeDate":{"defaultValue":null,"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"(date: string) => boolean"}},"firstDayOfWeek":{"defaultValue":"`1` – Monday","description":"Number 0-6, where 0 – Sunday and 6 – Saturday.","name":"firstDayOfWeek","required":false,"type":{"name":"0 | 1 | 2 | 3 | 4 | 5 | 6","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"defaultValue":null,"description":"Assigns <code>aria-label</code> to <code>Day</code> components based on date","name":"getDayAriaLabel","required":false,"type":{"name":"(date: string) => string"}},"getDayProps":{"defaultValue":null,"description":"Passes props down to <code>Day</code> components","name":"getDayProps","required":false,"type":{"name":"(date: string) => Omit<Partial<DayProps>, \\"classNames\\" | \\"styles\\" | \\"vars\\"> & DataAttributes"}},"getMonthControlProps":{"defaultValue":null,"description":"Passes props down month picker control","name":"getMonthControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"getYearControlProps":{"defaultValue":null,"description":"Passes props down to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"headerControlsOrder":{"defaultValue":"`[\'previous\', \'level\', \'next\']`","description":"Controls order","name":"headerControlsOrder","required":false,"type":{"name":"(\\"next\\" | \\"previous\\" | \\"level\\")[]"}},"hideOutsideDates":{"defaultValue":"`false`","description":"Determines whether outside dates should be hidden","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"defaultValue":"`false`","description":"Determines whether weekdays row should be hidden","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"highlightToday":{"defaultValue":"`false`","description":"Determines whether today should be highlighted with a border","name":"highlightToday","required":false,"type":{"name":"boolean"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"labelSeparator":{"defaultValue":null,"description":"Separator between range value","name":"labelSeparator","required":false,"type":{"name":"string"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"level":{"defaultValue":null,"description":"Current displayed level displayed in controlled mode","name":"level","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"defaultValue":null,"description":"Dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"maxDate","required":false,"type":{"name":"string | Date"}},"maxLevel":{"defaultValue":"`\'decade\'`","description":"Max level that user can go up to","name":"maxLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"minDate":{"defaultValue":null,"description":"Minimum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"minDate","required":false,"type":{"name":"string | Date"}},"modalProps":{"defaultValue":null,"description":"Props passed down to <code>Modal</code> component","name":"modalProps","required":false,"type":{"name":"Partial<Omit<ModalProps, \\"children\\">>"}},"monthLabelFormat":{"defaultValue":"`\\"MMMM YYYY\\"`","description":"dayjs label format to display month label or a function that returns month label based on month value","name":"monthLabelFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"monthsListFormat":{"defaultValue":null,"description":"<code>dayjs</code> format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"defaultValue":null,"description":"Next button <code>aria-label</code>","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":"`1`","description":"Number of columns displayed next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: string | null) => void"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: string) => void"}},"onDropdownClose":{"defaultValue":null,"description":"Called when the dropdown is closed","name":"onDropdownClose","required":false,"type":{"name":"() => void"}},"onLevelChange":{"defaultValue":null,"description":"Called when level changes","name":"onLevelChange","required":false,"type":{"name":"(level: CalendarLevel) => void"}},"onMonthSelect":{"defaultValue":null,"description":"Called when user selects month","name":"onMonthSelect","required":false,"type":{"name":"(date: string) => void"}},"onNextDecade":{"defaultValue":null,"description":"Called when the next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"(date: string) => void"}},"onNextMonth":{"defaultValue":null,"description":"Called when the next month button is clicked","name":"onNextMonth","required":false,"type":{"name":"(date: string) => void"}},"onNextYear":{"defaultValue":null,"description":"Called when the next year button is clicked","name":"onNextYear","required":false,"type":{"name":"(date: string) => void"}},"onPreviousDecade":{"defaultValue":null,"description":"Called when the previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"(date: string) => void"}},"onPreviousMonth":{"defaultValue":null,"description":"Called when the previous month button is clicked","name":"onPreviousMonth","required":false,"type":{"name":"(date: string) => void"}},"onPreviousYear":{"defaultValue":null,"description":"Called when the previous year button is clicked","name":"onPreviousYear","required":false,"type":{"name":"(date: string) => void"}},"onYearSelect":{"defaultValue":null,"description":"Called when user selects year","name":"onYearSelect","required":false,"type":{"name":"(date: string) => void"}},"placeholder":{"defaultValue":null,"description":"Input placeholder","name":"placeholder","required":false,"type":{"name":"string"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"popoverProps":{"defaultValue":null,"description":"Props passed down to <code>Popover</code> component","name":"popoverProps","required":false,"type":{"name":"Partial<Omit<PopoverProps, \\"children\\">>"}},"presets":{"defaultValue":null,"description":"Presets values","name":"presets","required":false,"type":{"name":"DatePickerPreset<\\"default\\">[]"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"defaultValue":null,"description":"Previous button <code>aria-label</code>","name":"previousLabel","required":false,"type":{"name":"string"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"defaultValue":null,"description":"If set, the component value cannot be changed by the user","name":"readOnly","required":false,"type":{"name":"boolean"}},"renderDay":{"defaultValue":null,"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"(date: string) => React.ReactNode"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":null,"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"sortDates":{"defaultValue":"`true`","description":"Determines whether dates values should be sorted before <code>onChange</code> call, only applicable with type=\\"multiple\\"","name":"sortDates","required":false,"type":{"name":"boolean"}},"submitButtonProps":{"defaultValue":null,"description":"Props passed down to the submit button","name":"submitButtonProps","required":false,"type":{"name":"ActionIconProps & Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \\"ref\\">"}},"timePickerProps":{"defaultValue":null,"description":"Props passed down to <code>TimePicker</code> component","name":"timePickerProps","required":false,"type":{"name":"Omit<TimePickerProps, \\"defaultValue\\" | \\"value\\">"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"DateValue"}},"valueFormat":{"defaultValue":"`\\"DD/MM/YYYY HH:mm\\"","description":"<code>dayjs</code> format for input value","name":"valueFormat","required":false,"type":{"name":"string"}},"weekdayFormat":{"defaultValue":"`\'dd\'`","description":"<code>dayjs</code> format for weekdays names","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"weekendDays":{"defaultValue":null,"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday. The default value is defined by <code>DatesProvider</code>.","name":"weekendDays","required":false,"type":{"name":"(0 | 1 | 2 | 3 | 4 | 5 | 6)[]"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withSeconds":{"defaultValue":"`false`","description":"Determines whether the seconds input should be displayed","name":"withSeconds","required":false,"type":{"name":"boolean"}},"withWeekNumbers":{"defaultValue":"`false`","description":"Determines whether week numbers should be displayed","name":"withWeekNumbers","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}},"yearLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"dayjs label format to display year label or a function that returns year label based on year value","name":"yearLabelFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"yearsListFormat":{"defaultValue":"`\'YYYY\'`","description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"DatesProvider":{"props":{"settings":{"defaultValue":null,"description":"","name":"settings","required":true,"type":{"name":"Partial<DatesProviderValue>"}}}},"DatesProviderContext":{"description":"","props":{}},"Day":{"props":{"date":{"defaultValue":null,"description":"Date that is displayed in <code>YYYY-MM-DD</code> format","name":"date","required":true,"type":{"name":"string"}},"firstInRange":{"defaultValue":"`false`","description":"Determines whether the day is first in range selection","name":"firstInRange","required":false,"type":{"name":"boolean"}},"hidden":{"defaultValue":"`false`","description":"Determines whether the day should not be displayed","name":"hidden","required":false,"type":{"name":"boolean"}},"highlightToday":{"defaultValue":"`false`","description":"Determines whether today should be highlighted with a border","name":"highlightToday","required":false,"type":{"name":"boolean"}},"inRange":{"defaultValue":"`false`","description":"Determines whether the day is selected in range","name":"inRange","required":false,"type":{"name":"boolean"}},"lastInRange":{"defaultValue":"`false`","description":"Determines whether the day is last in range selection","name":"lastInRange","required":false,"type":{"name":"boolean"}},"outside":{"defaultValue":"`false`","description":"Determines whether the day is outside of the current month","name":"outside","required":false,"type":{"name":"boolean"}},"renderDay":{"defaultValue":null,"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"(date: string) => React.ReactNode"}},"selected":{"defaultValue":"`false`","description":"Determines whether the day is selected","name":"selected","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":"`\'sm\'`","description":"Control width and height of the day","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"static":{"defaultValue":null,"description":"Determines which element is used as root, <code>\'button\'</code> by default, <code>\'div\'</code> if static prop is set","name":"static","required":false,"type":{"name":"boolean"}},"weekend":{"defaultValue":"`false`","description":"Determines whether the day is considered to be a weekend","name":"weekend","required":false,"type":{"name":"boolean"}}}},"DecadeLevel":{"props":{"decade":{"defaultValue":null,"description":"Displayed decade","name":"decade","required":true,"type":{"name":"string"}},"decadeLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"<code>dayjs</code> format for decade label or a function that returns decade label based on the date value","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: string, endOfDecade: string) => ReactNode)"}},"getYearControlProps":{"defaultValue":null,"description":"Passes props down to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"headerControlsOrder":{"defaultValue":"`[\'previous\', \'level\', \'next\']`","description":"Controls order","name":"headerControlsOrder","required":false,"type":{"name":"(\\"next\\" | \\"previous\\" | \\"level\\")[]"}},"levelControlAriaLabel":{"defaultValue":null,"description":"Level control <code>aria-label</code>","name":"levelControlAriaLabel","required":false,"type":{"name":"string"}},"locale":{"defaultValue":null,"description":"Dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"maxDate","required":false,"type":{"name":"string | Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"minDate","required":false,"type":{"name":"string | Date"}},"nextDisabled":{"defaultValue":null,"description":"Disables next control","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"defaultValue":null,"description":"Next button <code>aria-label</code>","name":"nextLabel","required":false,"type":{"name":"string"}},"onNext":{"defaultValue":null,"description":"Called when the next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onPrevious":{"defaultValue":null,"description":"Called when the previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"previousDisabled":{"defaultValue":null,"description":"Disables previous control","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"defaultValue":null,"description":"Previous button <code>aria-label</code>","name":"previousLabel","required":false,"type":{"name":"string"}},"size":{"defaultValue":null,"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withNext":{"defaultValue":"`true`","description":"Determines whether next control should be rendered","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"defaultValue":"`true`","description":"Determines whether previous control should be rendered","name":"withPrevious","required":false,"type":{"name":"boolean"}},"yearsListFormat":{"defaultValue":"`\'YYYY\'`","description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"DecadeLevelGroup":{"props":{"decade":{"defaultValue":null,"description":"Displayed decade","name":"decade","required":true,"type":{"name":"string"}},"decadeLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"<code>dayjs</code> format for decade label or a function that returns decade label based on the date value","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: string, endOfDecade: string) => ReactNode)"}},"getYearControlProps":{"defaultValue":null,"description":"Passes props down to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"headerControlsOrder":{"defaultValue":"`[\'previous\', \'level\', \'next\']`","description":"Controls order","name":"headerControlsOrder","required":false,"type":{"name":"(\\"next\\" | \\"previous\\" | \\"level\\")[]"}},"levelControlAriaLabel":{"defaultValue":null,"description":"Function that returns level control <code>aria-label</code> based on year date","name":"levelControlAriaLabel","required":false,"type":{"name":"string | ((decade: string) => string)"}},"locale":{"defaultValue":null,"description":"Dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"maxDate","required":false,"type":{"name":"string | Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"minDate","required":false,"type":{"name":"string | Date"}},"nextDisabled":{"defaultValue":null,"description":"Disables next control","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"defaultValue":null,"description":"Next button <code>aria-label</code>","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":null,"description":"Number of columns to display next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onNext":{"defaultValue":null,"description":"Called when the next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onPrevious":{"defaultValue":null,"description":"Called when the previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"previousDisabled":{"defaultValue":null,"description":"Disables previous control","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"defaultValue":null,"description":"Previous button <code>aria-label</code>","name":"previousLabel","required":false,"type":{"name":"string"}},"size":{"defaultValue":null,"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"yearsListFormat":{"defaultValue":"`\'YYYY\'`","description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"HiddenDatesInput":{"props":{"form":{"defaultValue":null,"description":"","name":"form","required":true,"type":{"name":"string"}},"name":{"defaultValue":null,"description":"","name":"name","required":true,"type":{"name":"string"}},"type":{"defaultValue":null,"description":"","name":"type","required":true,"type":{"name":"DatePickerType","raw":"DatePickerType","value":[{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"defaultValue":null,"description":"","name":"value","required":true,"type":{"name":"HiddenDatesInputValue"}},"withTime":{"defaultValue":"false","description":"","name":"withTime","required":false,"type":{"name":"boolean"}}}},"LevelsGroup":{"props":{"size":{"defaultValue":null,"description":"","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}}}},"MiniCalendar":{"props":{"date":{"defaultValue":null,"description":"Controlled component date value, start date of the interval","name":"date","required":false,"type":{"name":"string | Date"}},"defaultDate":{"defaultValue":null,"description":"Uncontrolled component default value, start date of the interval","name":"defaultDate","required":false,"type":{"name":"string | Date"}},"getDayProps":{"defaultValue":null,"description":"Props passed down to the day component","name":"getDayProps","required":false,"type":{"name":"(date: string) => Record<string, any>"}},"locale":{"defaultValue":null,"description":"dayjs locale used for formatting","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum date that can be selected, date object or date string in <code>YYYY-MM-DD</code> format","name":"maxDate","required":false,"type":{"name":"string | Date"}},"minDate":{"defaultValue":null,"description":"Minimum date that can be selected, date object or date string in <code>YYYY-MM-DD</code> format","name":"minDate","required":false,"type":{"name":"string | Date"}},"monthLabelFormat":{"defaultValue":"`MMM`","description":"Dayjs format string for month label","name":"monthLabelFormat","required":false,"type":{"name":"string"}},"nextControlProps":{"defaultValue":null,"description":"Props passed to next control button","name":"nextControlProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \\"ref\\"> & DataAttributes"}},"numberOfDays":{"defaultValue":"7","description":"Number of days to display in the calendar","name":"numberOfDays","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called with date in <code>YYYY-MM-DD</code> format when date changes","name":"onChange","required":false,"type":{"name":"(date: string) => void"}},"onDateChange":{"defaultValue":null,"description":"Called with date in <code>YYYY-MM-DD</code> format when date internal changes","name":"onDateChange","required":false,"type":{"name":"(date: string) => void"}},"onNext":{"defaultValue":null,"description":"Called when the next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onPrevious":{"defaultValue":null,"description":"Called when the previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"previousControlProps":{"defaultValue":null,"description":"Props passed to previous control button","name":"previousControlProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \\"ref\\"> & DataAttributes"}},"size":{"defaultValue":"\'sm\'","description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"value":{"defaultValue":null,"description":"Selected date, controlled value","name":"value","required":false,"type":{"name":"string | Date | null"}}}},"Month":{"props":{"excludeDate":{"defaultValue":null,"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"(date: string) => boolean"}},"firstDayOfWeek":{"defaultValue":"`1` – Monday","description":"Number 0-6, where 0 – Sunday and 6 – Saturday.","name":"firstDayOfWeek","required":false,"type":{"name":"0 | 1 | 2 | 3 | 4 | 5 | 6","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"defaultValue":null,"description":"Assigns <code>aria-label</code> to <code>Day</code> components based on date","name":"getDayAriaLabel","required":false,"type":{"name":"(date: string) => string"}},"getDayProps":{"defaultValue":null,"description":"Passes props down to <code>Day</code> components","name":"getDayProps","required":false,"type":{"name":"(date: string) => Omit<Partial<DayProps>, \\"classNames\\" | \\"styles\\" | \\"vars\\"> & DataAttributes"}},"hideOutsideDates":{"defaultValue":"`false`","description":"Determines whether outside dates should be hidden","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"defaultValue":"`false`","description":"Determines whether weekdays row should be hidden","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"highlightToday":{"defaultValue":"`false`","description":"Determines whether today should be highlighted with a border","name":"highlightToday","required":false,"type":{"name":"boolean"}},"locale":{"defaultValue":null,"description":"<code>dayjs</code> locale, the default value is defined by <code>DatesProvider</code>","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date, in <code>YYYY-MM-DD</code> format","name":"maxDate","required":false,"type":{"name":"string | Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date, in <code>YYYY-MM-DD</code> format","name":"minDate","required":false,"type":{"name":"string | Date"}},"month":{"defaultValue":null,"description":"Month to display, value <code>YYYY-MM-DD</code>","name":"month","required":true,"type":{"name":"string"}},"renderDay":{"defaultValue":null,"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"(date: string) => React.ReactNode"}},"size":{"defaultValue":null,"description":"Controls size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"static":{"defaultValue":null,"description":"Determines whether days should be static, static days can be used to display month if it is not expected that user will interact with the component in any way","name":"static","required":false,"type":{"name":"boolean"}},"weekdayFormat":{"defaultValue":"`\'dd\'`","description":"<code>dayjs</code> format for weekdays names","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"weekendDays":{"defaultValue":null,"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday. The default value is defined by <code>DatesProvider</code>.","name":"weekendDays","required":false,"type":{"name":"(0 | 1 | 2 | 3 | 4 | 5 | 6)[]"}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated by space","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withWeekNumbers":{"defaultValue":"`false`","description":"Determines whether week numbers should be displayed","name":"withWeekNumbers","required":false,"type":{"name":"boolean"}}}},"MonthLevel":{"props":{"excludeDate":{"defaultValue":null,"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"(date: string) => boolean"}},"firstDayOfWeek":{"defaultValue":"`1` – Monday","description":"Number 0-6, where 0 – Sunday and 6 – Saturday.","name":"firstDayOfWeek","required":false,"type":{"name":"0 | 1 | 2 | 3 | 4 | 5 | 6","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"defaultValue":null,"description":"Assigns <code>aria-label</code> to <code>Day</code> components based on date","name":"getDayAriaLabel","required":false,"type":{"name":"(date: string) => string"}},"getDayProps":{"defaultValue":null,"description":"Passes props down to <code>Day</code> components","name":"getDayProps","required":false,"type":{"name":"(date: string) => Omit<Partial<DayProps>, \\"classNames\\" | \\"styles\\" | \\"vars\\"> & DataAttributes"}},"hasNextLevel":{"defaultValue":"`true`","description":"Determines whether next level button should be enabled","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"headerControlsOrder":{"defaultValue":"`[\'previous\', \'level\', \'next\']`","description":"Controls order","name":"headerControlsOrder","required":false,"type":{"name":"(\\"next\\" | \\"previous\\" | \\"level\\")[]"}},"hideOutsideDates":{"defaultValue":"`false`","description":"Determines whether outside dates should be hidden","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"defaultValue":"`false`","description":"Determines whether weekdays row should be hidden","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"highlightToday":{"defaultValue":"`false`","description":"Determines whether today should be highlighted with a border","name":"highlightToday","required":false,"type":{"name":"boolean"}},"levelControlAriaLabel":{"defaultValue":null,"description":"Aria-label for change level control","name":"levelControlAriaLabel","required":false,"type":{"name":"string"}},"locale":{"defaultValue":null,"description":"<code>dayjs</code> locale, the default value is defined by <code>DatesProvider</code>","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date, in <code>YYYY-MM-DD</code> format","name":"maxDate","required":false,"type":{"name":"string | Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date, in <code>YYYY-MM-DD</code> format","name":"minDate","required":false,"type":{"name":"string | Date"}},"month":{"defaultValue":null,"description":"Month that is currently displayed","name":"month","required":true,"type":{"name":"string"}},"monthLabelFormat":{"defaultValue":"`\\"MMMM YYYY\\"`","description":"dayjs label format to display month label or a function that returns month label based on month value","name":"monthLabelFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"nextDisabled":{"defaultValue":null,"description":"Disables next control","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"defaultValue":null,"description":"Next button <code>aria-label</code>","name":"nextLabel","required":false,"type":{"name":"string"}},"onLevelClick":{"defaultValue":null,"description":"Called when the level button is clicked","name":"onLevelClick","required":false,"type":{"name":"() => void"}},"onNext":{"defaultValue":null,"description":"Called when the next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onPrevious":{"defaultValue":null,"description":"Called when the previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"previousDisabled":{"defaultValue":null,"description":"Disables previous control","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"defaultValue":null,"description":"Previous button <code>aria-label</code>","name":"previousLabel","required":false,"type":{"name":"string"}},"renderDay":{"defaultValue":null,"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"(date: string) => React.ReactNode"}},"size":{"defaultValue":null,"description":"Controls size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"static":{"defaultValue":null,"description":"Determines whether days should be static, static days can be used to display month if it is not expected that user will interact with the component in any way","name":"static","required":false,"type":{"name":"boolean"}},"weekdayFormat":{"defaultValue":"`\'dd\'`","description":"<code>dayjs</code> format for weekdays names","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"weekendDays":{"defaultValue":null,"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday. The default value is defined by <code>DatesProvider</code>.","name":"weekendDays","required":false,"type":{"name":"(0 | 1 | 2 | 3 | 4 | 5 | 6)[]"}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated by space","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withNext":{"defaultValue":"`true`","description":"Determines whether next control should be rendered","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"defaultValue":"`true`","description":"Determines whether previous control should be rendered","name":"withPrevious","required":false,"type":{"name":"boolean"}},"withWeekNumbers":{"defaultValue":"`false`","description":"Determines whether week numbers should be displayed","name":"withWeekNumbers","required":false,"type":{"name":"boolean"}}}},"MonthLevelGroup":{"props":{"excludeDate":{"defaultValue":null,"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"(date: string) => boolean"}},"firstDayOfWeek":{"defaultValue":"`1` – Monday","description":"Number 0-6, where 0 – Sunday and 6 – Saturday.","name":"firstDayOfWeek","required":false,"type":{"name":"0 | 1 | 2 | 3 | 4 | 5 | 6","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"defaultValue":null,"description":"Assigns <code>aria-label</code> to <code>Day</code> components based on date","name":"getDayAriaLabel","required":false,"type":{"name":"(date: string) => string"}},"getDayProps":{"defaultValue":null,"description":"Passes props down to <code>Day</code> components","name":"getDayProps","required":false,"type":{"name":"(date: string) => Omit<Partial<DayProps>, \\"classNames\\" | \\"styles\\" | \\"vars\\"> & DataAttributes"}},"hasNextLevel":{"defaultValue":"`true`","description":"Determines whether next level button should be enabled","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"headerControlsOrder":{"defaultValue":"`[\'previous\', \'level\', \'next\']`","description":"Controls order","name":"headerControlsOrder","required":false,"type":{"name":"(\\"next\\" | \\"previous\\" | \\"level\\")[]"}},"hideOutsideDates":{"defaultValue":"`false`","description":"Determines whether outside dates should be hidden","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"defaultValue":"`false`","description":"Determines whether weekdays row should be hidden","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"highlightToday":{"defaultValue":"`false`","description":"Determines whether today should be highlighted with a border","name":"highlightToday","required":false,"type":{"name":"boolean"}},"levelControlAriaLabel":{"defaultValue":null,"description":"Function that returns level control <code>aria-label</code> based on month date","name":"levelControlAriaLabel","required":false,"type":{"name":"string | ((month: string) => string)"}},"locale":{"defaultValue":null,"description":"<code>dayjs</code> locale, the default value is defined by <code>DatesProvider</code>","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date, in <code>YYYY-MM-DD</code> format","name":"maxDate","required":false,"type":{"name":"string | Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date, in <code>YYYY-MM-DD</code> format","name":"minDate","required":false,"type":{"name":"string | Date"}},"month":{"defaultValue":null,"description":"Month to display","name":"month","required":true,"type":{"name":"string"}},"monthLabelFormat":{"defaultValue":"`\\"MMMM YYYY\\"`","description":"dayjs label format to display month label or a function that returns month label based on month value","name":"monthLabelFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"nextDisabled":{"defaultValue":null,"description":"Disables next control","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"defaultValue":null,"description":"Next button <code>aria-label</code>","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":null,"description":"Number of columns to display next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onLevelClick":{"defaultValue":null,"description":"Called when the level button is clicked","name":"onLevelClick","required":false,"type":{"name":"() => void"}},"onNext":{"defaultValue":null,"description":"Called when the next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onPrevious":{"defaultValue":null,"description":"Called when the previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"previousDisabled":{"defaultValue":null,"description":"Disables previous control","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"defaultValue":null,"description":"Previous button <code>aria-label</code>","name":"previousLabel","required":false,"type":{"name":"string"}},"renderDay":{"defaultValue":null,"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"(date: string) => React.ReactNode"}},"size":{"defaultValue":null,"description":"Controls size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"static":{"defaultValue":null,"description":"Passed as <code>isStatic</code> prop to <code>Month</code> component","name":"static","required":false,"type":{"name":"boolean"}},"weekdayFormat":{"defaultValue":"`\'dd\'`","description":"<code>dayjs</code> format for weekdays names","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"weekendDays":{"defaultValue":null,"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday. The default value is defined by <code>DatesProvider</code>.","name":"weekendDays","required":false,"type":{"name":"(0 | 1 | 2 | 3 | 4 | 5 | 6)[]"}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated by space","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withWeekNumbers":{"defaultValue":"`false`","description":"Determines whether week numbers should be displayed","name":"withWeekNumbers","required":false,"type":{"name":"boolean"}}}},"MonthPicker":{"props":{"allowDeselect":{"defaultValue":null,"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"defaultValue":null,"description":"Determines whether a single day can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"defaultValue":null,"description":"<code>aria-label</code> attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll with next/prev buttons, same as <code>numberOfColumns</code> if not set explicitly","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Displayed date in controlled mode","name":"date","required":false,"type":{"name":"string | Date"}},"decadeLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"<code>dayjs</code> format for decade label or a function that returns decade label based on the date value","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: string, endOfDecade: string) => ReactNode)"}},"defaultDate":{"defaultValue":null,"description":"Initial displayed date in uncontrolled mode","name":"defaultDate","required":false,"type":{"name":"string | Date"}},"defaultLevel":{"defaultValue":null,"description":"Initial displayed level (uncontrolled)","name":"defaultLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"defaultValue":{"defaultValue":null,"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"DateValue | DatesRangeValue<DateValue> | DateValue[]"}},"getMonthControlProps":{"defaultValue":null,"description":"Passes props down month picker control","name":"getMonthControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"getYearControlProps":{"defaultValue":null,"description":"Passes props down to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"level":{"defaultValue":null,"description":"Current displayed level (controlled)","name":"level","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"defaultValue":null,"description":"Dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"maxDate","required":false,"type":{"name":"string | Date"}},"maxLevel":{"defaultValue":"`\'decade\'`","description":"Max level that user can go up to","name":"maxLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"minDate":{"defaultValue":null,"description":"Minimum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"minDate","required":false,"type":{"name":"string | Date"}},"monthsListFormat":{"defaultValue":null,"description":"<code>dayjs</code> format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextLabel":{"defaultValue":null,"description":"Next button <code>aria-label</code>","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":"`1`","description":"Number of columns displayed next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: DatePickerValue<Type, string>) => void"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: string) => void"}},"onLevelChange":{"defaultValue":null,"description":"Called when level changes","name":"onLevelChange","required":false,"type":{"name":"(level: MonthPickerLevel) => void"}},"onMonthSelect":{"defaultValue":null,"description":"Called when month is selected","name":"onMonthSelect","required":false,"type":{"name":"(date: string) => void"}},"onNextDecade":{"defaultValue":null,"description":"Called when the next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"(date: string) => void"}},"onNextYear":{"defaultValue":null,"description":"Called when the next year button is clicked","name":"onNextYear","required":false,"type":{"name":"(date: string) => void"}},"onPreviousDecade":{"defaultValue":null,"description":"Called when the previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"(date: string) => void"}},"onPreviousYear":{"defaultValue":null,"description":"Called when the previous year button is clicked","name":"onPreviousYear","required":false,"type":{"name":"(date: string) => void"}},"previousLabel":{"defaultValue":null,"description":"Previous button <code>aria-label</code>","name":"previousLabel","required":false,"type":{"name":"string"}},"size":{"defaultValue":null,"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"type":{"defaultValue":null,"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"\\"range\\" | \\"multiple\\" | \\"default\\"","raw":"DatePickerType | undefined","value":[{"value":"undefined"},{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"defaultValue":null,"description":"Value for controlled component","name":"value","required":false,"type":{"name":"DateValue | DatesRangeValue<DateValue> | DateValue[]"}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"yearLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"dayjs label format to display year label or a function that returns year label based on year value","name":"yearLabelFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"yearsListFormat":{"defaultValue":"`\'YYYY\'`","description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"MonthPickerInput":{"props":{"allowDeselect":{"defaultValue":null,"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"defaultValue":null,"description":"Determines whether a single day can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"defaultValue":null,"description":"<code>aria-label</code> attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"clearButtonProps":{"defaultValue":null,"description":"Props passed down to the clear button","name":"clearButtonProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"clearable":{"defaultValue":"`false`","description":"If set, clear button is displayed in the <code>rightSection</code> when the component has value. Ignored if <code>rightSection</code> prop is set.","name":"clearable","required":false,"type":{"name":"boolean"}},"closeOnChange":{"defaultValue":"`true`","description":"Determines whether the dropdown is closed when date is selected, not applicable with <code>type=\\"multiple\\"</code>","name":"closeOnChange","required":false,"type":{"name":"boolean"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll with next/prev buttons, same as <code>numberOfColumns</code> if not set explicitly","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Displayed date in controlled mode","name":"date","required":false,"type":{"name":"string | Date"}},"decadeLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"<code>dayjs</code> format for decade label or a function that returns decade label based on the date value","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: string, endOfDecade: string) => ReactNode)"}},"defaultDate":{"defaultValue":null,"description":"Initial displayed date in uncontrolled mode","name":"defaultDate","required":false,"type":{"name":"string | Date"}},"defaultLevel":{"defaultValue":null,"description":"Initial displayed level (uncontrolled)","name":"defaultLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"defaultValue":{"defaultValue":null,"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"DateValue | DatesRangeValue<DateValue> | DateValue[]"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownType":{"defaultValue":"`\'popover\'`","description":"Type of the dropdown","name":"dropdownType","required":false,"type":{"name":"\\"popover\\" | \\"modal\\"","raw":"\\"popover\\" | \\"modal\\" | undefined","value":[{"value":"undefined"},{"value":"\\"popover\\""},{"value":"\\"modal\\""}]}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"getMonthControlProps":{"defaultValue":null,"description":"Passes props down month picker control","name":"getMonthControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"getYearControlProps":{"defaultValue":null,"description":"Passes props down to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"labelSeparator":{"defaultValue":null,"description":"Separator between range value","name":"labelSeparator","required":false,"type":{"name":"string"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"level":{"defaultValue":null,"description":"Current displayed level (controlled)","name":"level","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"defaultValue":null,"description":"Dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"maxDate","required":false,"type":{"name":"string | Date"}},"maxLevel":{"defaultValue":"`\'decade\'`","description":"Max level that user can go up to","name":"maxLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"minDate":{"defaultValue":null,"description":"Minimum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"minDate","required":false,"type":{"name":"string | Date"}},"modalProps":{"defaultValue":null,"description":"Props passed down to <code>Modal</code> component","name":"modalProps","required":false,"type":{"name":"Partial<Omit<ModalProps, \\"children\\">>"}},"monthsListFormat":{"defaultValue":null,"description":"<code>dayjs</code> format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextLabel":{"defaultValue":null,"description":"Next button <code>aria-label</code>","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":"`1`","description":"Number of columns displayed next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: DatePickerValue<Type, string>) => void"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: string) => void"}},"onDropdownClose":{"defaultValue":null,"description":"Called when the dropdown is closed","name":"onDropdownClose","required":false,"type":{"name":"() => void"}},"onLevelChange":{"defaultValue":null,"description":"Called when level changes","name":"onLevelChange","required":false,"type":{"name":"(level: MonthPickerLevel) => void"}},"onNextDecade":{"defaultValue":null,"description":"Called when the next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"(date: string) => void"}},"onNextYear":{"defaultValue":null,"description":"Called when the next year button is clicked","name":"onNextYear","required":false,"type":{"name":"(date: string) => void"}},"onPreviousDecade":{"defaultValue":null,"description":"Called when the previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"(date: string) => void"}},"onPreviousYear":{"defaultValue":null,"description":"Called when the previous year button is clicked","name":"onPreviousYear","required":false,"type":{"name":"(date: string) => void"}},"placeholder":{"defaultValue":null,"description":"Input placeholder","name":"placeholder","required":false,"type":{"name":"string"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"popoverProps":{"defaultValue":null,"description":"Props passed down to <code>Popover</code> component","name":"popoverProps","required":false,"type":{"name":"Partial<Omit<PopoverProps, \\"children\\">>"}},"previousLabel":{"defaultValue":null,"description":"Previous button <code>aria-label</code>","name":"previousLabel","required":false,"type":{"name":"string"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"defaultValue":null,"description":"If set, the component value cannot be changed by the user","name":"readOnly","required":false,"type":{"name":"boolean"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":null,"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"sortDates":{"defaultValue":"`true`","description":"Determines whether dates values should be sorted before <code>onChange</code> call, only applicable with type=\\"multiple\\"","name":"sortDates","required":false,"type":{"name":"boolean"}},"type":{"defaultValue":null,"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"\\"range\\" | \\"multiple\\" | \\"default\\"","raw":"DatePickerType | undefined","value":[{"value":"undefined"},{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"defaultValue":null,"description":"Value for controlled component","name":"value","required":false,"type":{"name":"DateValue | DatesRangeValue<DateValue> | DateValue[]"}},"valueFormat":{"defaultValue":"`\\"MMMM YYYY\\"`","description":"<code>dayjs</code> format for input value","name":"valueFormat","required":false,"type":{"name":"string"}},"valueFormatter":{"defaultValue":null,"description":"A function to format selected dates values into a string. By default, date is formatted based on the input type.","name":"valueFormatter","required":false,"type":{"name":"DateFormatter"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}},"yearLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"dayjs label format to display year label or a function that returns year label based on year value","name":"yearLabelFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"yearsListFormat":{"defaultValue":"`\'YYYY\'`","description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"MonthsList":{"props":{"getMonthControlProps":{"defaultValue":null,"description":"Passes props down month picker control","name":"getMonthControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"locale":{"defaultValue":null,"description":"Dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"maxDate","required":false,"type":{"name":"string | Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"minDate","required":false,"type":{"name":"string | Date"}},"monthsListFormat":{"defaultValue":null,"description":"<code>dayjs</code> format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"size":{"defaultValue":null,"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"year":{"defaultValue":null,"description":"Year for which months list should be displayed","name":"year","required":true,"type":{"name":"string"}}}},"PickerControl":{"props":{"children":{"defaultValue":null,"description":"Control children","name":"children","required":false,"type":{"name":"React.ReactNode"}},"disabled":{"defaultValue":null,"description":"Disables control","name":"disabled","required":false,"type":{"name":"boolean"}},"firstInRange":{"defaultValue":null,"description":"Assigns first in range styles","name":"firstInRange","required":false,"type":{"name":"boolean"}},"inRange":{"defaultValue":null,"description":"Assigns in range styles","name":"inRange","required":false,"type":{"name":"boolean"}},"lastInRange":{"defaultValue":null,"description":"Assigns last in range styles","name":"lastInRange","required":false,"type":{"name":"boolean"}},"selected":{"defaultValue":null,"description":"Assigns selected styles","name":"selected","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":null,"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}}}},"PickerInputBase":{"props":{"clearButtonProps":{"defaultValue":null,"description":"Props passed down to the clear button","name":"clearButtonProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"clearable":{"defaultValue":"`false`","description":"If set, clear button is displayed in the <code>rightSection</code> when the component has value. Ignored if <code>rightSection</code> prop is set.","name":"clearable","required":false,"type":{"name":"boolean"}},"closeOnChange":{"defaultValue":"`true`","description":"Determines whether the dropdown is closed when date is selected, not applicable with <code>type=\\"multiple\\"</code>","name":"closeOnChange","required":false,"type":{"name":"boolean"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownHandlers":{"defaultValue":null,"description":"","name":"dropdownHandlers","required":true,"type":{"name":"UseDisclosureHandlers"}},"dropdownOpened":{"defaultValue":null,"description":"","name":"dropdownOpened","required":true,"type":{"name":"boolean"}},"dropdownType":{"defaultValue":"`\'popover\'`","description":"Type of the dropdown","name":"dropdownType","required":false,"type":{"name":"\\"popover\\" | \\"modal\\"","raw":"\\"popover\\" | \\"modal\\" | undefined","value":[{"value":"undefined"},{"value":"\\"popover\\""},{"value":"\\"modal\\""}]}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"formattedValue":{"defaultValue":null,"description":"","name":"formattedValue","required":true,"type":{"name":"string | null"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"labelSeparator":{"defaultValue":null,"description":"Separator between range value","name":"labelSeparator","required":false,"type":{"name":"string"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"modalProps":{"defaultValue":null,"description":"Props passed down to <code>Modal</code> component","name":"modalProps","required":false,"type":{"name":"Partial<Omit<ModalProps, \\"children\\">>"}},"onClear":{"defaultValue":null,"description":"","name":"onClear","required":true,"type":{"name":"() => void"}},"onDropdownClose":{"defaultValue":null,"description":"Called when the dropdown is closed","name":"onDropdownClose","required":false,"type":{"name":"() => void"}},"placeholder":{"defaultValue":null,"description":"Input placeholder","name":"placeholder","required":false,"type":{"name":"string"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"popoverProps":{"defaultValue":null,"description":"Props passed down to <code>Popover</code> component","name":"popoverProps","required":false,"type":{"name":"Partial<Omit<PopoverProps, \\"children\\">>"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"defaultValue":null,"description":"If set, the component value cannot be changed by the user","name":"readOnly","required":false,"type":{"name":"boolean"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"shouldClear":{"defaultValue":null,"description":"","name":"shouldClear","required":true,"type":{"name":"boolean"}},"size":{"defaultValue":null,"description":"","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"sortDates":{"defaultValue":"`true`","description":"Determines whether dates values should be sorted before <code>onChange</code> call, only applicable with type=\\"multiple\\"","name":"sortDates","required":false,"type":{"name":"boolean"}},"type":{"defaultValue":null,"description":"","name":"type","required":true,"type":{"name":"DatePickerType","raw":"DatePickerType","value":[{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"defaultValue":null,"description":"","name":"value","required":true,"type":{"name":"HiddenDatesInputValue"}},"valueFormatter":{"defaultValue":null,"description":"A function to format selected dates values into a string. By default, date is formatted based on the input type.","name":"valueFormatter","required":false,"type":{"name":"DateFormatter"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withTime":{"defaultValue":null,"description":"","name":"withTime","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"SpinInput":{"props":{"allowTemporaryZero":{"defaultValue":"false","description":"","name":"allowTemporaryZero","required":false,"type":{"name":"boolean"}},"focusable":{"defaultValue":null,"description":"","name":"focusable","required":true,"type":{"name":"boolean"}},"max":{"defaultValue":null,"description":"","name":"max","required":true,"type":{"name":"number"}},"min":{"defaultValue":null,"description":"","name":"min","required":true,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"","name":"onChange","required":true,"type":{"name":"(value: number | null) => void"}},"onNextInput":{"defaultValue":null,"description":"","name":"onNextInput","required":false,"type":{"name":"() => void"}},"onPreviousInput":{"defaultValue":null,"description":"","name":"onPreviousInput","required":false,"type":{"name":"() => void"}},"step":{"defaultValue":null,"description":"","name":"step","required":true,"type":{"name":"number"}},"value":{"defaultValue":null,"description":"","name":"value","required":true,"type":{"name":"number | null"}}}},"TimeGrid":{"props":{"allowDeselect":{"defaultValue":"`false`","description":"Determines whether the value can be deselected when the current active option is clicked or activated with keyboard","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"amPmLabels":{"defaultValue":"`{ am: \'AM\', pm: \'PM\' }`","description":"Labels used for am/pm values","name":"amPmLabels","required":false,"type":{"name":"{ am: string; pm: string }"}},"data":{"defaultValue":null,"description":"Time data in 24h format to be displayed in the grid, for example <code>[\'10:00\', \'18:30\', \'22:00\']</code>. Time values must be unique.","name":"data","required":true,"type":{"name":"string[]"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string | null"}},"disableTime":{"defaultValue":null,"description":"Array of time values to disable","name":"disableTime","required":false,"type":{"name":"string[] | ((time: string) => boolean)"}},"disabled":{"defaultValue":null,"description":"If set, all controls are disabled","name":"disabled","required":false,"type":{"name":"boolean"}},"format":{"defaultValue":"`\'24h\'`","description":"Time format displayed in the grid","name":"format","required":false,"type":{"name":"\\"12h\\" | \\"24h\\"","raw":"TimePickerFormat | undefined","value":[{"value":"undefined"},{"value":"\\"12h\\""},{"value":"\\"24h\\""}]}},"getControlProps":{"defaultValue":null,"description":"A function to pass props down to control based on the time value","name":"getControlProps","required":false,"type":{"name":"(time: string) => React.ComponentPropsWithoutRef<\\"button\\">"}},"maxTime":{"defaultValue":null,"description":"All controls after this time are disabled","name":"maxTime","required":false,"type":{"name":"string"}},"minTime":{"defaultValue":null,"description":"All controls before this time are disabled","name":"minTime","required":false,"type":{"name":"string"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: string | null) => void"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"simpleGridProps":{"defaultValue":"`{ cols: 3, spacing: \'xs\' }`","description":"Props passed down to the underlying <code>SimpleGrid</code> component","name":"simpleGridProps","required":false,"type":{"name":"SimpleGridProps"}},"size":{"defaultValue":"`\'sm\'`","description":"Control <code>font-size</code> of controls, key of <code>theme.fontSizes</code> or any valid CSS value","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string | null"}},"withSeconds":{"defaultValue":"`false`","description":"Determines whether the seconds part should be displayed","name":"withSeconds","required":false,"type":{"name":"boolean"}}}},"TimeInput":{"props":{"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"maxTime":{"defaultValue":null,"description":"Maximum possible string time, if <code>withSeconds</code> is true, time should be in format HH:mm:ss, otherwise HH:mm","name":"maxTime","required":false,"type":{"name":"string"}},"minTime":{"defaultValue":null,"description":"Minimum possible string time, if <code>withSeconds</code> is true, time should be in format HH:mm:ss, otherwise HH:mm","name":"minTime","required":false,"type":{"name":"string"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withSeconds":{"defaultValue":"`false`","description":"Determines whether seconds input should be displayed","name":"withSeconds","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"TimePicker":{"props":{"amPmInputLabel":{"defaultValue":null,"description":"<code>aria-label</code> of am/pm input","name":"amPmInputLabel","required":false,"type":{"name":"string"}},"amPmLabels":{"defaultValue":"`{ am: \'AM\', pm: \'PM\' }`","description":"Labels used for am/pm values","name":"amPmLabels","required":false,"type":{"name":"{ am: string; pm: string }"}},"amPmRef":{"defaultValue":null,"description":"A ref object to get node reference of the am/pm select","name":"amPmRef","required":false,"type":{"name":"Ref<HTMLSelectElement>"}},"amPmSelectProps":{"defaultValue":null,"description":"Props passed down to am/pm select","name":"amPmSelectProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"select\\">"}},"clearButtonProps":{"defaultValue":null,"description":"Props passed down to clear button","name":"clearButtonProps","required":false,"type":{"name":"CloseButtonProps"}},"clearable":{"defaultValue":"`false`","description":"Determines whether the clear button should be displayed","name":"clearable","required":false,"type":{"name":"boolean"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"If set, the component becomes disabled","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"form":{"defaultValue":null,"description":"<code>form</code> prop passed down to the hidden input","name":"form","required":false,"type":{"name":"string"}},"format":{"defaultValue":null,"description":"Time format, <code>\'24h\'</code> by default","name":"format","required":false,"type":{"name":"\\"12h\\" | \\"24h\\"","raw":"TimePickerFormat | undefined","value":[{"value":"undefined"},{"value":"\\"12h\\""},{"value":"\\"24h\\""}]}},"hiddenInputProps":{"defaultValue":null,"description":"Props passed down to the hidden input","name":"hiddenInputProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"input\\">"}},"hoursInputLabel":{"defaultValue":null,"description":"<code>aria-label</code> of hours input","name":"hoursInputLabel","required":false,"type":{"name":"string"}},"hoursInputProps":{"defaultValue":null,"description":"Props passed down to hours input","name":"hoursInputProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"input\\">"}},"hoursRef":{"defaultValue":null,"description":"A ref object to get node reference of the hours input","name":"hoursRef","required":false,"type":{"name":"Ref<HTMLInputElement>"}},"hoursStep":{"defaultValue":"`1`","description":"Number by which hours are incremented/decremented","name":"hoursStep","required":false,"type":{"name":"number"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"max":{"defaultValue":null,"description":"Max possible time value in <code>hh:mm:ss</code> format","name":"max","required":false,"type":{"name":"string"}},"maxDropdownContentHeight":{"defaultValue":"`200`","description":"Maximum height of the content displayed in the dropdown in px","name":"maxDropdownContentHeight","required":false,"type":{"name":"number"}},"min":{"defaultValue":null,"description":"Min possible time value in <code>hh:mm:ss</code> format","name":"min","required":false,"type":{"name":"string"}},"minutesInputLabel":{"defaultValue":null,"description":"<code>aria-label</code> of minutes input","name":"minutesInputLabel","required":false,"type":{"name":"string"}},"minutesInputProps":{"defaultValue":null,"description":"Props passed down to minutes input","name":"minutesInputProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"input\\">"}},"minutesRef":{"defaultValue":null,"description":"A ref object to get node reference of the minutes input","name":"minutesRef","required":false,"type":{"name":"Ref<HTMLInputElement>"}},"minutesStep":{"defaultValue":"`1`","description":"Number by which minutes are incremented/decremented","name":"minutesStep","required":false,"type":{"name":"number"}},"name":{"defaultValue":null,"description":"<code>name</code> prop passed down to the hidden input","name":"name","required":false,"type":{"name":"string"}},"onBlur":{"defaultValue":null,"description":"Called once when the focus is no longer on any of the inputs","name":"onBlur","required":false,"type":{"name":"(event: FocusEvent<HTMLDivElement, Element>) => void"}},"onChange":{"defaultValue":null,"description":"Called when the value changes","name":"onChange","required":false,"type":{"name":"(value: string) => void"}},"onFocus":{"defaultValue":null,"description":"Called once when one of the inputs is focused, not called when focused is shifted between hours, minutes, seconds and am/pm inputs","name":"onFocus","required":false,"type":{"name":"(event: FocusEvent<HTMLInputElement, Element>) => void"}},"pasteSplit":{"defaultValue":null,"description":"A function to transform paste values, by default time in 24h format can be parsed on paste for example <code>23:34:22</code>","name":"pasteSplit","required":false,"type":{"name":"TimePickerPasteSplit"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"popoverProps":{"defaultValue":null,"description":"Props passed down to <code>Popover</code> component","name":"popoverProps","required":false,"type":{"name":"PopoverProps"}},"presets":{"defaultValue":null,"description":"Time presets to display in the dropdown","name":"presets","required":false,"type":{"name":"TimePickerPresets"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"defaultValue":null,"description":"If set, the value cannot be updated","name":"readOnly","required":false,"type":{"name":"boolean"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"reverseTimeControlsList":{"defaultValue":"`false`","description":"If set, the time controls list are reversed,","name":"reverseTimeControlsList","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"scrollAreaProps":{"defaultValue":null,"description":"Props passed down to all underlying <code>ScrollArea</code> components","name":"scrollAreaProps","required":false,"type":{"name":"ScrollAreaProps"}},"secondsInputLabel":{"defaultValue":null,"description":"<code>aria-label</code> of seconds input","name":"secondsInputLabel","required":false,"type":{"name":"string"}},"secondsInputProps":{"defaultValue":null,"description":"Props passed down to seconds input","name":"secondsInputProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"input\\">"}},"secondsRef":{"defaultValue":null,"description":"A ref object to get node reference of the seconds input","name":"secondsRef","required":false,"type":{"name":"Ref<HTMLInputElement>"}},"secondsStep":{"defaultValue":"`1`","description":"Number by which seconds are incremented/decremented","name":"secondsStep","required":false,"type":{"name":"number"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withDropdown":{"defaultValue":"`false`","description":"Determines whether the dropdown with time controls list should be visible when the input has focus","name":"withDropdown","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withSeconds":{"defaultValue":"`false`","description":"Determines whether the seconds input should be displayed","name":"withSeconds","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"TimeValue":{"props":{"amPmLabels":{"defaultValue":"{ am: \'AM\', pm: \'PM\' }","description":"AM/PM labels","name":"amPmLabels","required":false,"type":{"name":"{ am: string; pm: string }"}},"format":{"defaultValue":"24h","description":"Time format","name":"format","required":false,"type":{"name":"\\"12h\\" | \\"24h\\"","raw":"TimePickerFormat | undefined","value":[{"value":"undefined"},{"value":"\\"12h\\""},{"value":"\\"24h\\""}]}},"value":{"defaultValue":null,"description":"Time to format","name":"value","required":true,"type":{"name":"string | Date"}},"withSeconds":{"defaultValue":"false","description":"Determines whether seconds should be displayed","name":"withSeconds","required":false,"type":{"name":"boolean"}}}},"WeekdaysRow":{"props":{"cellComponent":{"defaultValue":"`\'th\'`","description":"Sets cell type that is used for weekdays","name":"cellComponent","required":false,"type":{"name":"\\"td\\" | \\"th\\"","raw":"\\"td\\" | \\"th\\" | undefined","value":[{"value":"undefined"},{"value":"\\"td\\""},{"value":"\\"th\\""}]}},"firstDayOfWeek":{"defaultValue":"`1` – Monday","description":"Number 0-6, 0 – Sunday, 6 – Saturday","name":"firstDayOfWeek","required":false,"type":{"name":"0 | 1 | 2 | 3 | 4 | 5 | 6","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"locale":{"defaultValue":null,"description":"dayjs locale","name":"locale","required":false,"type":{"name":"string"}},"size":{"defaultValue":null,"description":"Controls size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"weekdayFormat":{"defaultValue":"`\'dd\'`","description":"dayjs format to get weekday name","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: string) => string)"}},"withWeekNumbers":{"defaultValue":null,"description":"If set, heading for week numbers is displayed","name":"withWeekNumbers","required":false,"type":{"name":"boolean"}}}},"YearLevel":{"props":{"getMonthControlProps":{"defaultValue":null,"description":"Passes props down month picker control","name":"getMonthControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"hasNextLevel":{"defaultValue":"`true`","description":"Determines whether next level button should be enabled","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"headerControlsOrder":{"defaultValue":"`[\'previous\', \'level\', \'next\']`","description":"Controls order","name":"headerControlsOrder","required":false,"type":{"name":"(\\"next\\" | \\"previous\\" | \\"level\\")[]"}},"levelControlAriaLabel":{"defaultValue":null,"description":"<code>aria-label</code> for change level control","name":"levelControlAriaLabel","required":false,"type":{"name":"string"}},"locale":{"defaultValue":null,"description":"Dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"maxDate","required":false,"type":{"name":"string | Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"minDate","required":false,"type":{"name":"string | Date"}},"monthsListFormat":{"defaultValue":null,"description":"<code>dayjs</code> format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextDisabled":{"defaultValue":null,"description":"Disables next control","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"defaultValue":null,"description":"Next button <code>aria-label</code>","name":"nextLabel","required":false,"type":{"name":"string"}},"onLevelClick":{"defaultValue":null,"description":"Called when the level button is clicked","name":"onLevelClick","required":false,"type":{"name":"() => void"}},"onNext":{"defaultValue":null,"description":"Called when the next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onPrevious":{"defaultValue":null,"description":"Called when the previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"previousDisabled":{"defaultValue":null,"description":"Disables previous control","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"defaultValue":null,"description":"Previous button <code>aria-label</code>","name":"previousLabel","required":false,"type":{"name":"string"}},"size":{"defaultValue":null,"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withNext":{"defaultValue":"`true`","description":"Determines whether next control should be rendered","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"defaultValue":"`true`","description":"Determines whether previous control should be rendered","name":"withPrevious","required":false,"type":{"name":"boolean"}},"year":{"defaultValue":null,"description":"Displayed year value in <code>YYYY-MM-DD</code> format","name":"year","required":true,"type":{"name":"string"}},"yearLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"dayjs label format to display year label or a function that returns year label based on year value","name":"yearLabelFormat","required":false,"type":{"name":"string | ((date: string) => string)"}}}},"YearLevelGroup":{"props":{"getMonthControlProps":{"defaultValue":null,"description":"Passes props down month picker control","name":"getMonthControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"hasNextLevel":{"defaultValue":"`true`","description":"Determines whether next level button should be enabled","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"headerControlsOrder":{"defaultValue":"`[\'previous\', \'level\', \'next\']`","description":"Controls order","name":"headerControlsOrder","required":false,"type":{"name":"(\\"next\\" | \\"previous\\" | \\"level\\")[]"}},"levelControlAriaLabel":{"defaultValue":null,"description":"Function that returns level control <code>aria-label</code>","name":"levelControlAriaLabel","required":false,"type":{"name":"string | ((year: string) => string)"}},"locale":{"defaultValue":null,"description":"Dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"maxDate","required":false,"type":{"name":"string | Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"minDate","required":false,"type":{"name":"string | Date"}},"monthsListFormat":{"defaultValue":null,"description":"<code>dayjs</code> format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextDisabled":{"defaultValue":null,"description":"Disables next control","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"defaultValue":null,"description":"Next button <code>aria-label</code>","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":null,"description":"Number of columns displayed next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onLevelClick":{"defaultValue":null,"description":"Called when the level button is clicked","name":"onLevelClick","required":false,"type":{"name":"() => void"}},"onNext":{"defaultValue":null,"description":"Called when the next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onPrevious":{"defaultValue":null,"description":"Called when the previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"previousDisabled":{"defaultValue":null,"description":"Disables previous control","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"defaultValue":null,"description":"Previous button <code>aria-label</code>","name":"previousLabel","required":false,"type":{"name":"string"}},"size":{"defaultValue":null,"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"year":{"defaultValue":null,"description":"Displayed year","name":"year","required":true,"type":{"name":"string"}},"yearLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"dayjs label format to display year label or a function that returns year label based on year value","name":"yearLabelFormat","required":false,"type":{"name":"string | ((date: string) => string)"}}}},"YearPicker":{"props":{"allowDeselect":{"defaultValue":null,"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"defaultValue":null,"description":"Determines whether a single day can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"defaultValue":null,"description":"<code>aria-label</code> attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll with next/prev buttons, same as <code>numberOfColumns</code> if not set explicitly","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Displayed date in controlled mode","name":"date","required":false,"type":{"name":"string | Date"}},"decadeLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"<code>dayjs</code> format for decade label or a function that returns decade label based on the date value","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: string, endOfDecade: string) => ReactNode)"}},"defaultDate":{"defaultValue":null,"description":"Initial displayed date in uncontrolled mode","name":"defaultDate","required":false,"type":{"name":"string | Date"}},"defaultValue":{"defaultValue":null,"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"DateValue | DatesRangeValue<DateValue> | DateValue[]"}},"getYearControlProps":{"defaultValue":null,"description":"Passes props down to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"locale":{"defaultValue":null,"description":"Dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"maxDate","required":false,"type":{"name":"string | Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"minDate","required":false,"type":{"name":"string | Date"}},"nextLabel":{"defaultValue":null,"description":"Next button <code>aria-label</code>","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":"`1`","description":"Number of columns displayed next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: DatePickerValue<Type, string>) => void"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: string) => void"}},"onNextDecade":{"defaultValue":null,"description":"Called when the next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"(date: string) => void"}},"onPreviousDecade":{"defaultValue":null,"description":"Called when the previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"(date: string) => void"}},"onYearSelect":{"defaultValue":null,"description":"Called when year is selected","name":"onYearSelect","required":false,"type":{"name":"(date: string) => void"}},"previousLabel":{"defaultValue":null,"description":"Previous button <code>aria-label</code>","name":"previousLabel","required":false,"type":{"name":"string"}},"size":{"defaultValue":null,"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"type":{"defaultValue":null,"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"\\"range\\" | \\"multiple\\" | \\"default\\"","raw":"DatePickerType | undefined","value":[{"value":"undefined"},{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"defaultValue":null,"description":"Value for controlled component","name":"value","required":false,"type":{"name":"DateValue | DatesRangeValue<DateValue> | DateValue[]"}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"yearsListFormat":{"defaultValue":"`\'YYYY\'`","description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"YearPickerInput":{"props":{"allowDeselect":{"defaultValue":null,"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"defaultValue":null,"description":"Determines whether a single day can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"defaultValue":null,"description":"<code>aria-label</code> attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"clearButtonProps":{"defaultValue":null,"description":"Props passed down to the clear button","name":"clearButtonProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"clearable":{"defaultValue":"`false`","description":"If set, clear button is displayed in the <code>rightSection</code> when the component has value. Ignored if <code>rightSection</code> prop is set.","name":"clearable","required":false,"type":{"name":"boolean"}},"closeOnChange":{"defaultValue":"`true`","description":"Determines whether the dropdown is closed when date is selected, not applicable with <code>type=\\"multiple\\"</code>","name":"closeOnChange","required":false,"type":{"name":"boolean"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll with next/prev buttons, same as <code>numberOfColumns</code> if not set explicitly","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Displayed date in controlled mode","name":"date","required":false,"type":{"name":"string | Date"}},"decadeLabelFormat":{"defaultValue":"`\\"YYYY\\"`","description":"<code>dayjs</code> format for decade label or a function that returns decade label based on the date value","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: string, endOfDecade: string) => ReactNode)"}},"defaultDate":{"defaultValue":null,"description":"Initial displayed date in uncontrolled mode","name":"defaultDate","required":false,"type":{"name":"string | Date"}},"defaultValue":{"defaultValue":null,"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"DateValue | DatesRangeValue<DateValue> | DateValue[]"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownType":{"defaultValue":"`\'popover\'`","description":"Type of the dropdown","name":"dropdownType","required":false,"type":{"name":"\\"popover\\" | \\"modal\\"","raw":"\\"popover\\" | \\"modal\\" | undefined","value":[{"value":"undefined"},{"value":"\\"popover\\""},{"value":"\\"modal\\""}]}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"getYearControlProps":{"defaultValue":null,"description":"Passes props down to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"labelSeparator":{"defaultValue":null,"description":"Separator between range value","name":"labelSeparator","required":false,"type":{"name":"string"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"locale":{"defaultValue":null,"description":"Dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"maxDate","required":false,"type":{"name":"string | Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"minDate","required":false,"type":{"name":"string | Date"}},"modalProps":{"defaultValue":null,"description":"Props passed down to <code>Modal</code> component","name":"modalProps","required":false,"type":{"name":"Partial<Omit<ModalProps, \\"children\\">>"}},"nextLabel":{"defaultValue":null,"description":"Next button <code>aria-label</code>","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":"`1`","description":"Number of columns displayed next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: DatePickerValue<Type, string>) => void"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: string) => void"}},"onDropdownClose":{"defaultValue":null,"description":"Called when the dropdown is closed","name":"onDropdownClose","required":false,"type":{"name":"() => void"}},"onNextDecade":{"defaultValue":null,"description":"Called when the next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"(date: string) => void"}},"onPreviousDecade":{"defaultValue":null,"description":"Called when the previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"(date: string) => void"}},"placeholder":{"defaultValue":null,"description":"Input placeholder","name":"placeholder","required":false,"type":{"name":"string"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"popoverProps":{"defaultValue":null,"description":"Props passed down to <code>Popover</code> component","name":"popoverProps","required":false,"type":{"name":"Partial<Omit<PopoverProps, \\"children\\">>"}},"previousLabel":{"defaultValue":null,"description":"Previous button <code>aria-label</code>","name":"previousLabel","required":false,"type":{"name":"string"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"defaultValue":null,"description":"If set, the component value cannot be changed by the user","name":"readOnly","required":false,"type":{"name":"boolean"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":null,"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"sortDates":{"defaultValue":"`true`","description":"Determines whether dates values should be sorted before <code>onChange</code> call, only applicable with type=\\"multiple\\"","name":"sortDates","required":false,"type":{"name":"boolean"}},"type":{"defaultValue":null,"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"\\"range\\" | \\"multiple\\" | \\"default\\"","raw":"DatePickerType | undefined","value":[{"value":"undefined"},{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"defaultValue":null,"description":"Value for controlled component","name":"value","required":false,"type":{"name":"DateValue | DatesRangeValue<DateValue> | DateValue[]"}},"valueFormat":{"defaultValue":"`\\"YYYY\\"`","description":"<code>dayjs</code> format to display input value","name":"valueFormat","required":false,"type":{"name":"string"}},"valueFormatter":{"defaultValue":null,"description":"A function to format selected dates values into a string. By default, date is formatted based on the input type.","name":"valueFormatter","required":false,"type":{"name":"DateFormatter"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}},"yearsListFormat":{"defaultValue":"`\'YYYY\'`","description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"YearsList":{"props":{"decade":{"defaultValue":null,"description":"Decade value to display","name":"decade","required":true,"type":{"name":"string"}},"getYearControlProps":{"defaultValue":null,"description":"Passes props down to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: string) => Partial<PickerControlProps> & DataAttributes"}},"locale":{"defaultValue":null,"description":"Dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"maxDate","required":false,"type":{"name":"string | Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date in <code>YYYY-MM-DD</code> format or Date object","name":"minDate","required":false,"type":{"name":"string | Date"}},"size":{"defaultValue":null,"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"withCellSpacing":{"defaultValue":"`true`","description":"Determines whether controls should be separated","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"yearsListFormat":{"defaultValue":"`\'YYYY\'`","description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"AreaChart":{"props":{"activeDotProps":{"defaultValue":null,"description":"Props passed down to all active dots. Ignored if <code>withDots={false}</code> is set.","name":"activeDotProps","required":false,"type":{"name":"MantineChartDotProps"}},"areaChartProps":{"defaultValue":null,"description":"Props passed down to recharts <code>AreaChart</code> component","name":"areaChartProps","required":false,"type":{"name":"Omit<CategoricalChartProps & RefAttributes<{ readonly eventEmitterSymbol: Symbol; clipPathId: string; accessibilityManager: AccessibilityManager; ... 65 more ...; UNSAFE_componentWillUpdate?(nextProps: Readonly<...>, nextState: Readonly<...>, nextContext: any): void; }>, \\"ref\\">"}},"areaProps":{"defaultValue":null,"description":"Props passed down to recharts <code>Area</code> component","name":"areaProps","required":false,"type":{"name":"((series: AreaChartSeries) => Partial<Omit<Props, \\"ref\\">>) | Partial<Omit<Props, \\"ref\\">>"}},"children":{"defaultValue":null,"description":"Additional components that are rendered inside recharts <code>AreaChart</code> component","name":"children","required":false,"type":{"name":"React.ReactNode"}},"connectNulls":{"defaultValue":"`true`","description":"If set, points with <code>null</code> values are connected","name":"connectNulls","required":false,"type":{"name":"boolean"}},"curveType":{"defaultValue":"`\'monotone\'`","description":"Type of the curve","name":"curveType","required":false,"type":{"name":"AreaChartCurveType","raw":"AreaChartCurveType | undefined","value":[{"value":"undefined"},{"value":"\\"step\\""},{"value":"\\"linear\\""},{"value":"\\"bump\\""},{"value":"\\"natural\\""},{"value":"\\"monotone\\""},{"value":"\\"stepBefore\\""},{"value":"\\"stepAfter\\""}]}},"data":{"defaultValue":null,"description":"Data used to display chart","name":"data","required":true,"type":{"name":"ChartData"}},"dataKey":{"defaultValue":null,"description":"Key of the <code>data</code> object for x-axis values","name":"dataKey","required":true,"type":{"name":"string"}},"dotProps":{"defaultValue":null,"description":"Props passed down to all dots. Ignored if <code>withDots={false}</code> is set.","name":"dotProps","required":false,"type":{"name":"MantineChartDotProps"}},"fillOpacity":{"defaultValue":"`0.2`","description":"Controls fill opacity of all areas","name":"fillOpacity","required":false,"type":{"name":"number"}},"gridAxis":{"defaultValue":null,"description":"Specifies which lines should be displayed in the grid, <code>\'x\'</code> by default","name":"gridAxis","required":false,"type":{"name":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\"","raw":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\" | undefined","value":[{"value":"undefined"},{"value":"\\"none\\""},{"value":"\\"x\\""},{"value":"\\"y\\""},{"value":"\\"xy\\""}]}},"gridColor":{"defaultValue":null,"description":"Color of the grid and cursor lines, by default depends on color scheme","name":"gridColor","required":false,"type":{"name":"MantineColor"}},"gridProps":{"defaultValue":null,"description":"Props passed down to the <code>CartesianGrid</code> component","name":"gridProps","required":false,"type":{"name":"RechartsProps"}},"legendProps":{"defaultValue":null,"description":"Props passed down to the <code>Legend</code> component","name":"legendProps","required":false,"type":{"name":"RechartsProps"}},"orientation":{"defaultValue":null,"description":"Chart orientation, <code>\'horizontal\'</code> by default","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"referenceLines":{"defaultValue":null,"description":"Reference lines that should be displayed on the chart","name":"referenceLines","required":false,"type":{"name":"ChartReferenceLineProps[]"}},"rightYAxisLabel":{"defaultValue":null,"description":"A label to display next to the right y-axis","name":"rightYAxisLabel","required":false,"type":{"name":"string"}},"rightYAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>YAxis</code> recharts component rendered on the right side","name":"rightYAxisProps","required":false,"type":{"name":"RechartsProps"}},"series":{"defaultValue":null,"description":"An array of objects with <code>name</code> and <code>color</code> keys. Determines which data should be consumed from the <code>data</code> array.","name":"series","required":true,"type":{"name":"AreaChartSeries[]"}},"splitColors":{"defaultValue":"`[\'green.7\', \'red.7\']`","description":"A tuple of colors used when <code>type=\\"split\\"</code> is set, ignored in all other cases. A tuple may include theme colors reference or any valid CSS colors","name":"splitColors","required":false,"type":{"name":"[MantineColor, MantineColor]"}},"splitOffset":{"defaultValue":null,"description":"Offset for the split gradient. By default, value is inferred from <code>data</code> and <code>series</code> if possible. Must be generated from the data array with <code>getSplitOffset</code> function.","name":"splitOffset","required":false,"type":{"name":"number"}},"strokeDasharray":{"defaultValue":null,"description":"Dash array for the grid lines and cursor, <code>\'5 5\'</code> by default","name":"strokeDasharray","required":false,"type":{"name":"string | number"}},"strokeWidth":{"defaultValue":"`2`","description":"Stroke width for the chart areas","name":"strokeWidth","required":false,"type":{"name":"number"}},"textColor":{"defaultValue":null,"description":"Color of the text displayed inside the chart, <code>\'dimmed\'</code> by default","name":"textColor","required":false,"type":{"name":"MantineColor"}},"tickLine":{"defaultValue":null,"description":"Specifies which axis should have tick line, <code>\'y\'</code> by default","name":"tickLine","required":false,"type":{"name":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\"","raw":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\" | undefined","value":[{"value":"undefined"},{"value":"\\"none\\""},{"value":"\\"x\\""},{"value":"\\"y\\""},{"value":"\\"xy\\""}]}},"tooltipAnimationDuration":{"defaultValue":null,"description":"Tooltip position animation duration in ms, <code>0</code> by default","name":"tooltipAnimationDuration","required":false,"type":{"name":"number"}},"tooltipProps":{"defaultValue":null,"description":"Props passed down to the <code>Tooltip</code> component","name":"tooltipProps","required":false,"type":{"name":"RechartsProps"}},"type":{"defaultValue":"`\'default\'`","description":"Controls how chart areas are positioned relative to each other","name":"type","required":false,"type":{"name":"AreaChartType","raw":"AreaChartType | undefined","value":[{"value":"undefined"},{"value":"\\"default\\""},{"value":"\\"split\\""},{"value":"\\"stacked\\""},{"value":"\\"percent\\""}]}},"unit":{"defaultValue":null,"description":"Unit displayed next to each tick in y-axis","name":"unit","required":false,"type":{"name":"string"}},"valueFormatter":{"defaultValue":null,"description":"A function to format values on Y axis and inside the tooltip","name":"valueFormatter","required":false,"type":{"name":"(value: number) => string"}},"withDots":{"defaultValue":"`true`","description":"Determines whether dots should be displayed","name":"withDots","required":false,"type":{"name":"boolean"}},"withGradient":{"defaultValue":"`false`","description":"Determines whether the chart area should be represented with a gradient instead of the solid color","name":"withGradient","required":false,"type":{"name":"boolean"}},"withLegend":{"defaultValue":null,"description":"Determines whether chart legend should be displayed, <code>false</code> by default","name":"withLegend","required":false,"type":{"name":"boolean"}},"withPointLabels":{"defaultValue":"`false`","description":"If set, each point has an associated label","name":"withPointLabels","required":false,"type":{"name":"boolean"}},"withRightYAxis":{"defaultValue":null,"description":"Determines whether additional y-axis should be displayed on the right side of the chart, <code>false</code> by default","name":"withRightYAxis","required":false,"type":{"name":"boolean"}},"withTooltip":{"defaultValue":null,"description":"Determines whether chart tooltip should be displayed, <code>true</code> by default","name":"withTooltip","required":false,"type":{"name":"boolean"}},"withXAxis":{"defaultValue":null,"description":"Determines whether x-axis should be displayed, <code>true</code> by default","name":"withXAxis","required":false,"type":{"name":"boolean"}},"withYAxis":{"defaultValue":null,"description":"Determines whether y-axis should be displayed, <code>true</code> by default","name":"withYAxis","required":false,"type":{"name":"boolean"}},"xAxisLabel":{"defaultValue":null,"description":"A label to display below the x-axis","name":"xAxisLabel","required":false,"type":{"name":"string"}},"xAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>XAxis</code> recharts component","name":"xAxisProps","required":false,"type":{"name":"RechartsProps"}},"yAxisLabel":{"defaultValue":null,"description":"A label to display next to the y-axis","name":"yAxisLabel","required":false,"type":{"name":"string"}},"yAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>YAxis</code> recharts component","name":"yAxisProps","required":false,"type":{"name":"RechartsProps"}}}},"BarChart":{"props":{"barChartProps":{"defaultValue":null,"description":"Props passed down to recharts <code>BarChart</code> component","name":"barChartProps","required":false,"type":{"name":"Omit<CategoricalChartProps & RefAttributes<{ readonly eventEmitterSymbol: Symbol; clipPathId: string; accessibilityManager: AccessibilityManager; ... 65 more ...; UNSAFE_componentWillUpdate?(nextProps: Readonly<...>, nextState: Readonly<...>, nextContext: any): void; }>, \\"ref\\">"}},"barLabelColor":{"defaultValue":null,"description":"Controls color of the bar label, by default the value is determined by the chart orientation","name":"barLabelColor","required":false,"type":{"name":"MantineColor"}},"barProps":{"defaultValue":null,"description":"Props passed down to recharts <code>Bar</code> component","name":"barProps","required":false,"type":{"name":"((series: BarChartSeries) => Partial<Omit<Props, \\"ref\\">>) | Partial<Omit<Props, \\"ref\\">>"}},"children":{"defaultValue":null,"description":"Additional components that are rendered inside recharts <code>BarChart</code> component","name":"children","required":false,"type":{"name":"React.ReactNode"}},"cursorFill":{"defaultValue":null,"description":"Fill of hovered bar section, by default value is based on color scheme","name":"cursorFill","required":false,"type":{"name":"MantineColor"}},"data":{"defaultValue":null,"description":"Data used to display chart.","name":"data","required":true,"type":{"name":"Record<string, any>[]"}},"dataKey":{"defaultValue":null,"description":"Key of the <code>data</code> object for x-axis values","name":"dataKey","required":true,"type":{"name":"string"}},"fillOpacity":{"defaultValue":"`1`","description":"Controls fill opacity of all bars","name":"fillOpacity","required":false,"type":{"name":"number"}},"getBarColor":{"defaultValue":null,"description":"A function to assign dynamic bar color based on its value","name":"getBarColor","required":false,"type":{"name":"(value: number, series: BarChartSeries) => DefaultMantineColor"}},"gridAxis":{"defaultValue":null,"description":"Specifies which lines should be displayed in the grid, <code>\'x\'</code> by default","name":"gridAxis","required":false,"type":{"name":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\"","raw":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\" | undefined","value":[{"value":"undefined"},{"value":"\\"none\\""},{"value":"\\"x\\""},{"value":"\\"y\\""},{"value":"\\"xy\\""}]}},"gridColor":{"defaultValue":null,"description":"Color of the grid and cursor lines, by default depends on color scheme","name":"gridColor","required":false,"type":{"name":"MantineColor"}},"gridProps":{"defaultValue":null,"description":"Props passed down to the <code>CartesianGrid</code> component","name":"gridProps","required":false,"type":{"name":"RechartsProps"}},"legendProps":{"defaultValue":null,"description":"Props passed down to the <code>Legend</code> component","name":"legendProps","required":false,"type":{"name":"RechartsProps"}},"maxBarWidth":{"defaultValue":null,"description":"Maximum bar width in px","name":"maxBarWidth","required":false,"type":{"name":"number"}},"minBarSize":{"defaultValue":"`0`","description":"Sets minimum height of the bar in px","name":"minBarSize","required":false,"type":{"name":"number"}},"orientation":{"defaultValue":null,"description":"Chart orientation, <code>\'horizontal\'</code> by default","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"referenceLines":{"defaultValue":null,"description":"Reference lines that should be displayed on the chart","name":"referenceLines","required":false,"type":{"name":"ChartReferenceLineProps[]"}},"rightYAxisLabel":{"defaultValue":null,"description":"A label to display next to the right y-axis","name":"rightYAxisLabel","required":false,"type":{"name":"string"}},"rightYAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>YAxis</code> recharts component rendered on the right side","name":"rightYAxisProps","required":false,"type":{"name":"RechartsProps"}},"series":{"defaultValue":null,"description":"An array of objects with <code>name</code> and <code>color</code> keys. Determines which data should be consumed from the <code>data</code> array.","name":"series","required":true,"type":{"name":"BarChartSeries[]"}},"strokeDasharray":{"defaultValue":null,"description":"Dash array for the grid lines and cursor, <code>\'5 5\'</code> by default","name":"strokeDasharray","required":false,"type":{"name":"string | number"}},"textColor":{"defaultValue":null,"description":"Color of the text displayed inside the chart, <code>\'dimmed\'</code> by default","name":"textColor","required":false,"type":{"name":"MantineColor"}},"tickLine":{"defaultValue":null,"description":"Specifies which axis should have tick line, <code>\'y\'</code> by default","name":"tickLine","required":false,"type":{"name":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\"","raw":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\" | undefined","value":[{"value":"undefined"},{"value":"\\"none\\""},{"value":"\\"x\\""},{"value":"\\"y\\""},{"value":"\\"xy\\""}]}},"tooltipAnimationDuration":{"defaultValue":null,"description":"Tooltip position animation duration in ms, <code>0</code> by default","name":"tooltipAnimationDuration","required":false,"type":{"name":"number"}},"tooltipProps":{"defaultValue":null,"description":"Props passed down to the <code>Tooltip</code> component","name":"tooltipProps","required":false,"type":{"name":"RechartsProps"}},"type":{"defaultValue":"`\'default\'`","description":"Controls how bars are positioned relative to each other","name":"type","required":false,"type":{"name":"BarChartType","raw":"BarChartType | undefined","value":[{"value":"undefined"},{"value":"\\"default\\""},{"value":"\\"stacked\\""},{"value":"\\"percent\\""},{"value":"\\"waterfall\\""}]}},"unit":{"defaultValue":null,"description":"Unit displayed next to each tick in y-axis","name":"unit","required":false,"type":{"name":"string"}},"valueFormatter":{"defaultValue":null,"description":"A function to format values on Y axis and inside the tooltip","name":"valueFormatter","required":false,"type":{"name":"(value: number) => string"}},"valueLabelProps":{"defaultValue":null,"description":"Props passed down to recharts <code>LabelList</code> component","name":"valueLabelProps","required":false,"type":{"name":"((series: BarChartSeries) => Partial<Omit<Props<Record<string, any>>, \\"ref\\">>) | Partial<Props<Record<string, any>>>"}},"withBarValueLabel":{"defaultValue":"`false`","description":"Determines whether a label with bar value should be displayed on top of each bar, incompatible with <code>type=\\"stacked\\"</code> and <code>type=\\"percent\\"</code>","name":"withBarValueLabel","required":false,"type":{"name":"boolean"}},"withLegend":{"defaultValue":null,"description":"Determines whether chart legend should be displayed, <code>false</code> by default","name":"withLegend","required":false,"type":{"name":"boolean"}},"withRightYAxis":{"defaultValue":null,"description":"Determines whether additional y-axis should be displayed on the right side of the chart, <code>false</code> by default","name":"withRightYAxis","required":false,"type":{"name":"boolean"}},"withTooltip":{"defaultValue":null,"description":"Determines whether chart tooltip should be displayed, <code>true</code> by default","name":"withTooltip","required":false,"type":{"name":"boolean"}},"withXAxis":{"defaultValue":null,"description":"Determines whether x-axis should be displayed, <code>true</code> by default","name":"withXAxis","required":false,"type":{"name":"boolean"}},"withYAxis":{"defaultValue":null,"description":"Determines whether y-axis should be displayed, <code>true</code> by default","name":"withYAxis","required":false,"type":{"name":"boolean"}},"xAxisLabel":{"defaultValue":null,"description":"A label to display below the x-axis","name":"xAxisLabel","required":false,"type":{"name":"string"}},"xAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>XAxis</code> recharts component","name":"xAxisProps","required":false,"type":{"name":"RechartsProps"}},"yAxisLabel":{"defaultValue":null,"description":"A label to display next to the y-axis","name":"yAxisLabel","required":false,"type":{"name":"string"}},"yAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>YAxis</code> recharts component","name":"yAxisProps","required":false,"type":{"name":"RechartsProps"}}}},"BubbleChart":{"props":{"color":{"defaultValue":"`blue.6`","description":"Color of the chart items. Key of <code>theme.colors</code> or any valid CSS color.","name":"color","required":false,"type":{"name":"MantineColor"}},"data":{"defaultValue":null,"description":"Chart data","name":"data","required":true,"type":{"name":"Record<string, any>[]"}},"dataKey":{"defaultValue":null,"description":"Data keys for x, y and z axis","name":"dataKey","required":true,"type":{"name":"BubbleChartDataKey"}},"gridColor":{"defaultValue":null,"description":"Color of the grid and cursor lines, by default depends on color scheme","name":"gridColor","required":false,"type":{"name":"MantineColor"}},"label":{"defaultValue":null,"description":"Chart label displayed next to the x axis","name":"label","required":false,"type":{"name":"string"}},"range":{"defaultValue":null,"description":"Z axis range","name":"range","required":true,"type":{"name":"[number, number]"}},"scatterProps":{"defaultValue":null,"description":"Props passed down to the <code>Scatter</code> component","name":"scatterProps","required":false,"type":{"name":"Partial<Omit<Props, \\"ref\\">>"}},"textColor":{"defaultValue":"`\'dimmed\'`","description":"Color of the text displayed inside the chart","name":"textColor","required":false,"type":{"name":"MantineColor"}},"tooltipProps":{"defaultValue":null,"description":"Props passed down to the <code>Tooltip</code> component","name":"tooltipProps","required":false,"type":{"name":"RechartsProps"}},"valueFormatter":{"defaultValue":null,"description":"Function to format z axis values","name":"valueFormatter","required":false,"type":{"name":"(value: number) => string"}},"withTooltip":{"defaultValue":"`true`","description":"Determines whether the tooltip should be displayed","name":"withTooltip","required":false,"type":{"name":"boolean"}},"xAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>XAxis</code> recharts component","name":"xAxisProps","required":false,"type":{"name":"RechartsProps"}},"yAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>YAxis</code> recharts component","name":"yAxisProps","required":false,"type":{"name":"RechartsProps"}},"zAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>ZAxis</code> recharts component","name":"zAxisProps","required":false,"type":{"name":"RechartsProps"}}}},"ChartLegend":{"description":"","props":{}},"ChartTooltip":{"props":{"label":{"defaultValue":null,"description":"Main tooltip label","name":"label","required":false,"type":{"name":"React.ReactNode"}},"payload":{"defaultValue":null,"description":"Chart data provided by recharts","name":"payload","required":true,"type":{"name":"Record<string, any>[]"}},"segmentId":{"defaultValue":null,"description":"Id of the segment to display data for. Only applicable when <code>type=\\"radial\\"</code>. If not set, all data is rendered.","name":"segmentId","required":false,"type":{"name":"string"}},"series":{"defaultValue":null,"description":"Chart series data, applicable only for <code>area</code> type","name":"series","required":false,"type":{"name":"ChartSeries[]"}},"showColor":{"defaultValue":"`true`","description":"Determines whether the color swatch should be visible","name":"showColor","required":false,"type":{"name":"boolean"}},"type":{"defaultValue":"`\'area\'`","description":"Tooltip type that determines the content and styles, <code>area</code> for LineChart, AreaChart and BarChart, <code>radial</code> for DonutChart and PieChart","name":"type","required":false,"type":{"name":"\\"area\\" | \\"radial\\" | \\"scatter\\"","raw":"\\"area\\" | \\"radial\\" | \\"scatter\\" | undefined","value":[{"value":"undefined"},{"value":"\\"area\\""},{"value":"\\"radial\\""},{"value":"\\"scatter\\""}]}},"unit":{"defaultValue":null,"description":"Data units, provided by parent component","name":"unit","required":false,"type":{"name":"string"}},"valueFormatter":{"defaultValue":null,"description":"A function to format values","name":"valueFormatter","required":false,"type":{"name":"(value: number) => string"}}}},"CompositeChart":{"props":{"activeDotProps":{"defaultValue":null,"description":"Props passed down to all active dots. Ignored if <code>withDots={false}</code> is set.","name":"activeDotProps","required":false,"type":{"name":"MantineChartDotProps"}},"areaProps":{"defaultValue":null,"description":"Props passed down to recharts <code>Area</code> component","name":"areaProps","required":false,"type":{"name":"Partial<Omit<Props, \\"ref\\">> | ((series: CompositeChartSeries) => Partial<Omit<Props, \\"ref\\">>)"}},"barProps":{"defaultValue":null,"description":"Props passed down to recharts <code>Bar</code> component","name":"barProps","required":false,"type":{"name":"Partial<Omit<Props, \\"ref\\">> | ((series: CompositeChartSeries) => Partial<Omit<Props, \\"ref\\">>)"}},"children":{"defaultValue":null,"description":"Additional components that are rendered inside recharts <code>AreaChart</code> component","name":"children","required":false,"type":{"name":"React.ReactNode"}},"composedChartProps":{"defaultValue":null,"description":"Props passed down to recharts <code>AreaChart</code> component","name":"composedChartProps","required":false,"type":{"name":"Omit<CategoricalChartProps & RefAttributes<{ readonly eventEmitterSymbol: Symbol; clipPathId: string; accessibilityManager: AccessibilityManager; ... 65 more ...; UNSAFE_componentWillUpdate?(nextProps: Readonly<...>, nextState: Readonly<...>, nextContext: any): void; }>, \\"ref\\">"}},"connectNulls":{"defaultValue":"`true`","description":"Determines whether points with <code>null</code> values should be connected","name":"connectNulls","required":false,"type":{"name":"boolean"}},"curveType":{"defaultValue":"`\'monotone\'`","description":"Type of the curve","name":"curveType","required":false,"type":{"name":"CompositeChartCurveType","raw":"CompositeChartCurveType | undefined","value":[{"value":"undefined"},{"value":"\\"step\\""},{"value":"\\"linear\\""},{"value":"\\"bump\\""},{"value":"\\"natural\\""},{"value":"\\"monotone\\""},{"value":"\\"stepBefore\\""},{"value":"\\"stepAfter\\""}]}},"data":{"defaultValue":null,"description":"Data used to display chart","name":"data","required":true,"type":{"name":"Record<string, any>[]"}},"dataKey":{"defaultValue":null,"description":"Key of the <code>data</code> object for x-axis values","name":"dataKey","required":true,"type":{"name":"string"}},"dotProps":{"defaultValue":null,"description":"Props passed down to all dots. Ignored if <code>withDots={false}</code> is set.","name":"dotProps","required":false,"type":{"name":"MantineChartDotProps"}},"gridAxis":{"defaultValue":null,"description":"Specifies which lines should be displayed in the grid, <code>\'x\'</code> by default","name":"gridAxis","required":false,"type":{"name":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\"","raw":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\" | undefined","value":[{"value":"undefined"},{"value":"\\"none\\""},{"value":"\\"x\\""},{"value":"\\"y\\""},{"value":"\\"xy\\""}]}},"gridColor":{"defaultValue":null,"description":"Color of the grid and cursor lines, by default depends on color scheme","name":"gridColor","required":false,"type":{"name":"MantineColor"}},"gridProps":{"defaultValue":null,"description":"Props passed down to the <code>CartesianGrid</code> component","name":"gridProps","required":false,"type":{"name":"RechartsProps"}},"legendProps":{"defaultValue":null,"description":"Props passed down to the <code>Legend</code> component","name":"legendProps","required":false,"type":{"name":"RechartsProps"}},"lineProps":{"defaultValue":null,"description":"Props passed down to recharts <code>Line</code> component","name":"lineProps","required":false,"type":{"name":"((series: CompositeChartSeries) => Partial<Omit<Props, \\"ref\\">>) | Partial<Omit<Props, \\"ref\\">>"}},"maxBarWidth":{"defaultValue":null,"description":"Maximum bar width in px","name":"maxBarWidth","required":false,"type":{"name":"number"}},"minBarSize":{"defaultValue":"`0`","description":"Sets minimum height of the bar in px","name":"minBarSize","required":false,"type":{"name":"number"}},"referenceLines":{"defaultValue":null,"description":"Reference lines that should be displayed on the chart","name":"referenceLines","required":false,"type":{"name":"ChartReferenceLineProps[]"}},"rightYAxisLabel":{"defaultValue":null,"description":"A label to display next to the right y-axis","name":"rightYAxisLabel","required":false,"type":{"name":"string"}},"rightYAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>YAxis</code> recharts component rendered on the right side","name":"rightYAxisProps","required":false,"type":{"name":"RechartsProps"}},"series":{"defaultValue":null,"description":"An array of objects with <code>name</code> and <code>color</code> keys. Determines which data should be consumed from the <code>data</code> array.","name":"series","required":true,"type":{"name":"CompositeChartSeries[]"}},"strokeDasharray":{"defaultValue":null,"description":"Dash array for the grid lines and cursor, <code>\'5 5\'</code> by default","name":"strokeDasharray","required":false,"type":{"name":"string | number"}},"strokeWidth":{"defaultValue":"`2`","description":"Stroke width for the chart lines","name":"strokeWidth","required":false,"type":{"name":"number"}},"textColor":{"defaultValue":null,"description":"Color of the text displayed inside the chart, <code>\'dimmed\'</code> by default","name":"textColor","required":false,"type":{"name":"MantineColor"}},"tickLine":{"defaultValue":null,"description":"Specifies which axis should have tick line, <code>\'y\'</code> by default","name":"tickLine","required":false,"type":{"name":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\"","raw":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\" | undefined","value":[{"value":"undefined"},{"value":"\\"none\\""},{"value":"\\"x\\""},{"value":"\\"y\\""},{"value":"\\"xy\\""}]}},"tooltipAnimationDuration":{"defaultValue":null,"description":"Tooltip position animation duration in ms, <code>0</code> by default","name":"tooltipAnimationDuration","required":false,"type":{"name":"number"}},"tooltipProps":{"defaultValue":null,"description":"Props passed down to the <code>Tooltip</code> component","name":"tooltipProps","required":false,"type":{"name":"RechartsProps"}},"unit":{"defaultValue":null,"description":"Unit displayed next to each tick in y-axis","name":"unit","required":false,"type":{"name":"string"}},"valueFormatter":{"defaultValue":null,"description":"A function to format values on Y axis and inside the tooltip","name":"valueFormatter","required":false,"type":{"name":"(value: number) => string"}},"withBarValueLabel":{"defaultValue":"`false`","description":"Determines whether a label with bar value should be displayed on top of each bar","name":"withBarValueLabel","required":false,"type":{"name":"boolean"}},"withDots":{"defaultValue":"`true`","description":"Determines whether dots should be displayed","name":"withDots","required":false,"type":{"name":"boolean"}},"withLegend":{"defaultValue":null,"description":"Determines whether chart legend should be displayed, <code>false</code> by default","name":"withLegend","required":false,"type":{"name":"boolean"}},"withPointLabels":{"defaultValue":"`false`","description":"Determines whether each point should have associated label","name":"withPointLabels","required":false,"type":{"name":"boolean"}},"withRightYAxis":{"defaultValue":null,"description":"Determines whether additional y-axis should be displayed on the right side of the chart, <code>false</code> by default","name":"withRightYAxis","required":false,"type":{"name":"boolean"}},"withTooltip":{"defaultValue":null,"description":"Determines whether chart tooltip should be displayed, <code>true</code> by default","name":"withTooltip","required":false,"type":{"name":"boolean"}},"withXAxis":{"defaultValue":null,"description":"Determines whether x-axis should be displayed, <code>true</code> by default","name":"withXAxis","required":false,"type":{"name":"boolean"}},"withYAxis":{"defaultValue":null,"description":"Determines whether y-axis should be displayed, <code>true</code> by default","name":"withYAxis","required":false,"type":{"name":"boolean"}},"xAxisLabel":{"defaultValue":null,"description":"A label to display below the x-axis","name":"xAxisLabel","required":false,"type":{"name":"string"}},"xAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>XAxis</code> recharts component","name":"xAxisProps","required":false,"type":{"name":"RechartsProps"}},"yAxisLabel":{"defaultValue":null,"description":"A label to display next to the y-axis","name":"yAxisLabel","required":false,"type":{"name":"string"}},"yAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>YAxis</code> recharts component","name":"yAxisProps","required":false,"type":{"name":"RechartsProps"}}}},"DonutChart":{"props":{"chartLabel":{"defaultValue":null,"description":"Chart label, displayed in the center of the chart","name":"chartLabel","required":false,"type":{"name":"string | number"}},"children":{"defaultValue":null,"description":"Additional elements rendered inside <code>PieChart</code> component","name":"children","required":false,"type":{"name":"React.ReactNode"}},"data":{"defaultValue":null,"description":"Data used to render chart","name":"data","required":true,"type":{"name":"DonutChartCell[]"}},"endAngle":{"defaultValue":"`360`","description":"Controls angle at which charts ends. Set to <code>0</code> to render the chart as semicircle.","name":"endAngle","required":false,"type":{"name":"number"}},"labelColor":{"defaultValue":null,"description":"Controls text color of all labels, by default depends on color scheme","name":"labelColor","required":false,"type":{"name":"MantineColor"}},"labelsType":{"defaultValue":null,"description":"Type of labels to display, <code>\'value\'</code> by default","name":"labelsType","required":false,"type":{"name":"\\"value\\" | \\"percent\\"","raw":"\\"value\\" | \\"percent\\" | undefined","value":[{"value":"undefined"},{"value":"\\"value\\""},{"value":"\\"percent\\""}]}},"paddingAngle":{"defaultValue":"`0`","description":"Controls padding between segments","name":"paddingAngle","required":false,"type":{"name":"number"}},"pieChartProps":{"defaultValue":null,"description":"Props passed down to recharts <code>PieChart</code> component","name":"pieChartProps","required":false,"type":{"name":"Omit<CategoricalChartProps & RefAttributes<{ readonly eventEmitterSymbol: Symbol; clipPathId: string; accessibilityManager: AccessibilityManager; ... 65 more ...; UNSAFE_componentWillUpdate?(nextProps: Readonly<...>, nextState: Readonly<...>, nextContext: any): void; }>, \\"ref\\">"}},"pieProps":{"defaultValue":null,"description":"Props passed down to recharts <code>Pie</code> component","name":"pieProps","required":false,"type":{"name":"Partial<Omit<Props, \\"ref\\">>"}},"size":{"defaultValue":"`80`","description":"Controls chart width and height, height is increased by 40 if <code>withLabels</code> prop is set. Cannot be less than <code>thickness</code>.","name":"size","required":false,"type":{"name":"number"}},"startAngle":{"defaultValue":"`0`","description":"Controls angle at which chart starts. Set to <code>180</code> to render the chart as semicircle.","name":"startAngle","required":false,"type":{"name":"number"}},"strokeColor":{"defaultValue":null,"description":"Controls color of the segments stroke, by default depends on color scheme","name":"strokeColor","required":false,"type":{"name":"MantineColor"}},"strokeWidth":{"defaultValue":"`1`","description":"Controls width of segments stroke","name":"strokeWidth","required":false,"type":{"name":"number"}},"thickness":{"defaultValue":"`20`","description":"Controls thickness of the chart segments","name":"thickness","required":false,"type":{"name":"number"}},"tooltipAnimationDuration":{"defaultValue":"`0`","description":"Tooltip animation duration in ms","name":"tooltipAnimationDuration","required":false,"type":{"name":"number"}},"tooltipDataSource":{"defaultValue":"`\'all\'`","description":"Determines which data is displayed in the tooltip. <code>\'all\'</code> – display all values, <code>\'segment\'</code> – display only hovered segment.","name":"tooltipDataSource","required":false,"type":{"name":"\\"all\\" | \\"segment\\"","raw":"\\"all\\" | \\"segment\\" | undefined","value":[{"value":"undefined"},{"value":"\\"all\\""},{"value":"\\"segment\\""}]}},"tooltipProps":{"defaultValue":null,"description":"Props passed down to <code>Tooltip</code> recharts component","name":"tooltipProps","required":false,"type":{"name":"RechartsProps"}},"valueFormatter":{"defaultValue":null,"description":"A function to format values inside the tooltip","name":"valueFormatter","required":false,"type":{"name":"(value: number) => string"}},"withLabels":{"defaultValue":"`false`","description":"Determines whether each segment should have associated label","name":"withLabels","required":false,"type":{"name":"boolean"}},"withLabelsLine":{"defaultValue":"`true`","description":"Determines whether segments labels should have lines that connect the segment with the label","name":"withLabelsLine","required":false,"type":{"name":"boolean"}},"withTooltip":{"defaultValue":"`true`","description":"Determines whether the tooltip should be displayed when one of the section is hovered","name":"withTooltip","required":false,"type":{"name":"boolean"}}}},"FunnelChart":{"props":{"children":{"defaultValue":null,"description":"Additional elements rendered inside <code>FunnelChart</code> component","name":"children","required":false,"type":{"name":"React.ReactNode"}},"data":{"defaultValue":null,"description":"Data used to render chart","name":"data","required":true,"type":{"name":"FunnelChartCell[]"}},"funnelChartProps":{"defaultValue":null,"description":"Props passed down to recharts <code>FunnelChart</code> component","name":"funnelChartProps","required":false,"type":{"name":"Omit<CategoricalChartProps & RefAttributes<{ readonly eventEmitterSymbol: Symbol; clipPathId: string; accessibilityManager: AccessibilityManager; ... 65 more ...; UNSAFE_componentWillUpdate?(nextProps: Readonly<...>, nextState: Readonly<...>, nextContext: any): void; }>, \\"ref\\">"}},"funnelProps":{"defaultValue":null,"description":"Props passed down to recharts <code>Pie</code> component","name":"funnelProps","required":false,"type":{"name":"Partial<Omit<FunnelProps, \\"ref\\">>"}},"labelColor":{"defaultValue":"`\'white\'`","description":"Controls text color of all labels","name":"labelColor","required":false,"type":{"name":"MantineColor"}},"labelsPosition":{"defaultValue":"`\'right\'`","description":"Controls labels position relative to the segment","name":"labelsPosition","required":false,"type":{"name":"\\"left\\" | \\"right\\" | \\"inside\\"","raw":"\\"left\\" | \\"right\\" | \\"inside\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""},{"value":"\\"inside\\""}]}},"size":{"defaultValue":"`300`","description":"Controls chart width and height","name":"size","required":false,"type":{"name":"number"}},"strokeColor":{"defaultValue":null,"description":"Controls color of the segments stroke, by default depends on color scheme","name":"strokeColor","required":false,"type":{"name":"MantineColor"}},"strokeWidth":{"defaultValue":"`1`","description":"Controls width of segments stroke","name":"strokeWidth","required":false,"type":{"name":"number"}},"tooltipAnimationDuration":{"defaultValue":"`0`","description":"Tooltip animation duration in ms","name":"tooltipAnimationDuration","required":false,"type":{"name":"number"}},"tooltipDataSource":{"defaultValue":"`\'all\'`","description":"Determines which data is displayed in the tooltip. <code>\'all\'</code> – display all values, <code>\'segment\'</code> – display only hovered segment.","name":"tooltipDataSource","required":false,"type":{"name":"\\"all\\" | \\"segment\\"","raw":"\\"all\\" | \\"segment\\" | undefined","value":[{"value":"undefined"},{"value":"\\"all\\""},{"value":"\\"segment\\""}]}},"tooltipProps":{"defaultValue":null,"description":"Props passed down to <code>Tooltip</code> recharts component","name":"tooltipProps","required":false,"type":{"name":"RechartsProps"}},"valueFormatter":{"defaultValue":null,"description":"A function to format values inside the tooltip and labels","name":"valueFormatter","required":false,"type":{"name":"(value: number) => string"}},"withLabels":{"defaultValue":"`false`","description":"Determines whether each segment should have associated label","name":"withLabels","required":false,"type":{"name":"boolean"}},"withTooltip":{"defaultValue":"`true`","description":"Determines whether the tooltip should be displayed when a section is hovered","name":"withTooltip","required":false,"type":{"name":"boolean"}}}},"Heatmap":{"props":{"colors":{"defaultValue":null,"description":"Colors array, used to calculate color for each value, by default 4 shades of green colors are used","name":"colors","required":false,"type":{"name":"string[]"}},"data":{"defaultValue":null,"description":"Heatmap data, key is date in <code>YYYY-MM-DD</code> format","name":"data","required":true,"type":{"name":"Record<string, number>"}},"domain":{"defaultValue":null,"description":"Heatmap domain, array of 2 numbers, min and max values, calculated from data by default","name":"domain","required":false,"type":{"name":"[number, number]"}},"endDate":{"defaultValue":null,"description":"Heatmap end date. Current date by default.","name":"endDate","required":false,"type":{"name":"string | Date"}},"firstDayOfWeek":{"defaultValue":"1 – Monday","description":"First day of week, 0 – Sunday, 1 – Monday.","name":"firstDayOfWeek","required":false,"type":{"name":"0 | 2 | 1 | 3 | 4 | 5 | 6","raw":"0 | 2 | 1 | 3 | 4 | 5 | 6 | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"fontSize":{"defaultValue":"12","description":"Font size of month and weekday labels","name":"fontSize","required":false,"type":{"name":"number"}},"gap":{"defaultValue":"1","description":"Gap between rects in px","name":"gap","required":false,"type":{"name":"number"}},"getRectProps":{"defaultValue":null,"description":"Props passed down to each rect depending on its date and associated value","name":"getRectProps","required":false,"type":{"name":"(input: HeatmapRectData) => Omit<SVGProps<SVGRectElement>, \\"ref\\">"}},"getTooltipLabel":{"defaultValue":null,"description":"A function to generate tooltip label based on the hovered rect date and value, required for the tooltip to be visible","name":"getTooltipLabel","required":false,"type":{"name":"(input: HeatmapRectData) => ReactNode"}},"monthLabels":{"defaultValue":null,"description":"Month labels, array of 12 elements, can be used for localization","name":"monthLabels","required":false,"type":{"name":"string[]"}},"monthsLabelsHeight":{"defaultValue":"30","description":"Height of month labels row","name":"monthsLabelsHeight","required":false,"type":{"name":"number"}},"rectRadius":{"defaultValue":"2","description":"Rect radius in px","name":"rectRadius","required":false,"type":{"name":"number"}},"rectSize":{"defaultValue":"10","description":"Size of day rect in px","name":"rectSize","required":false,"type":{"name":"number"}},"splitMonths":{"defaultValue":"`false`","description":"If set, inserts a spacer column between months","name":"splitMonths","required":false,"type":{"name":"boolean"}},"startDate":{"defaultValue":null,"description":"Heatmap start date. Current date - 1 year by default.","name":"startDate","required":false,"type":{"name":"string | Date"}},"tooltipProps":{"defaultValue":null,"description":"Props passed down to the <code>Tooltip.Floating</code> component","name":"tooltipProps","required":false,"type":{"name":"Partial<TooltipFloatingProps>"}},"weekdayLabels":{"defaultValue":null,"description":"Weekday labels, array of 7 elements, can be used for localization","name":"weekdayLabels","required":false,"type":{"name":"string[]"}},"weekdaysLabelsWidth":{"defaultValue":"30","description":"Width of weekday labels column","name":"weekdaysLabelsWidth","required":false,"type":{"name":"number"}},"withMonthLabels":{"defaultValue":"`false`","description":"If set, month labels are displayed","name":"withMonthLabels","required":false,"type":{"name":"boolean"}},"withOutsideDates":{"defaultValue":"`true`","description":"If set, trailing dates that do not fall into the given <code>startDate</code> – <code>endDate</code> range are displayed to fill empty space.","name":"withOutsideDates","required":false,"type":{"name":"boolean"}},"withTooltip":{"defaultValue":"`false`","description":"If set, tooltip is displayed on rect hover","name":"withTooltip","required":false,"type":{"name":"boolean"}},"withWeekdayLabels":{"defaultValue":"`false`","description":"If set, weekday labels are displayed","name":"withWeekdayLabels","required":false,"type":{"name":"boolean"}}}},"LineChart":{"props":{"activeDotProps":{"defaultValue":null,"description":"Props passed down to all active dots. Ignored if <code>withDots={false}</code> is set.","name":"activeDotProps","required":false,"type":{"name":"MantineChartDotProps"}},"children":{"defaultValue":null,"description":"Additional components that are rendered inside recharts <code>LineChart</code> component","name":"children","required":false,"type":{"name":"React.ReactNode"}},"connectNulls":{"defaultValue":"`true`","description":"Determines whether points with <code>null</code> values should be connected","name":"connectNulls","required":false,"type":{"name":"boolean"}},"curveType":{"defaultValue":"`\'monotone\'`","description":"Type of the curve","name":"curveType","required":false,"type":{"name":"LineChartCurveType","raw":"LineChartCurveType | undefined","value":[{"value":"undefined"},{"value":"\\"step\\""},{"value":"\\"linear\\""},{"value":"\\"bump\\""},{"value":"\\"natural\\""},{"value":"\\"monotone\\""},{"value":"\\"stepBefore\\""},{"value":"\\"stepAfter\\""}]}},"data":{"defaultValue":null,"description":"Data used to display chart","name":"data","required":true,"type":{"name":"Record<string, any>[]"}},"dataKey":{"defaultValue":null,"description":"Key of the <code>data</code> object for x-axis values","name":"dataKey","required":true,"type":{"name":"string"}},"dotProps":{"defaultValue":null,"description":"Props passed down to all dots. Ignored if <code>withDots={false}</code> is set.","name":"dotProps","required":false,"type":{"name":"MantineChartDotProps"}},"fillOpacity":{"defaultValue":"`1`","description":"Controls fill opacity of all lines","name":"fillOpacity","required":false,"type":{"name":"number"}},"gradientStops":{"defaultValue":"`[{ offset: 0, color: \'red\' }, { offset: 100, color: \'blue\' }]`","description":"Data used to generate gradient stops","name":"gradientStops","required":false,"type":{"name":"LineChartGradientStop[]"}},"gridAxis":{"defaultValue":null,"description":"Specifies which lines should be displayed in the grid, <code>\'x\'</code> by default","name":"gridAxis","required":false,"type":{"name":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\"","raw":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\" | undefined","value":[{"value":"undefined"},{"value":"\\"none\\""},{"value":"\\"x\\""},{"value":"\\"y\\""},{"value":"\\"xy\\""}]}},"gridColor":{"defaultValue":null,"description":"Color of the grid and cursor lines, by default depends on color scheme","name":"gridColor","required":false,"type":{"name":"MantineColor"}},"gridProps":{"defaultValue":null,"description":"Props passed down to the <code>CartesianGrid</code> component","name":"gridProps","required":false,"type":{"name":"RechartsProps"}},"legendProps":{"defaultValue":null,"description":"Props passed down to the <code>Legend</code> component","name":"legendProps","required":false,"type":{"name":"RechartsProps"}},"lineChartProps":{"defaultValue":null,"description":"Props passed down to recharts <code>LineChart</code> component","name":"lineChartProps","required":false,"type":{"name":"Omit<CategoricalChartProps & RefAttributes<{ readonly eventEmitterSymbol: Symbol; clipPathId: string; accessibilityManager: AccessibilityManager; ... 65 more ...; UNSAFE_componentWillUpdate?(nextProps: Readonly<...>, nextState: Readonly<...>, nextContext: any): void; }>, \\"ref\\">"}},"lineProps":{"defaultValue":null,"description":"Props passed down to recharts <code>Line</code> component","name":"lineProps","required":false,"type":{"name":"Partial<Omit<Props, \\"ref\\">> | ((series: LineChartSeries) => Partial<Omit<Props, \\"ref\\">>)"}},"orientation":{"defaultValue":null,"description":"Chart orientation, <code>\'horizontal\'</code> by default","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"referenceLines":{"defaultValue":null,"description":"Reference lines that should be displayed on the chart","name":"referenceLines","required":false,"type":{"name":"ChartReferenceLineProps[]"}},"rightYAxisLabel":{"defaultValue":null,"description":"A label to display next to the right y-axis","name":"rightYAxisLabel","required":false,"type":{"name":"string"}},"rightYAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>YAxis</code> recharts component rendered on the right side","name":"rightYAxisProps","required":false,"type":{"name":"RechartsProps"}},"series":{"defaultValue":null,"description":"An array of objects with <code>name</code> and <code>color</code> keys. Determines which data should be consumed from the <code>data</code> array.","name":"series","required":true,"type":{"name":"LineChartSeries[]"}},"strokeDasharray":{"defaultValue":null,"description":"Dash array for the grid lines and cursor, <code>\'5 5\'</code> by default","name":"strokeDasharray","required":false,"type":{"name":"string | number"}},"strokeWidth":{"defaultValue":"`2`","description":"Stroke width for the chart lines","name":"strokeWidth","required":false,"type":{"name":"number"}},"textColor":{"defaultValue":null,"description":"Color of the text displayed inside the chart, <code>\'dimmed\'</code> by default","name":"textColor","required":false,"type":{"name":"MantineColor"}},"tickLine":{"defaultValue":null,"description":"Specifies which axis should have tick line, <code>\'y\'</code> by default","name":"tickLine","required":false,"type":{"name":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\"","raw":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\" | undefined","value":[{"value":"undefined"},{"value":"\\"none\\""},{"value":"\\"x\\""},{"value":"\\"y\\""},{"value":"\\"xy\\""}]}},"tooltipAnimationDuration":{"defaultValue":null,"description":"Tooltip position animation duration in ms, <code>0</code> by default","name":"tooltipAnimationDuration","required":false,"type":{"name":"number"}},"tooltipProps":{"defaultValue":null,"description":"Props passed down to the <code>Tooltip</code> component","name":"tooltipProps","required":false,"type":{"name":"RechartsProps"}},"type":{"defaultValue":"`\'default\'`","description":"Controls styles of the line","name":"type","required":false,"type":{"name":"LineChartType","raw":"LineChartType | undefined","value":[{"value":"undefined"},{"value":"\\"default\\""},{"value":"\\"gradient\\""}]}},"unit":{"defaultValue":null,"description":"Unit displayed next to each tick in y-axis","name":"unit","required":false,"type":{"name":"string"}},"valueFormatter":{"defaultValue":null,"description":"A function to format values on Y axis and inside the tooltip","name":"valueFormatter","required":false,"type":{"name":"(value: number) => string"}},"withDots":{"defaultValue":"`true`","description":"Determines whether dots should be displayed","name":"withDots","required":false,"type":{"name":"boolean"}},"withLegend":{"defaultValue":null,"description":"Determines whether chart legend should be displayed, <code>false</code> by default","name":"withLegend","required":false,"type":{"name":"boolean"}},"withPointLabels":{"defaultValue":"`false`","description":"Determines whether each point should have associated label","name":"withPointLabels","required":false,"type":{"name":"boolean"}},"withRightYAxis":{"defaultValue":null,"description":"Determines whether additional y-axis should be displayed on the right side of the chart, <code>false</code> by default","name":"withRightYAxis","required":false,"type":{"name":"boolean"}},"withTooltip":{"defaultValue":null,"description":"Determines whether chart tooltip should be displayed, <code>true</code> by default","name":"withTooltip","required":false,"type":{"name":"boolean"}},"withXAxis":{"defaultValue":null,"description":"Determines whether x-axis should be displayed, <code>true</code> by default","name":"withXAxis","required":false,"type":{"name":"boolean"}},"withYAxis":{"defaultValue":null,"description":"Determines whether y-axis should be displayed, <code>true</code> by default","name":"withYAxis","required":false,"type":{"name":"boolean"}},"xAxisLabel":{"defaultValue":null,"description":"A label to display below the x-axis","name":"xAxisLabel","required":false,"type":{"name":"string"}},"xAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>XAxis</code> recharts component","name":"xAxisProps","required":false,"type":{"name":"RechartsProps"}},"yAxisLabel":{"defaultValue":null,"description":"A label to display next to the y-axis","name":"yAxisLabel","required":false,"type":{"name":"string"}},"yAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>YAxis</code> recharts component","name":"yAxisProps","required":false,"type":{"name":"RechartsProps"}}}},"PieChart":{"props":{"children":{"defaultValue":null,"description":"Additional elements rendered inside <code>PieChart</code> component","name":"children","required":false,"type":{"name":"React.ReactNode"}},"data":{"defaultValue":null,"description":"Data used to render chart","name":"data","required":true,"type":{"name":"PieChartCell[]"}},"endAngle":{"defaultValue":"`360`","description":"Controls angle at which charts ends. Set to <code>0</code> to render the chart as semicircle.","name":"endAngle","required":false,"type":{"name":"number"}},"labelColor":{"defaultValue":null,"description":"Controls text color of all labels, white by default","name":"labelColor","required":false,"type":{"name":"MantineColor"}},"labelsPosition":{"defaultValue":"`\'outside\'`","description":"Controls labels position relative to the segment","name":"labelsPosition","required":false,"type":{"name":"\\"outside\\" | \\"inside\\"","raw":"\\"outside\\" | \\"inside\\" | undefined","value":[{"value":"undefined"},{"value":"\\"outside\\""},{"value":"\\"inside\\""}]}},"labelsType":{"defaultValue":"`\'value\'`","description":"Type of labels to display","name":"labelsType","required":false,"type":{"name":"\\"value\\" | \\"percent\\"","raw":"\\"value\\" | \\"percent\\" | undefined","value":[{"value":"undefined"},{"value":"\\"value\\""},{"value":"\\"percent\\""}]}},"paddingAngle":{"defaultValue":"`0`","description":"Controls padding between segments","name":"paddingAngle","required":false,"type":{"name":"number"}},"pieChartProps":{"defaultValue":null,"description":"Props passed down to recharts <code>PieChart</code> component","name":"pieChartProps","required":false,"type":{"name":"Omit<CategoricalChartProps & RefAttributes<{ readonly eventEmitterSymbol: Symbol; clipPathId: string; accessibilityManager: AccessibilityManager; ... 65 more ...; UNSAFE_componentWillUpdate?(nextProps: Readonly<...>, nextState: Readonly<...>, nextContext: any): void; }>, \\"ref\\">"}},"pieProps":{"defaultValue":null,"description":"Props passed down to recharts <code>Pie</code> component","name":"pieProps","required":false,"type":{"name":"Partial<Omit<Props, \\"ref\\">>"}},"size":{"defaultValue":"`80`","description":"Controls chart width and height, height is increased by 40 if <code>withLabels</code> prop is set. Cannot be less than <code>thickness</code>.","name":"size","required":false,"type":{"name":"number"}},"startAngle":{"defaultValue":"`0`","description":"Controls angle at which chart starts. Set to <code>180</code> to render the chart as semicircle.","name":"startAngle","required":false,"type":{"name":"number"}},"strokeColor":{"defaultValue":null,"description":"Controls color of the segments stroke, by default depends on color scheme","name":"strokeColor","required":false,"type":{"name":"MantineColor"}},"strokeWidth":{"defaultValue":"`1`","description":"Controls width of segments stroke","name":"strokeWidth","required":false,"type":{"name":"number"}},"tooltipAnimationDuration":{"defaultValue":"`0`","description":"Tooltip animation duration in ms","name":"tooltipAnimationDuration","required":false,"type":{"name":"number"}},"tooltipDataSource":{"defaultValue":"`\'all\'`","description":"Determines which data is displayed in the tooltip. <code>\'all\'</code> – display all values, <code>\'segment\'</code> – display only hovered segment.","name":"tooltipDataSource","required":false,"type":{"name":"\\"all\\" | \\"segment\\"","raw":"\\"all\\" | \\"segment\\" | undefined","value":[{"value":"undefined"},{"value":"\\"all\\""},{"value":"\\"segment\\""}]}},"tooltipProps":{"defaultValue":null,"description":"Props passed down to <code>Tooltip</code> recharts component","name":"tooltipProps","required":false,"type":{"name":"RechartsProps"}},"valueFormatter":{"defaultValue":null,"description":"A function to format values inside the tooltip","name":"valueFormatter","required":false,"type":{"name":"(value: number) => string"}},"withLabels":{"defaultValue":"`false`","description":"Determines whether each segment should have associated label","name":"withLabels","required":false,"type":{"name":"boolean"}},"withLabelsLine":{"defaultValue":"`true`","description":"Determines whether segments labels should have lines that connect the segment with the label","name":"withLabelsLine","required":false,"type":{"name":"boolean"}},"withTooltip":{"defaultValue":"`true`","description":"Determines whether the tooltip should be displayed when one of the section is hovered","name":"withTooltip","required":false,"type":{"name":"boolean"}}}},"PointLabel":{"props":{"value":{"defaultValue":null,"description":"","name":"value","required":false,"type":{"name":"number"}},"valueFormatter":{"defaultValue":null,"description":"","name":"valueFormatter","required":false,"type":{"name":"(value: number) => string"}},"x":{"defaultValue":null,"description":"","name":"x","required":false,"type":{"name":"number"}},"y":{"defaultValue":null,"description":"","name":"y","required":false,"type":{"name":"number"}}}},"RadarChart":{"props":{"activeDotProps":{"defaultValue":null,"description":"Props passed down to all active dots. Ignored if <code>withDots={false}</code> is set.","name":"activeDotProps","required":false,"type":{"name":"MantineChartDotProps"}},"children":{"defaultValue":null,"description":"Additional components that are rendered inside recharts <code>RadarChart</code> component","name":"children","required":false,"type":{"name":"React.ReactNode"}},"data":{"defaultValue":null,"description":"Data used in the chart","name":"data","required":true,"type":{"name":"Record<string, any>[]"}},"dataKey":{"defaultValue":null,"description":"Key of the <code>data</code> object for axis values","name":"dataKey","required":true,"type":{"name":"string"}},"dotProps":{"defaultValue":null,"description":"Props passed down to all dots. Ignored if <code>withDots={false}</code> is set.","name":"dotProps","required":false,"type":{"name":"MantineChartDotProps"}},"gridColor":{"defaultValue":null,"description":"Controls color of the grid lines. By default, color depends on the color scheme.","name":"gridColor","required":false,"type":{"name":"MantineColor"}},"legendProps":{"defaultValue":null,"description":"Props passed down to recharts Legend component","name":"legendProps","required":false,"type":{"name":"RechartsProps"}},"polarAngleAxisProps":{"defaultValue":null,"description":"Props passed down to recharts PolarAngleAxis component","name":"polarAngleAxisProps","required":false,"type":{"name":"RechartsProps"}},"polarGridProps":{"defaultValue":null,"description":"Props passed down to recharts PolarGrid component","name":"polarGridProps","required":false,"type":{"name":"RechartsProps"}},"polarRadiusAxisProps":{"defaultValue":null,"description":"Props passed down to recharts PolarRadiusAxis component","name":"polarRadiusAxisProps","required":false,"type":{"name":"RechartsProps"}},"radarChartProps":{"defaultValue":null,"description":"Props passed down to recharts RadarChart component","name":"radarChartProps","required":false,"type":{"name":"Omit<CategoricalChartProps & RefAttributes<{ readonly eventEmitterSymbol: Symbol; clipPathId: string; accessibilityManager: AccessibilityManager; ... 65 more ...; UNSAFE_componentWillUpdate?(nextProps: Readonly<...>, nextState: Readonly<...>, nextContext: any): void; }>, \\"ref\\">"}},"radarProps":{"defaultValue":null,"description":"Props passed down to recharts Radar component","name":"radarProps","required":false,"type":{"name":"((series: RadarChartSeries) => Partial<Omit<Props, \\"ref\\">>) | Partial<Omit<Props, \\"ref\\">>"}},"series":{"defaultValue":null,"description":"Determines which data should be consumed from the <code>data</code> array.","name":"series","required":true,"type":{"name":"RadarChartSeries[]"}},"textColor":{"defaultValue":null,"description":"Controls color of all text elements. By default, color depends on the color scheme.","name":"textColor","required":false,"type":{"name":"MantineColor"}},"tooltipAnimationDuration":{"defaultValue":"`0`","description":"Tooltip position animation duration in ms","name":"tooltipAnimationDuration","required":false,"type":{"name":"number"}},"tooltipProps":{"defaultValue":null,"description":"Props passed down to recharts Tooltip component","name":"tooltipProps","required":false,"type":{"name":"RechartsProps"}},"withDots":{"defaultValue":"`false`","description":"Determines whether dots should be displayed","name":"withDots","required":false,"type":{"name":"boolean"}},"withLegend":{"defaultValue":"`false`","description":"Determines whether the legend should be displayed","name":"withLegend","required":false,"type":{"name":"boolean"}},"withPolarAngleAxis":{"defaultValue":"`true`","description":"Determines whether PolarAngleAxis component should be displayed","name":"withPolarAngleAxis","required":false,"type":{"name":"boolean"}},"withPolarGrid":{"defaultValue":"`true`.","description":"Determines whether PolarGrid component should be displayed","name":"withPolarGrid","required":false,"type":{"name":"boolean"}},"withPolarRadiusAxis":{"defaultValue":"`false`","description":"Determines whether PolarRadiusAxisProps component should be displayed","name":"withPolarRadiusAxis","required":false,"type":{"name":"boolean"}},"withTooltip":{"defaultValue":"`false`","description":"Determines whether Tooltip component should be displayed","name":"withTooltip","required":false,"type":{"name":"boolean"}}}},"RadialBarChart":{"props":{"barSize":{"defaultValue":null,"description":"Size of bars in px, <code>20</code> by default","name":"barSize","required":false,"type":{"name":"number"}},"data":{"defaultValue":null,"description":"Chart data","name":"data","required":true,"type":{"name":"Record<string, any>[]"}},"dataKey":{"defaultValue":null,"description":"Key from data object to use as data key","name":"dataKey","required":true,"type":{"name":"string"}},"emptyBackgroundColor":{"defaultValue":null,"description":"Color of the empty background, by default depends on the color scheme","name":"emptyBackgroundColor","required":false,"type":{"name":"string"}},"endAngle":{"defaultValue":"`-270`","description":"Angle at which chart ends","name":"endAngle","required":false,"type":{"name":"number"}},"legendProps":{"defaultValue":null,"description":"Props passed down to recharts Legend component","name":"legendProps","required":false,"type":{"name":"RechartsProps"}},"radialBarChartProps":{"defaultValue":null,"description":"Props passed down to recharts RadarChartChart component","name":"radialBarChartProps","required":false,"type":{"name":"Omit<CategoricalChartProps & RefAttributes<{ readonly eventEmitterSymbol: Symbol; clipPathId: string; accessibilityManager: AccessibilityManager; ... 65 more ...; UNSAFE_componentWillUpdate?(nextProps: Readonly<...>, nextState: Readonly<...>, nextContext: any): void; }>, \\"ref\\">"}},"radialBarProps":{"defaultValue":null,"description":"Props passed down to recharts RadialBar component","name":"radialBarProps","required":false,"type":{"name":"Omit<RadialBarProps, \\"ref\\">"}},"startAngle":{"defaultValue":"`90`","description":"Angle at which chart starts","name":"startAngle","required":false,"type":{"name":"number"}},"tooltipProps":{"defaultValue":null,"description":"Props passed down to <code>Tooltip</code> recharts component","name":"tooltipProps","required":false,"type":{"name":"RechartsProps"}},"withBackground":{"defaultValue":"`true`","description":"Determines whether empty bars area should be visible","name":"withBackground","required":false,"type":{"name":"boolean"}},"withLabels":{"defaultValue":"`false`","description":"Determines whether labels should be displayed","name":"withLabels","required":false,"type":{"name":"boolean"}},"withLegend":{"defaultValue":"`false`","description":"Determines whether the legend should be displayed","name":"withLegend","required":false,"type":{"name":"boolean"}},"withTooltip":{"defaultValue":"`true`","description":"Determines whether the tooltip should be displayed when one of the bars is hovered","name":"withTooltip","required":false,"type":{"name":"boolean"}}}},"ScatterChart":{"props":{"data":{"defaultValue":null,"description":"Data that is used to build the chart","name":"data","required":true,"type":{"name":"ScatterChartSeries[]"}},"dataKey":{"defaultValue":null,"description":"Keys that should be used to retrieve data from the data array on x and y axis","name":"dataKey","required":true,"type":{"name":"{ x: string; y: string; }"}},"gridAxis":{"defaultValue":null,"description":"Specifies which lines should be displayed in the grid, <code>\'x\'</code> by default","name":"gridAxis","required":false,"type":{"name":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\"","raw":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\" | undefined","value":[{"value":"undefined"},{"value":"\\"none\\""},{"value":"\\"x\\""},{"value":"\\"y\\""},{"value":"\\"xy\\""}]}},"gridColor":{"defaultValue":null,"description":"Color of the grid and cursor lines, by default depends on color scheme","name":"gridColor","required":false,"type":{"name":"MantineColor"}},"gridProps":{"defaultValue":null,"description":"Props passed down to the <code>CartesianGrid</code> component","name":"gridProps","required":false,"type":{"name":"RechartsProps"}},"labels":{"defaultValue":null,"description":"Labels that should be used instead of keys names in the tooltip","name":"labels","required":false,"type":{"name":"{ x?: string; y?: string | undefined; } | undefined"}},"legendProps":{"defaultValue":null,"description":"Props passed down to the <code>Legend</code> component","name":"legendProps","required":false,"type":{"name":"RechartsProps"}},"orientation":{"defaultValue":null,"description":"Chart orientation, <code>\'horizontal\'</code> by default","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"pointLabels":{"defaultValue":null,"description":"If set, displays labels next to points for the given axis","name":"pointLabels","required":false,"type":{"name":"\\"x\\" | \\"y\\"","raw":"\\"x\\" | \\"y\\" | undefined","value":[{"value":"undefined"},{"value":"\\"x\\""},{"value":"\\"y\\""}]}},"referenceLines":{"defaultValue":null,"description":"Reference lines that should be displayed on the chart","name":"referenceLines","required":false,"type":{"name":"ChartReferenceLineProps[]"}},"rightYAxisLabel":{"defaultValue":null,"description":"A label to display next to the right y-axis","name":"rightYAxisLabel","required":false,"type":{"name":"string"}},"rightYAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>YAxis</code> recharts component rendered on the right side","name":"rightYAxisProps","required":false,"type":{"name":"RechartsProps"}},"scatterChartProps":{"defaultValue":null,"description":"Props passed down to recharts <code>ScatterChart</code> component","name":"scatterChartProps","required":false,"type":{"name":"Omit<CategoricalChartProps & RefAttributes<{ readonly eventEmitterSymbol: Symbol; clipPathId: string; accessibilityManager: AccessibilityManager; ... 65 more ...; UNSAFE_componentWillUpdate?(nextProps: Readonly<...>, nextState: Readonly<...>, nextContext: any): void; }>, \\"ref\\">"}},"scatterProps":{"defaultValue":null,"description":"Props passed down to recharts <code>Scatter</code> component","name":"scatterProps","required":false,"type":{"name":"Partial<Omit<Props, \\"ref\\">>"}},"strokeDasharray":{"defaultValue":null,"description":"Dash array for the grid lines and cursor, <code>\'5 5\'</code> by default","name":"strokeDasharray","required":false,"type":{"name":"string | number"}},"textColor":{"defaultValue":null,"description":"Color of the text displayed inside the chart, <code>\'dimmed\'</code> by default","name":"textColor","required":false,"type":{"name":"MantineColor"}},"tickLine":{"defaultValue":null,"description":"Specifies which axis should have tick line, <code>\'y\'</code> by default","name":"tickLine","required":false,"type":{"name":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\"","raw":"\\"none\\" | \\"x\\" | \\"y\\" | \\"xy\\" | undefined","value":[{"value":"undefined"},{"value":"\\"none\\""},{"value":"\\"x\\""},{"value":"\\"y\\""},{"value":"\\"xy\\""}]}},"tooltipAnimationDuration":{"defaultValue":null,"description":"Tooltip position animation duration in ms, <code>0</code> by default","name":"tooltipAnimationDuration","required":false,"type":{"name":"number"}},"tooltipProps":{"defaultValue":null,"description":"Props passed down to the <code>Tooltip</code> component","name":"tooltipProps","required":false,"type":{"name":"RechartsProps"}},"unit":{"defaultValue":null,"description":"Units displayed after value on axis and inside the tooltip","name":"unit","required":false,"type":{"name":"{ x?: string; y?: string | undefined; } | undefined"}},"valueFormatter":{"defaultValue":null,"description":"A function to format values on x/y axis and in the tooltip","name":"valueFormatter","required":false,"type":{"name":"((value: number) => string) | { x?: ((value: number) => string); y?: ((value: number) => string) | undefined; } | undefined"}},"withLegend":{"defaultValue":null,"description":"Determines whether chart legend should be displayed, <code>false</code> by default","name":"withLegend","required":false,"type":{"name":"boolean"}},"withRightYAxis":{"defaultValue":null,"description":"Determines whether additional y-axis should be displayed on the right side of the chart, <code>false</code> by default","name":"withRightYAxis","required":false,"type":{"name":"boolean"}},"withTooltip":{"defaultValue":null,"description":"Determines whether chart tooltip should be displayed, <code>true</code> by default","name":"withTooltip","required":false,"type":{"name":"boolean"}},"withXAxis":{"defaultValue":null,"description":"Determines whether x-axis should be displayed, <code>true</code> by default","name":"withXAxis","required":false,"type":{"name":"boolean"}},"withYAxis":{"defaultValue":null,"description":"Determines whether y-axis should be displayed, <code>true</code> by default","name":"withYAxis","required":false,"type":{"name":"boolean"}},"xAxisLabel":{"defaultValue":null,"description":"A label to display below the x-axis","name":"xAxisLabel","required":false,"type":{"name":"string"}},"xAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>XAxis</code> recharts component","name":"xAxisProps","required":false,"type":{"name":"RechartsProps"}},"yAxisLabel":{"defaultValue":null,"description":"A label to display next to the y-axis","name":"yAxisLabel","required":false,"type":{"name":"string"}},"yAxisProps":{"defaultValue":null,"description":"Props passed down to the <code>YAxis</code> recharts component","name":"yAxisProps","required":false,"type":{"name":"RechartsProps"}}}},"Sparkline":{"props":{"areaProps":{"defaultValue":null,"description":"Props passed down to the underlying recharts <code>Area</code> component","name":"areaProps","required":false,"type":{"name":"Omit<Props, \\"ref\\" | \\"data\\" | \\"dataKey\\">"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color","name":"color","required":false,"type":{"name":"MantineColor"}},"connectNulls":{"defaultValue":"`true`","description":"Determines whether null values should be connected with other values","name":"connectNulls","required":false,"type":{"name":"boolean"}},"curveType":{"defaultValue":"`\'linear\'`","description":"Type of the curve","name":"curveType","required":false,"type":{"name":"AreaChartCurveType","raw":"AreaChartCurveType | undefined","value":[{"value":"undefined"},{"value":"\\"step\\""},{"value":"\\"linear\\""},{"value":"\\"bump\\""},{"value":"\\"natural\\""},{"value":"\\"monotone\\""},{"value":"\\"stepBefore\\""},{"value":"\\"stepAfter\\""}]}},"data":{"defaultValue":null,"description":"Data used to render the chart","name":"data","required":true,"type":{"name":"(number | null)[]"}},"fillOpacity":{"defaultValue":"`0.6`","description":"Controls fill opacity of the area","name":"fillOpacity","required":false,"type":{"name":"number"}},"strokeWidth":{"defaultValue":"`2`","description":"Area stroke width","name":"strokeWidth","required":false,"type":{"name":"number"}},"trendColors":{"defaultValue":null,"description":"If set, <code>color</code> prop is ignored and chart color is determined by the difference between first and last value.","name":"trendColors","required":false,"type":{"name":"SparklineTrendColors"}},"withGradient":{"defaultValue":"`true`","description":"Determines whether the chart fill should be a gradient","name":"withGradient","required":false,"type":{"name":"boolean"}}}},"InputLabel":{"props":{"labelElement":{"defaultValue":"`\'label\'`","description":"Root element of the label","name":"labelElement","required":false,"type":{"name":"\\"div\\" | \\"label\\"","raw":"\\"div\\" | \\"label\\" | undefined","value":[{"value":"undefined"},{"value":"\\"div\\""},{"value":"\\"label\\""}]}},"required":{"defaultValue":null,"description":"If set, the required asterisk is displayed next to the label","name":"required","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls label <code>font-size</code>","name":"size","required":false,"type":{"name":"MantineFontSize"}}}},"InputWrapper":{"props":{"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"id":{"defaultValue":null,"description":"Static id used as base to generate <code>aria-</code> attributes, by default generates random id","name":"id","required":false,"type":{"name":"string"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelElement":{"defaultValue":null,"description":"<code>Input.Label</code> root element, <code>\'label\'</code> by default","name":"labelElement","required":false,"type":{"name":"\\"div\\" | \\"label\\"","raw":"\\"div\\" | \\"label\\" | undefined","value":[{"value":"undefined"},{"value":"\\"div\\""},{"value":"\\"label\\""}]}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":null,"description":"Controls size of <code>Input.Label</code>, <code>Input.Description</code> and <code>Input.Error</code> components","name":"size","required":false,"type":{"name":"MantineFontSize"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}}}},"InputDescription":{"props":{"size":{"defaultValue":"`\'sm\'`","description":"Controls description <code>font-size</code>","name":"size","required":false,"type":{"name":"MantineFontSize"}}}},"InputError":{"props":{"size":{"defaultValue":"`\'sm\'`","description":"Controls error <code>font-size</code>","name":"size","required":false,"type":{"name":"MantineFontSize"}}}},"ButtonGroup":{"props":{"borderWidth":{"defaultValue":"`1`","description":"<code>border-width</code> of the child <code>Button</code> components. Numbers are converted to rem.","name":"borderWidth","required":false,"type":{"name":"string | number"}},"children":{"defaultValue":null,"description":"<code>Button</code> components","name":"children","required":false,"type":{"name":"React.ReactNode"}},"orientation":{"defaultValue":"`horizontal`","description":"Orientation of the group","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}}}},"AvatarGroup":{"props":{"spacing":{"defaultValue":"`\'sm\'`","description":"Negative space between Avatar components","name":"spacing","required":false,"type":{"name":"MantineSpacing"}}}},"ActionIconGroup":{"props":{"borderWidth":{"defaultValue":"`1`","description":"<code>border-width</code> of the child components.","name":"borderWidth","required":false,"type":{"name":"string | number"}},"children":{"defaultValue":null,"description":"<code>ActionIcon</code> and <code>ActionIcon.GroupSection</code> components only","name":"children","required":false,"type":{"name":"React.ReactNode"}},"orientation":{"defaultValue":"`\'horizontal\'`","description":"Group orientation","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}}}},"PopoverTarget":{"props":{"children":{"defaultValue":null,"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"popupType":{"defaultValue":"`\'dialog\'`","description":"Popup accessible type","name":"popupType","required":false,"type":{"name":"string"}},"refProp":{"defaultValue":null,"description":"Key of the prop that should be used to access element ref","name":"refProp","required":false,"type":{"name":"string"}}}},"PopoverDropdown":{"description":"","props":{}},"Slider":{"props":{"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color, controls color of track and thumb","name":"color","required":false,"type":{"name":"MantineColor"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"number"}},"disabled":{"defaultValue":null,"description":"Disables slider","name":"disabled","required":false,"type":{"name":"boolean"}},"domain":{"defaultValue":"`[min, max]`","description":"Domain of the slider, defines the full range of possible values","name":"domain","required":false,"type":{"name":"[number, number]"}},"hiddenInputProps":{"defaultValue":null,"description":"Props passed down to the hidden input","name":"hiddenInputProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"input\\">"}},"inverted":{"defaultValue":"`false`","description":"Determines whether track value representation should be inverted","name":"inverted","required":false,"type":{"name":"boolean"}},"label":{"defaultValue":null,"description":"Function to generate label or any react node to render instead, set to null to disable label","name":"label","required":false,"type":{"name":"ReactNode | ((value: number) => ReactNode)"}},"labelAlwaysOn":{"defaultValue":"`false`","description":"Determines whether the label should be visible when the slider is not being dragged or hovered","name":"labelAlwaysOn","required":false,"type":{"name":"boolean"}},"labelTransitionProps":{"defaultValue":"`{ transition: \'fade\', duration: 0 }`","description":"Props passed down to the <code>Transition</code> component","name":"labelTransitionProps","required":false,"type":{"name":"TransitionProps"}},"marks":{"defaultValue":null,"description":"Marks displayed on the track","name":"marks","required":false,"type":{"name":"{ value: number; label?: ReactNode; }[]"}},"max":{"defaultValue":"`100`","description":"Maximum possible value","name":"max","required":false,"type":{"name":"number"}},"min":{"defaultValue":"`0`","description":"Minimal possible value","name":"min","required":false,"type":{"name":"number"}},"name":{"defaultValue":null,"description":"Hidden input name, use with uncontrolled component","name":"name","required":false,"type":{"name":"string"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: number) => void"}},"onChangeEnd":{"defaultValue":null,"description":"Called when user stops dragging slider or changes value with arrows","name":"onChangeEnd","required":false,"type":{"name":"(value: number) => void"}},"precision":{"defaultValue":null,"description":"Number of significant digits after the decimal point","name":"precision","required":false,"type":{"name":"number"}},"radius":{"defaultValue":"`\'xl\'`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"restrictToMarks":{"defaultValue":"`false`","description":"Determines whether the selection should be only allowed from the given marks array","name":"restrictToMarks","required":false,"type":{"name":"boolean"}},"scale":{"defaultValue":null,"description":"A transformation function to change the scale of the slider","name":"scale","required":false,"type":{"name":"(value: number) => number"}},"showLabelOnHover":{"defaultValue":"`true`","description":"Determines whether the label should be displayed when the slider is hovered","name":"showLabelOnHover","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":"`\'md\'`","description":"Controls size of the track","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"step":{"defaultValue":"`1`","description":"Number by which value will be incremented/decremented with thumb drag and arrows","name":"step","required":false,"type":{"name":"number"}},"thumbChildren":{"defaultValue":null,"description":"Content rendered inside thumb","name":"thumbChildren","required":false,"type":{"name":"React.ReactNode"}},"thumbLabel":{"defaultValue":null,"description":"Thumb <code>aria-label</code>","name":"thumbLabel","required":false,"type":{"name":"string"}},"thumbProps":{"defaultValue":null,"description":"Props passed down to thumb element","name":"thumbProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"thumbSize":{"defaultValue":null,"description":"Thumb <code>width</code> and <code>height</code>, by default value is computed based on <code>size</code> prop","name":"thumbSize","required":false,"type":{"name":"string | number"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"number"}}}},"RangeSlider":{"props":{"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color, controls color of track and thumb","name":"color","required":false,"type":{"name":"MantineColor"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"RangeSliderValue"}},"disabled":{"defaultValue":null,"description":"Disables slider","name":"disabled","required":false,"type":{"name":"boolean"}},"domain":{"defaultValue":"`[min, max]`","description":"Domain of the slider, defines the full range of possible values","name":"domain","required":false,"type":{"name":"[number, number]"}},"hiddenInputProps":{"defaultValue":null,"description":"Props passed down to the hidden input","name":"hiddenInputProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"input\\">"}},"inverted":{"defaultValue":"`false`","description":"Determines whether track values representation should be inverted","name":"inverted","required":false,"type":{"name":"boolean"}},"label":{"defaultValue":null,"description":"Function to generate label or any react node to render instead, set to null to disable label","name":"label","required":false,"type":{"name":"ReactNode | ((value: number) => ReactNode)"}},"labelAlwaysOn":{"defaultValue":"`false`","description":"Determines whether the label should be visible when the slider is not being dragged or hovered","name":"labelAlwaysOn","required":false,"type":{"name":"boolean"}},"labelTransitionProps":{"defaultValue":"`{ transition: \'fade\', duration: 0 }`","description":"Props passed down to the <code>Transition</code> component","name":"labelTransitionProps","required":false,"type":{"name":"TransitionProps"}},"marks":{"defaultValue":null,"description":"Marks displayed on the track","name":"marks","required":false,"type":{"name":"{ value: number; label?: ReactNode; }[]"}},"max":{"defaultValue":"`100`","description":"Maximum possible value","name":"max","required":false,"type":{"name":"number"}},"maxRange":{"defaultValue":"`Infinity`","description":"Maximum range interval","name":"maxRange","required":false,"type":{"name":"number"}},"min":{"defaultValue":"`0`","description":"Minimal possible value","name":"min","required":false,"type":{"name":"number"}},"minRange":{"defaultValue":"`10`","description":"Minimal range interval","name":"minRange","required":false,"type":{"name":"number"}},"name":{"defaultValue":null,"description":"Hidden input name, use with uncontrolled component","name":"name","required":false,"type":{"name":"string"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: RangeSliderValue) => void"}},"onChangeEnd":{"defaultValue":null,"description":"Called when user stops dragging slider or changes value with arrows","name":"onChangeEnd","required":false,"type":{"name":"(value: RangeSliderValue) => void"}},"precision":{"defaultValue":null,"description":"Number of significant digits after the decimal point","name":"precision","required":false,"type":{"name":"number"}},"pushOnOverlap":{"defaultValue":"`true`","description":"Determines whether the other thumb should be pushed by the current thumb dragging when <code>minRange</code>/<code>maxRange</code> is reached","name":"pushOnOverlap","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`\'xl\'`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"restrictToMarks":{"defaultValue":"`false`","description":"Determines whether the selection should be only allowed from the given marks array","name":"restrictToMarks","required":false,"type":{"name":"boolean"}},"scale":{"defaultValue":null,"description":"A transformation function to change the scale of the slider","name":"scale","required":false,"type":{"name":"(value: number) => number"}},"showLabelOnHover":{"defaultValue":"`true`","description":"Determines whether the label should be displayed when the slider is hovered","name":"showLabelOnHover","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":"`\'md\'`","description":"Controls size of the track","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"step":{"defaultValue":"`1`","description":"Number by which value will be incremented/decremented with thumb drag and arrows","name":"step","required":false,"type":{"name":"number"}},"thumbChildren":{"defaultValue":null,"description":"Content rendered inside thumb","name":"thumbChildren","required":false,"type":{"name":"React.ReactNode"}},"thumbFromLabel":{"defaultValue":null,"description":"First thumb <code>aria-label</code>","name":"thumbFromLabel","required":false,"type":{"name":"string"}},"thumbProps":{"defaultValue":null,"description":"Props passed down to thumb element based on the thumb index","name":"thumbProps","required":false,"type":{"name":"(index: 0 | 1) => Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \\"ref\\">"}},"thumbSize":{"defaultValue":null,"description":"Thumb <code>width</code> and <code>height</code>, by default value is computed based on <code>size</code> prop","name":"thumbSize","required":false,"type":{"name":"string | number"}},"thumbToLabel":{"defaultValue":null,"description":"Second thumb <code>aria-label</code>","name":"thumbToLabel","required":false,"type":{"name":"string"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"RangeSliderValue"}}}},"SwitchGroup":{"props":{"children":{"defaultValue":null,"description":"<code>Switch</code> components","name":"children","required":true,"type":{"name":"React.ReactNode"}},"defaultValue":{"defaultValue":null,"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"string[]"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"id":{"defaultValue":null,"description":"Static id used as base to generate <code>aria-</code> attributes, by default generates random id","name":"id","required":false,"type":{"name":"string"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelElement":{"defaultValue":null,"description":"<code>Input.Label</code> root element, <code>\'label\'</code> by default","name":"labelElement","required":false,"type":{"name":"\\"div\\" | \\"label\\"","raw":"\\"div\\" | \\"label\\" | undefined","value":[{"value":"undefined"},{"value":"\\"div\\""},{"value":"\\"label\\""}]}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: string[]) => void"}},"readOnly":{"defaultValue":null,"description":"If set, value cannot be changed","name":"readOnly","required":false,"type":{"name":"boolean"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls size of the <code>Input.Wrapper</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string[]"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Wrapper</code>","name":"wrapperProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \\"ref\\"> & DataAttributes"}}}},"CheckboxGroup":{"props":{"children":{"defaultValue":null,"description":"<code>Checkbox</code> components and any other elements","name":"children","required":true,"type":{"name":"React.ReactNode"}},"defaultValue":{"defaultValue":null,"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"string[]"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"id":{"defaultValue":null,"description":"Static id used as base to generate <code>aria-</code> attributes, by default generates random id","name":"id","required":false,"type":{"name":"string"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelElement":{"defaultValue":null,"description":"<code>Input.Label</code> root element, <code>\'label\'</code> by default","name":"labelElement","required":false,"type":{"name":"\\"div\\" | \\"label\\"","raw":"\\"div\\" | \\"label\\" | undefined","value":[{"value":"undefined"},{"value":"\\"div\\""},{"value":"\\"label\\""}]}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"onChange":{"defaultValue":null,"description":"Called with an array of selected checkboxes values when value changes","name":"onChange","required":false,"type":{"name":"(value: string[]) => void"}},"readOnly":{"defaultValue":null,"description":"If set, value cannot be changed","name":"readOnly","required":false,"type":{"name":"boolean"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls size of the <code>Input.Wrapper</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string[]"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element (<code>Input.Wrapper</code> component)","name":"wrapperProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \\"ref\\"> & DataAttributes"}}}},"CheckboxIndicator":{"props":{"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"checked":{"defaultValue":null,"description":"Determines whether the component should have checked styles","name":"checked","required":false,"type":{"name":"boolean"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color to set input background color in checked state","name":"color","required":false,"type":{"name":"MantineColor"}},"disabled":{"defaultValue":null,"description":"Determines whether the component should have disabled styles","name":"disabled","required":false,"type":{"name":"boolean"}},"icon":{"defaultValue":null,"description":"Icon displayed when checkbox is in checked or indeterminate state","name":"icon","required":false,"type":{"name":"FC<{ indeterminate: boolean; className: string; }> | undefined"}},"iconColor":{"defaultValue":null,"description":"Key of <code>theme.colors</code> or any valid CSS color to set icon color, by default value depends on <code>theme.autoContrast</code>","name":"iconColor","required":false,"type":{"name":"MantineColor"}},"indeterminate":{"defaultValue":null,"description":"Indeterminate state of the checkbox. If set, <code>checked</code> prop is ignored.","name":"indeterminate","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls size of the component","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}}}},"CheckboxCard":{"props":{"checked":{"defaultValue":null,"description":"Controlled component value","name":"checked","required":false,"type":{"name":"boolean"}},"defaultChecked":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultChecked","required":false,"type":{"name":"boolean"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(checked: boolean) => void"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"value":{"defaultValue":null,"description":"Value of the checkbox, used with <code>Checkbox.Group</code>","name":"value","required":false,"type":{"name":"string"}},"withBorder":{"defaultValue":null,"description":"Adds border to the root element","name":"withBorder","required":false,"type":{"name":"boolean"}}}},"RadioGroup":{"props":{"children":{"defaultValue":null,"description":"<code>Radio</code> components and any other elements","name":"children","required":true,"type":{"name":"React.ReactNode"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string | null"}},"description":{"defaultValue":null,"description":"Contents of <code>Input.Description</code> component. If not set, description is not displayed.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"InputDescriptionProps & DataAttributes"}},"error":{"defaultValue":null,"description":"Contents of <code>Input.Error</code> component. If not set, error is not displayed.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Error</code> component","name":"errorProps","required":false,"type":{"name":"InputErrorProps & DataAttributes"}},"id":{"defaultValue":null,"description":"Static id used as base to generate <code>aria-</code> attributes, by default generates random id","name":"id","required":false,"type":{"name":"string"}},"inputContainer":{"defaultValue":"`React.Fragment`","description":"Input container component","name":"inputContainer","required":false,"type":{"name":"(children: ReactNode) => ReactNode"}},"inputWrapperOrder":{"defaultValue":"`[\'label\', \'description\', \'input\', \'error\']`","description":"Controls order of the elements","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"defaultValue":null,"description":"Contents of <code>Input.Label</code> component. If not set, label is not displayed.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelElement":{"defaultValue":null,"description":"<code>Input.Label</code> root element, <code>\'label\'</code> by default","name":"labelElement","required":false,"type":{"name":"\\"div\\" | \\"label\\"","raw":"\\"div\\" | \\"label\\" | undefined","value":[{"value":"undefined"},{"value":"\\"div\\""},{"value":"\\"label\\""}]}},"labelProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"InputLabelProps & DataAttributes"}},"name":{"defaultValue":null,"description":"<code>name</code> attribute of child radio inputs. By default, <code>name</code> is generated randomly.","name":"name","required":false,"type":{"name":"string"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: string) => void"}},"readOnly":{"defaultValue":null,"description":"If set, value cannot be changed","name":"readOnly","required":false,"type":{"name":"boolean"}},"required":{"defaultValue":"`false`","description":"Adds required attribute to the input and a red asterisk on the right side of label","name":"required","required":false,"type":{"name":"boolean"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls size of the <code>Input.Wrapper</code>","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string | null"}},"withAsterisk":{"defaultValue":"`false`","description":"If set, the required asterisk is displayed next to the label. Overrides <code>required</code> prop. Does not add required attribute to the input.","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the <code>Input.Wrapper</code>","name":"wrapperProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \\"ref\\"> & DataAttributes"}}}},"RadioIndicator":{"props":{"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"checked":{"defaultValue":null,"description":"Checked state","name":"checked","required":false,"type":{"name":"boolean"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color to set input background color in checked state","name":"color","required":false,"type":{"name":"MantineColor"}},"disabled":{"defaultValue":null,"description":"Disabled state","name":"disabled","required":false,"type":{"name":"boolean"}},"icon":{"defaultValue":null,"description":"A component that replaces default check icon","name":"icon","required":false,"type":{"name":"FC<RadioIconProps>"}},"iconColor":{"defaultValue":null,"description":"Key of <code>theme.colors</code> or any valid CSS color to set icon color, by default value depends on <code>theme.autoContrast</code>","name":"iconColor","required":false,"type":{"name":"MantineColor"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius,</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls size of the component","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}}}},"RadioCard":{"props":{"checked":{"defaultValue":null,"description":"Checked state","name":"checked","required":false,"type":{"name":"boolean"}},"name":{"defaultValue":null,"description":"Value used to associate all related radio cards, required for accessibility if used outside of <code>Radio.Group</code>","name":"name","required":false,"type":{"name":"string"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"value":{"defaultValue":null,"description":"Value of the checkbox, used with <code>Radio.Group</code>","name":"value","required":false,"type":{"name":"string"}},"withBorder":{"defaultValue":null,"description":"Adds border to the root element","name":"withBorder","required":false,"type":{"name":"boolean"}}}},"TabsTab":{"props":{"children":{"defaultValue":null,"description":"Tab label","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"defaultValue":null,"description":"Key of <code>theme.colors</code> or any valid CSS color, controls control color based on <code>variant</code>","name":"color","required":false,"type":{"name":"MantineColor"}},"leftSection":{"defaultValue":null,"description":"Content displayed on the left side of the label","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"rightSection":{"defaultValue":null,"description":"Content displayed on the right side of the label","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"size":{"defaultValue":null,"description":"Size passed from parent component, sets <code>data-size</code> if value is not number like","name":"size","required":false,"type":{"name":"string | number"}},"value":{"defaultValue":null,"description":"Value of associated panel","name":"value","required":true,"type":{"name":"string"}}}},"TabsList":{"props":{"children":{"defaultValue":null,"description":"<code>Tabs.Tab</code> components","name":"children","required":true,"type":{"name":"React.ReactNode"}},"grow":{"defaultValue":"`false`","description":"Determines whether tabs should take all available space","name":"grow","required":false,"type":{"name":"boolean"}},"justify":{"defaultValue":"`flex-start`","description":"Tabs alignment","name":"justify","required":false,"type":{"name":"JustifyContent"}}}},"TabsPanel":{"props":{"children":{"defaultValue":null,"description":"Panel content","name":"children","required":true,"type":{"name":"React.ReactNode"}},"keepMounted":{"defaultValue":null,"description":"If set, the content is kept mounted, even if <code>keepMounted</code> is set <code>false</code> in the parent <code>Tabs</code> component","name":"keepMounted","required":false,"type":{"name":"boolean"}},"value":{"defaultValue":null,"description":"Value of associated control","name":"value","required":true,"type":{"name":"string"}}}},"AccordionItem":{"props":{"value":{"defaultValue":null,"description":"Value that is used to manage the accordion state","name":"value","required":true,"type":{"name":"string"}}}},"AccordionControl":{"props":{"chevron":{"defaultValue":null,"description":"Custom chevron icon","name":"chevron","required":false,"type":{"name":"React.ReactNode"}},"children":{"defaultValue":null,"description":"Control label","name":"children","required":false,"type":{"name":"React.ReactNode"}},"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute, prevents interactions","name":"disabled","required":false,"type":{"name":"boolean"}},"icon":{"defaultValue":null,"description":"Icon displayed next to the label","name":"icon","required":false,"type":{"name":"React.ReactNode"}}}},"PillGroup":{"props":{"disabled":{"defaultValue":null,"description":"If set, adds disabled to all child <code>Pill</code> components","name":"disabled","required":false,"type":{"name":"boolean"}},"gap":{"defaultValue":null,"description":"Controls spacing between pills, by default controlled by <code>size</code>","name":"gap","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls size of the child <code>Pill</code> components and gap between them","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}}}},"PillsInputField":{"props":{"pointer":{"defaultValue":null,"description":"If set, cursor is changed to pointer","name":"pointer","required":false,"type":{"name":"boolean"}},"type":{"defaultValue":"`\'visible\'`","description":"Controls input styles when focused. If <code>auto</code> the input is hidden when not focused. If <code>visible</code> the input will always remain visible.","name":"type","required":false,"type":{"name":"\\"hidden\\" | \\"auto\\" | \\"visible\\"","raw":"\\"hidden\\" | \\"auto\\" | \\"visible\\" | undefined","value":[{"value":"undefined"},{"value":"\\"hidden\\""},{"value":"\\"auto\\""},{"value":"\\"visible\\""}]}}}},"PaginationRoot":{"props":{"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"boundaries":{"defaultValue":"`1`","description":"Number of elements visible on the left/right edges","name":"boundaries","required":false,"type":{"name":"number"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code>, active item color","name":"color","required":false,"type":{"name":"MantineColor"}},"defaultValue":{"defaultValue":null,"description":"Active page for uncontrolled component, must be an integer in [0, total] interval","name":"defaultValue","required":false,"type":{"name":"number"}},"disabled":{"defaultValue":null,"description":"Disables all controls, applies disabled styles","name":"disabled","required":false,"type":{"name":"boolean"}},"getItemProps":{"defaultValue":null,"description":"Additional props passed down to controls","name":"getItemProps","required":false,"type":{"name":"(page: number) => Record<string, any>"}},"onChange":{"defaultValue":null,"description":"Called when page changes","name":"onChange","required":false,"type":{"name":"(value: number) => void"}},"onFirstPage":{"defaultValue":null,"description":"Called when first page control is clicked","name":"onFirstPage","required":false,"type":{"name":"() => void"}},"onLastPage":{"defaultValue":null,"description":"Called when last page control is clicked","name":"onLastPage","required":false,"type":{"name":"() => void"}},"onNextPage":{"defaultValue":null,"description":"Called when next page control is clicked","name":"onNextPage","required":false,"type":{"name":"() => void"}},"onPreviousPage":{"defaultValue":null,"description":"Called when previous page control is clicked","name":"onPreviousPage","required":false,"type":{"name":"() => void"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"siblings":{"defaultValue":"`1`","description":"Number of siblings displayed on the left/right side of the selected page","name":"siblings","required":false,"type":{"name":"number"}},"size":{"defaultValue":"`\'md\'`","description":"<code>height</code> and <code>min-width</code> of controls","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"total":{"defaultValue":null,"description":"Total number of pages, must be an integer","name":"total","required":true,"type":{"name":"number"}},"value":{"defaultValue":null,"description":"Active page for controlled component, must be an integer in [0, total] interval","name":"value","required":false,"type":{"name":"number"}}}},"PaginationItems":{"props":{"dotsIcon":{"defaultValue":null,"description":"Dots icon component","name":"dotsIcon","required":false,"type":{"name":"PaginationIcon"}}}},"PaginationDots":{"props":{"icon":{"defaultValue":null,"description":"Custom dots icon component, must accept svg element props and size prop","name":"icon","required":false,"type":{"name":"FC<PaginationIconProps>"}}}},"createEdgeComponent":{"props":{"action":{"defaultValue":null,"description":"","name":"action","required":true,"type":{"name":"\\"onNext\\" | \\"onPrevious\\" | \\"onFirst\\" | \\"onLast\\"","raw":"\\"onNext\\" | \\"onPrevious\\" | \\"onFirst\\" | \\"onLast\\"","value":[{"value":"\\"onNext\\""},{"value":"\\"onPrevious\\""},{"value":"\\"onFirst\\""},{"value":"\\"onLast\\""}]}},"icon":{"defaultValue":null,"description":"","name":"icon","required":true,"type":{"name":"FC<PaginationIconProps>"}},"name":{"defaultValue":null,"description":"","name":"name","required":true,"type":{"name":"string"}},"type":{"defaultValue":null,"description":"","name":"type","required":true,"type":{"name":"\\"next\\" | \\"previous\\"","raw":"\\"next\\" | \\"previous\\"","value":[{"value":"\\"next\\""},{"value":"\\"previous\\""}]}}}},"PaginationNext":{"props":{"icon":{"defaultValue":null,"description":"An icon component to replace the default icon","name":"icon","required":false,"type":{"name":"FC<PaginationIconProps>"}}}},"PaginationPrevious":{"props":{"icon":{"defaultValue":null,"description":"An icon component to replace the default icon","name":"icon","required":false,"type":{"name":"FC<PaginationIconProps>"}}}},"PaginationFirst":{"props":{"icon":{"defaultValue":null,"description":"An icon component to replace the default icon","name":"icon","required":false,"type":{"name":"FC<PaginationIconProps>"}}}},"PaginationLast":{"props":{"icon":{"defaultValue":null,"description":"An icon component to replace the default icon","name":"icon","required":false,"type":{"name":"FC<PaginationIconProps>"}}}},"PaginationControl":{"props":{"active":{"defaultValue":null,"description":"Applies active styles, adds <code>data-active</code> attribute","name":"active","required":false,"type":{"name":"boolean"}},"withPadding":{"defaultValue":"`true`","description":"Applies padding","name":"withPadding","required":false,"type":{"name":"boolean"}}}},"ComboboxOption":{"props":{"active":{"defaultValue":null,"description":"Current active state","name":"active","required":false,"type":{"name":"boolean"}},"disabled":{"defaultValue":null,"description":"Disabled state","name":"disabled","required":false,"type":{"name":"boolean"}},"selected":{"defaultValue":null,"description":"Current selected state","name":"selected","required":false,"type":{"name":"boolean"}},"value":{"defaultValue":null,"description":"Option value","name":"value","required":true,"type":{"name":"string"}}}},"ComboboxDropdown":{"props":{"hidden":{"defaultValue":null,"description":"Determines whether the dropdown should be hidden, for example, when there are no options to display","name":"hidden","required":false,"type":{"name":"boolean"}}}},"ComboboxTarget":{"props":{"autoComplete":{"defaultValue":null,"description":"Input autocomplete attribute","name":"autoComplete","required":false,"type":{"name":"string"}},"children":{"defaultValue":null,"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"refProp":{"defaultValue":null,"description":"Key of the prop that is used to access element ref","name":"refProp","required":false,"type":{"name":"string"}},"targetType":{"defaultValue":"`input`","description":"Determines which events is handled by the target element.\\n<code>button</code> target type handles <code>Space</code> and <code>Enter</code> keys to toggle dropdown opened state.","name":"targetType","required":false,"type":{"name":"\\"button\\" | \\"input\\"","raw":"\\"button\\" | \\"input\\" | undefined","value":[{"value":"undefined"},{"value":"\\"button\\""},{"value":"\\"input\\""}]}},"withAriaAttributes":{"defaultValue":"`true`","description":"If set, the target has <code>aria-</code> attributes","name":"withAriaAttributes","required":false,"type":{"name":"boolean"}},"withExpandedAttribute":{"defaultValue":"`false`","description":"If set, the target has <code>aria-expanded</code> attribute","name":"withExpandedAttribute","required":false,"type":{"name":"boolean"}},"withKeyboardNavigation":{"defaultValue":"`true`","description":"If set, the component responds to keyboard events","name":"withKeyboardNavigation","required":false,"type":{"name":"boolean"}}}},"ComboboxDropdownTarget":{"props":{"children":{"defaultValue":null,"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"refProp":{"defaultValue":null,"description":"Key of the prop that should be used to access element ref","name":"refProp","required":false,"type":{"name":"string"}}}},"ComboboxEventsTarget":{"props":{"autoComplete":{"defaultValue":null,"description":"Input autocomplete attribute","name":"autoComplete","required":false,"type":{"name":"string"}},"children":{"defaultValue":null,"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"refProp":{"defaultValue":null,"description":"Key of the prop is used to access element ref","name":"refProp","required":false,"type":{"name":"string"}},"targetType":{"defaultValue":"`input`","description":"Determines which events should be handled by the target element.\\n<code>button</code> target type handles <code>Space</code> and <code>Enter</code> keys to toggle dropdown opened state.","name":"targetType","required":false,"type":{"name":"\\"button\\" | \\"input\\"","raw":"\\"button\\" | \\"input\\" | undefined","value":[{"value":"undefined"},{"value":"\\"button\\""},{"value":"\\"input\\""}]}},"withAriaAttributes":{"defaultValue":"`true`","description":"If set, the target has <code>aria-</code> attributes","name":"withAriaAttributes","required":false,"type":{"name":"boolean"}},"withExpandedAttribute":{"defaultValue":"`false`","description":"If set, the target has <code>aria-expanded</code> attribute","name":"withExpandedAttribute","required":false,"type":{"name":"boolean"}},"withKeyboardNavigation":{"defaultValue":"`true`","description":"If set, the component responds to the keyboard events","name":"withKeyboardNavigation","required":false,"type":{"name":"boolean"}}}},"ComboboxGroup":{"props":{"label":{"defaultValue":null,"description":"Group label","name":"label","required":false,"type":{"name":"React.ReactNode"}}}},"AppShellAside":{"props":{"withBorder":{"defaultValue":null,"description":"If set, component haves a border, overrides <code>withBorder</code> prop on <code>AppShell</code> component","name":"withBorder","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":null,"description":"Sets <code>z-index</code>. Inherited from the <code>AppShell</code> by default.","name":"zIndex","required":false,"type":{"name":"React.CSSProperties[\\"zIndex\\"]"}}}},"AppShellNavbar":{"props":{"withBorder":{"defaultValue":null,"description":"If set, component haves a border, overrides <code>withBorder</code> prop on <code>AppShell</code> component","name":"withBorder","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":null,"description":"Sets <code>z-index</code>. Inherited from the <code>AppShell</code> by default.","name":"zIndex","required":false,"type":{"name":"React.CSSProperties[\\"zIndex\\"]"}}}},"AppShellHeader":{"props":{"withBorder":{"defaultValue":null,"description":"If set, component haves a border, overrides <code>withBorder</code> prop on <code>AppShell</code> component","name":"withBorder","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":null,"description":"Sets <code>z-index</code>. Inherited from the <code>AppShell</code> by default.","name":"zIndex","required":false,"type":{"name":"React.CSSProperties[\\"zIndex\\"]"}}}},"AppShellFooter":{"props":{"withBorder":{"defaultValue":null,"description":"If set, component haves a border, overrides <code>withBorder</code> prop on <code>AppShell</code> component","name":"withBorder","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":null,"description":"Sets <code>z-index</code>. Inherited from the <code>AppShell</code> by default.","name":"zIndex","required":false,"type":{"name":"React.CSSProperties[\\"zIndex\\"]"}}}},"AppShellSection":{"props":{"grow":{"defaultValue":null,"description":"If set, the section expands to take all available space","name":"grow","required":false,"type":{"name":"boolean"}}}},"GridCol":{"props":{"offset":{"defaultValue":null,"description":"Column offset on the left side – number of columns that are left empty before this column","name":"offset","required":false,"type":{"name":"StyleProp<number>"}},"order":{"defaultValue":null,"description":"Column order, can be used to reorder columns at different viewport sizes","name":"order","required":false,"type":{"name":"StyleProp<number>"}},"span":{"defaultValue":"`12`","description":"Column span","name":"span","required":false,"type":{"name":"StyleProp<ColSpan>"}}}},"HoverCardTarget":{"props":{"children":{"defaultValue":null,"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"eventPropsWrapperName":{"defaultValue":null,"description":"Key of the prop used to pass event listeners, by default event listeners are passed directly to component","name":"eventPropsWrapperName","required":false,"type":{"name":"string"}},"popupType":{"defaultValue":"`\'dialog\'`","description":"Popup accessible type","name":"popupType","required":false,"type":{"name":"string"}},"refProp":{"defaultValue":null,"description":"Key of the prop that should be used to access element ref","name":"refProp","required":false,"type":{"name":"string"}}}},"HoverCardGroup":{"props":{"children":{"defaultValue":null,"description":"<code>HoverCard</code> components","name":"children","required":true,"type":{"name":"React.ReactNode"}},"closeDelay":{"defaultValue":null,"description":"Close delay in ms","name":"closeDelay","required":false,"type":{"name":"number"}},"openDelay":{"defaultValue":null,"description":"Open delay in ms","name":"openDelay","required":false,"type":{"name":"number"}}}},"MenuItem":{"props":{"children":{"defaultValue":null,"description":"Item label","name":"children","required":false,"type":{"name":"React.ReactNode"}},"closeMenuOnClick":{"defaultValue":null,"description":"If set, the menu is closed when the item is clicked. Overrides <code>closeOnItemClick</code> prop on the <code>Menu</code> component.","name":"closeMenuOnClick","required":false,"type":{"name":"boolean"}},"color":{"defaultValue":null,"description":"Key of <code>theme.colors</code> or any valid CSS color","name":"color","required":false,"type":{"name":"MantineColor"}},"disabled":{"defaultValue":null,"description":"Sets disabled attribute, applies disabled styles","name":"disabled","required":false,"type":{"name":"boolean"}},"leftSection":{"defaultValue":null,"description":"Section displayed at the start of the label","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"rightSection":{"defaultValue":null,"description":"Section displayed at the end of the label","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}}}},"MenuTarget":{"props":{"children":{"defaultValue":null,"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"refProp":{"defaultValue":"`\'ref\'`","description":"Key of the prop used to get element ref","name":"refProp","required":false,"type":{"name":"string"}}}},"MenuSub":{"props":{"arrowOffset":{"defaultValue":"`5`","description":"Arrow offset in px","name":"arrowOffset","required":false,"type":{"name":"number"}},"arrowPosition":{"defaultValue":null,"description":"Arrow position","name":"arrowPosition","required":false,"type":{"name":"ArrowPosition","raw":"ArrowPosition | undefined","value":[{"value":"undefined"},{"value":"\\"center\\""},{"value":"\\"side\\""}]}},"arrowRadius":{"defaultValue":"`0`","description":"Arrow <code>border-radius</code> in px","name":"arrowRadius","required":false,"type":{"name":"number"}},"arrowSize":{"defaultValue":"`7`","description":"Arrow size in px","name":"arrowSize","required":false,"type":{"name":"number"}},"closeDelay":{"defaultValue":null,"description":"Close delay in ms","name":"closeDelay","required":false,"type":{"name":"number"}},"disabled":{"defaultValue":null,"description":"If set, popover dropdown will not be rendered","name":"disabled","required":false,"type":{"name":"boolean"}},"floatingStrategy":{"defaultValue":"`\'absolute\'`","description":"Changes floating ui [position strategy](https://floating-ui.com/docs/usefloating#strategy)","name":"floatingStrategy","required":false,"type":{"name":"FloatingStrategy","raw":"FloatingStrategy | undefined","value":[{"value":"undefined"},{"value":"\\"fixed\\""},{"value":"\\"absolute\\""}]}},"hideDetached":{"defaultValue":"`true`","description":"If set, the dropdown is hidden when the element is hidden with styles or not visible on the screen","name":"hideDetached","required":false,"type":{"name":"boolean"}},"keepMounted":{"defaultValue":null,"description":"If set, the dropdown is not unmounted from the DOM when hidden. <code>display: none</code> styles are added instead.","name":"keepMounted","required":false,"type":{"name":"boolean"}},"middlewares":{"defaultValue":"`{ flip: true, shift: true, inline: false }`","description":"Floating ui middlewares to configure position handling","name":"middlewares","required":false,"type":{"name":"PopoverMiddlewares"}},"offset":{"defaultValue":"`0`","description":"Offset of the dropdown element","name":"offset","required":false,"type":{"name":"number | FloatingAxesOffsets"}},"onChange":{"defaultValue":null,"description":"Called with current state when dropdown opens or closes","name":"onChange","required":false,"type":{"name":"(opened: boolean) => void"}},"onClose":{"defaultValue":null,"description":"Called when dropdown closes","name":"onClose","required":false,"type":{"name":"() => void"}},"onDismiss":{"defaultValue":null,"description":"Called when the popover is dismissed by clicking outside or by pressing escape","name":"onDismiss","required":false,"type":{"name":"() => void"}},"onEnterTransitionEnd":{"defaultValue":null,"description":"Called when enter transition ends","name":"onEnterTransitionEnd","required":false,"type":{"name":"() => void"}},"onExitTransitionEnd":{"defaultValue":null,"description":"Called when exit transition ends","name":"onExitTransitionEnd","required":false,"type":{"name":"() => void"}},"onOpen":{"defaultValue":null,"description":"Called when dropdown opens","name":"onOpen","required":false,"type":{"name":"() => void"}},"onPositionChange":{"defaultValue":null,"description":"Called when dropdown position changes","name":"onPositionChange","required":false,"type":{"name":"(position: FloatingPosition) => void"}},"overlayProps":{"defaultValue":null,"description":"Props passed down to <code>Overlay</code> component","name":"overlayProps","required":false,"type":{"name":"OverlayProps & ElementProps<\\"div\\">"}},"portalProps":{"defaultValue":null,"description":"Props to pass down to the <code>Portal</code> when <code>withinPortal</code> is true","name":"portalProps","required":false,"type":{"name":"BasePortalProps"}},"position":{"defaultValue":"`\'right-start\'`","description":"Dropdown position relative to the target element","name":"position","required":false,"type":{"name":"FloatingPosition","raw":"FloatingPosition | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""},{"value":"\\"bottom\\""},{"value":"\\"top\\""},{"value":"\\"left-end\\""},{"value":"\\"left-start\\""},{"value":"\\"right-end\\""},{"value":"\\"right-start\\""},{"value":"\\"bottom-end\\""},{"value":"\\"bottom-start\\""},{"value":"\\"top-end\\""},{"value":"\\"top-start\\""}]}},"positionDependencies":{"defaultValue":null,"description":"@deprecated : Do not use, will be removed in 9.0","name":"positionDependencies","required":false,"type":{"name":"any[]"}},"preventPositionChangeWhenVisible":{"defaultValue":null,"description":"Prevents popover from flipping/shifting when it the dropdown is visible","name":"preventPositionChangeWhenVisible","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"returnFocus":{"defaultValue":"`false`","description":"Determines whether focus should be automatically returned to control when dropdown closes","name":"returnFocus","required":false,"type":{"name":"boolean"}},"shadow":{"defaultValue":null,"description":"Key of <code>theme.shadows</code> or any other valid CSS <code>box-shadow</code> value","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"transitionProps":{"defaultValue":"`{ duration: 0 }`","description":"Props passed down to the <code>Transition</code> component that used to animate dropdown presence, use to configure duration and animation type","name":"transitionProps","required":false,"type":{"name":"TransitionProps"}},"width":{"defaultValue":"`\'max-content\'`","description":"Dropdown width, or <code>\'target\'</code> to make dropdown width the same as target element","name":"width","required":false,"type":{"name":"PopoverWidth"}},"withArrow":{"defaultValue":"`false`","description":"Determines whether component should have an arrow","name":"withArrow","required":false,"type":{"name":"boolean"}},"withOverlay":{"defaultValue":"`false`","description":"Determines whether the overlay should be displayed when the dropdown is opened","name":"withOverlay","required":false,"type":{"name":"boolean"}},"withinPortal":{"defaultValue":"`true`","description":"Determines whether dropdown should be rendered within the <code>Portal</code>","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":"`300`","description":"Dropdown <code>z-index</code>","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"MenuSub.Target":{"props":{"children":{"defaultValue":null,"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"refProp":{"defaultValue":"\'ref\'","description":"Key of the prop used to get element ref","name":"refProp","required":false,"type":{"name":"string"}}}},"MenuSub.Dropdown":{"description":"","props":{}},"MenuSub.Item":{"props":{"children":{"defaultValue":null,"description":"Item label","name":"children","required":false,"type":{"name":"React.ReactNode"}},"closeMenuOnClick":{"defaultValue":null,"description":"If set, the menu is closed when the item is clicked. Overrides <code>closeOnItemClick</code> prop on the <code>Menu</code> component.","name":"closeMenuOnClick","required":false,"type":{"name":"boolean"}},"color":{"defaultValue":null,"description":"Key of <code>theme.colors</code> or any valid CSS color","name":"color","required":false,"type":{"name":"MantineColor"}},"disabled":{"defaultValue":null,"description":"Sets disabled attribute, applies disabled styles","name":"disabled","required":false,"type":{"name":"boolean"}},"leftSection":{"defaultValue":null,"description":"Section displayed at the start of the label","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"rightSection":{"defaultValue":null,"description":"Section displayed at the end of the label","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}}}},"MenuSubItem":{"props":{"children":{"defaultValue":null,"description":"Item label","name":"children","required":false,"type":{"name":"React.ReactNode"}},"closeMenuOnClick":{"defaultValue":null,"description":"If set, the menu is closed when the item is clicked. Overrides <code>closeOnItemClick</code> prop on the <code>Menu</code> component.","name":"closeMenuOnClick","required":false,"type":{"name":"boolean"}},"color":{"defaultValue":null,"description":"Key of <code>theme.colors</code> or any valid CSS color","name":"color","required":false,"type":{"name":"MantineColor"}},"disabled":{"defaultValue":null,"description":"Sets disabled attribute, applies disabled styles","name":"disabled","required":false,"type":{"name":"boolean"}},"leftSection":{"defaultValue":null,"description":"Section displayed at the start of the label","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"rightSection":{"defaultValue":null,"description":"Section displayed at the end of the label","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}}}},"MenuSubTarget":{"props":{"children":{"defaultValue":null,"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"refProp":{"defaultValue":"\'ref\'","description":"Key of the prop used to get element ref","name":"refProp","required":false,"type":{"name":"string"}}}},"ProgressSection":{"props":{"animated":{"defaultValue":"`false`","description":"If set, the sections stripes are animated, <code>striped</code> prop is ignored","name":"animated","required":false,"type":{"name":"boolean"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS value","name":"color","required":false,"type":{"name":"MantineColor"}},"striped":{"defaultValue":"`false`","description":"If set, the section has stripes","name":"striped","required":false,"type":{"name":"boolean"}},"value":{"defaultValue":null,"description":"Value of the section in 0–100 range","name":"value","required":true,"type":{"name":"number"}},"withAria":{"defaultValue":"`true`","description":"Determines whether <code>aria-*</code> props should be added to the root element","name":"withAria","required":false,"type":{"name":"boolean"}}}},"ProgressRoot":{"props":{"autoContrast":{"defaultValue":null,"description":"If set, adjusts text color based on background color for <code>filled</code> variant","name":"autoContrast","required":false,"type":{"name":"boolean"}},"orientation":{"defaultValue":"`\'horizontal\'`","description":"Controls orientation","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"defaultValue":"`\'md\'`","description":"Controls track height","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"transitionDuration":{"defaultValue":"`100`","description":"Controls sections width transition duration, value is specified in ms","name":"transitionDuration","required":false,"type":{"name":"number"}}}},"ChipGroup":{"props":{"children":{"defaultValue":null,"description":"<code>Chip</code> components and any other elements","name":"children","required":false,"type":{"name":"React.ReactNode"}},"defaultValue":{"defaultValue":null,"description":"Uncontrolled component initial value","name":"defaultValue","required":false,"type":{"name":"string | string[] | null"}},"multiple":{"defaultValue":null,"description":"If set, multiple values can be selected","name":"multiple","required":false,"type":{"name":"boolean"}},"onChange":{"defaultValue":null,"description":"Called when value changes. If <code>multiple</code> prop is set, called with an array of selected values. If not, called with a string value of selected chip.","name":"onChange","required":false,"type":{"name":"(value: T extends true ? string[] : string) => void"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"string | string[] | null"}}}},"CardSection":{"props":{"inheritPadding":{"defaultValue":null,"description":"If set, the section inherits padding from the parent <code>Card</code>","name":"inheritPadding","required":false,"type":{"name":"boolean"}},"withBorder":{"defaultValue":null,"description":"Adds border to the root element","name":"withBorder","required":false,"type":{"name":"boolean"}}}},"StepperStep":{"props":{"allowStepClick":{"defaultValue":null,"description":"Set to false to disable clicks on step","name":"allowStepClick","required":false,"type":{"name":"boolean"}},"allowStepSelect":{"defaultValue":null,"description":"Should step selection be allowed","name":"allowStepSelect","required":false,"type":{"name":"boolean"}},"color":{"defaultValue":null,"description":"Key of <code>theme.colors</code>, by default controlled by Stepper component","name":"color","required":false,"type":{"name":"MantineColor"}},"completedIcon":{"defaultValue":null,"description":"Step icon displayed when step is completed","name":"completedIcon","required":false,"type":{"name":"ReactNode | StepFragmentComponent"}},"description":{"defaultValue":null,"description":"Step description","name":"description","required":false,"type":{"name":"ReactNode | StepFragmentComponent"}},"icon":{"defaultValue":null,"description":"Step icon, defaults to <code>step index + 1</code> when rendered within Stepper","name":"icon","required":false,"type":{"name":"ReactNode | StepFragmentComponent"}},"iconPosition":{"defaultValue":null,"description":"Icon position relative to step body, controlled by Stepper component","name":"iconPosition","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"iconSize":{"defaultValue":null,"description":"Icon wrapper size","name":"iconSize","required":false,"type":{"name":"string | number"}},"label":{"defaultValue":null,"description":"Step label, render after icon","name":"label","required":false,"type":{"name":"ReactNode | StepFragmentComponent"}},"loading":{"defaultValue":null,"description":"Indicates loading state of the step","name":"loading","required":false,"type":{"name":"boolean"}},"orientation":{"defaultValue":null,"description":"Component orientation","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"progressIcon":{"defaultValue":null,"description":"Step icon displayed when step is in progress","name":"progressIcon","required":false,"type":{"name":"ReactNode | StepFragmentComponent"}},"state":{"defaultValue":null,"description":"Step state, controlled by Stepper component","name":"state","required":false,"type":{"name":"\\"stepInactive\\" | \\"stepProgress\\" | \\"stepCompleted\\"","raw":"\\"stepInactive\\" | \\"stepProgress\\" | \\"stepCompleted\\" | undefined","value":[{"value":"undefined"},{"value":"\\"stepInactive\\""},{"value":"\\"stepProgress\\""},{"value":"\\"stepCompleted\\""}]}},"step":{"defaultValue":null,"description":"Step index, controlled by Stepper component","name":"step","required":false,"type":{"name":"number"}},"withIcon":{"defaultValue":null,"description":"Determines whether the icon should be displayed","name":"withIcon","required":false,"type":{"name":"boolean"}}}},"TimelineItem":{"props":{"bullet":{"defaultValue":null,"description":"React node that should be rendered inside the bullet – icon, image, avatar, etc. By default, large white dot is displayed.","name":"bullet","required":false,"type":{"name":"React.ReactNode"}},"children":{"defaultValue":null,"description":"Content displayed below the title","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color to control active item colors","name":"color","required":false,"type":{"name":"MantineColor"}},"lineVariant":{"defaultValue":"`\'solid\'`","description":"Controls line border style","name":"lineVariant","required":false,"type":{"name":"\\"dashed\\" | \\"dotted\\" | \\"solid\\"","raw":"\\"dashed\\" | \\"dotted\\" | \\"solid\\" | undefined","value":[{"value":"undefined"},{"value":"\\"dashed\\""},{"value":"\\"dotted\\""},{"value":"\\"solid\\""}]}},"radius":{"defaultValue":"`\'xl\'`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"title":{"defaultValue":null,"description":"Item title, displayed next to the bullet","name":"title","required":false,"type":{"name":"React.ReactNode"}}}},"ListItem":{"props":{"children":{"defaultValue":null,"description":"Item content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"icon":{"defaultValue":null,"description":"Icon to replace item bullet","name":"icon","required":false,"type":{"name":"React.ReactNode"}}}},"Spotlight":{"props":{"actions":{"defaultValue":null,"description":"Actions data, passed down to <code>Spotlight.Action</code> component","name":"actions","required":true,"type":{"name":"SpotlightActions[]"}},"centered":{"defaultValue":"`false`","description":"If set, the modal is centered vertically","name":"centered","required":false,"type":{"name":"boolean"}},"children":{"defaultValue":null,"description":"Modal content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"clearQueryOnClose":{"defaultValue":"`true`","description":"Determines whether the search query should be cleared when the spotlight is closed","name":"clearQueryOnClose","required":false,"type":{"name":"boolean"}},"closeOnActionTrigger":{"defaultValue":"`true`","description":"Determines whether spotlight should be closed when one of the actions is triggered","name":"closeOnActionTrigger","required":false,"type":{"name":"boolean"}},"closeOnClickOutside":{"defaultValue":"`true`","description":"If set, the modal/drawer is closed when user clicks on the overlay","name":"closeOnClickOutside","required":false,"type":{"name":"boolean"}},"closeOnEscape":{"defaultValue":"`true`","description":"If set, <code>onClose</code> is called when user presses the escape key","name":"closeOnEscape","required":false,"type":{"name":"boolean"}},"disabled":{"defaultValue":null,"description":"If set, spotlight will not be rendered","name":"disabled","required":false,"type":{"name":"boolean"}},"filter":{"defaultValue":null,"description":"Function to filter actions data based on search query, by default actions are filtered by title, description and keywords","name":"filter","required":false,"type":{"name":"SpotlightFilterFunction"}},"forceOpened":{"defaultValue":null,"description":"Forces opened state, useful for tests","name":"forceOpened","required":false,"type":{"name":"boolean"}},"fullScreen":{"defaultValue":"`false`","description":"If set, the modal takes the entire screen","name":"fullScreen","required":false,"type":{"name":"boolean"}},"highlightQuery":{"defaultValue":"`false`","description":"Determines whether search query should be highlighted in action label","name":"highlightQuery","required":false,"type":{"name":"boolean"}},"id":{"defaultValue":null,"description":"Id used to connect modal/drawer with body and title","name":"id","required":false,"type":{"name":"string"}},"keepMounted":{"defaultValue":"`false`","description":"If set modal/drawer is not unmounted from the DOM when hidden. <code>display: none</code> styles are applied instead.","name":"keepMounted","required":false,"type":{"name":"boolean"}},"limit":{"defaultValue":"`Infinity`","description":"Maximum number of actions displayed at a time","name":"limit","required":false,"type":{"name":"number"}},"lockScroll":{"defaultValue":"`true`","description":"If set, scroll is locked when <code>opened={true}</code>","name":"lockScroll","required":false,"type":{"name":"boolean"}},"maxHeight":{"defaultValue":"`400`","description":"Spotlight content max-height. Ignored unless <code>scrollable</code> prop is set.","name":"maxHeight","required":false,"type":{"name":"MaxHeight<string | number>"}},"nothingFound":{"defaultValue":null,"description":"Message displayed when none of the actions match given <code>filter</code>","name":"nothingFound","required":false,"type":{"name":"React.ReactNode"}},"onEnterTransitionEnd":{"defaultValue":null,"description":"Called when enter transition ends","name":"onEnterTransitionEnd","required":false,"type":{"name":"() => void"}},"onExitTransitionEnd":{"defaultValue":null,"description":"Called when exit transition ends","name":"onExitTransitionEnd","required":false,"type":{"name":"() => void"}},"onQueryChange":{"defaultValue":null,"description":"Called when query changes","name":"onQueryChange","required":false,"type":{"name":"(query: string) => void"}},"onSpotlightClose":{"defaultValue":null,"description":"Called when spotlight closes","name":"onSpotlightClose","required":false,"type":{"name":"() => void"}},"onSpotlightOpen":{"defaultValue":null,"description":"Called when spotlight opens","name":"onSpotlightOpen","required":false,"type":{"name":"() => void"}},"overlayProps":{"defaultValue":null,"description":"Props passed down to the <code>Overlay</code> component, use to configure opacity, <code>background-color</code>, styles and other properties","name":"overlayProps","required":false,"type":{"name":"ModalBaseOverlayProps"}},"padding":{"defaultValue":"`\'md\'`","description":"Key of <code>theme.spacing</code> or any valid CSS value to set content, header and footer padding","name":"padding","required":false,"type":{"name":"MantineSpacing"}},"portalProps":{"defaultValue":null,"description":"Props passed down to the Portal component when <code>withinPortal</code> is set","name":"portalProps","required":false,"type":{"name":"BasePortalProps"}},"query":{"defaultValue":null,"description":"Controlled Spotlight search query","name":"query","required":false,"type":{"name":"string"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"removeScrollProps":{"defaultValue":null,"description":"Props passed down to react-remove-scroll, can be used to customize scroll lock behavior","name":"removeScrollProps","required":false,"type":{"name":"RemoveScrollProps"}},"returnFocus":{"defaultValue":"`true`","description":"If set, focus is returned to the last active element when <code>onClose</code> is called","name":"returnFocus","required":false,"type":{"name":"boolean"}},"scrollAreaComponent":{"defaultValue":"`\'div\'`","description":"Scroll area component","name":"scrollAreaComponent","required":false,"type":{"name":"ScrollAreaComponent"}},"scrollAreaProps":{"defaultValue":null,"description":"Props passed down to the <code>ScrollArea</code> component","name":"scrollAreaProps","required":false,"type":{"name":"Partial<ScrollAreaAutosizeProps>"}},"scrollable":{"defaultValue":"`false`","description":"Determines whether the actions list should be scrollable. If not set, <code>maxHeight</code> is ignored","name":"scrollable","required":false,"type":{"name":"boolean"}},"searchProps":{"defaultValue":null,"description":"Props passed down to the <code>Spotlight.Search</code>","name":"searchProps","required":false,"type":{"name":"SpotlightSearchProps"}},"shadow":{"defaultValue":"`\'xl\'`","description":"Key of <code>theme.shadows</code> or any valid CSS box-shadow value","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"shortcut":{"defaultValue":"`\'mod + K\'`","description":"Keyboard shortcut or a list of shortcuts to trigger spotlight","name":"shortcut","required":false,"type":{"name":"string | string[] | null"}},"size":{"defaultValue":"`\'md\'`","description":"Controls width of the content area","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"stackId":{"defaultValue":null,"description":"Id of the modal in the <code>Modal.Stack</code>","name":"stackId","required":false,"type":{"name":"string"}},"store":{"defaultValue":null,"description":"Spotlight store, can be used to create multiple instances of spotlight","name":"store","required":false,"type":{"name":"SpotlightStore"}},"tagsToIgnore":{"defaultValue":"`[\'input\', \'textarea\', \'select\']`","description":"A list of tags which when focused will be ignored by shortcut","name":"tagsToIgnore","required":false,"type":{"name":"string[]"}},"title":{"defaultValue":null,"description":"Modal title","name":"title","required":false,"type":{"name":"React.ReactNode"}},"transitionProps":{"defaultValue":null,"description":"Props added to the <code>Transition</code> component that used to animate overlay and body, use to configure duration and animation type, <code>{ duration: 200, transition: \'fade-down\' }</code> by default","name":"transitionProps","required":false,"type":{"name":"TransitionProps"}},"trapFocus":{"defaultValue":"`true`","description":"If set, focus is trapped within the modal/drawer","name":"trapFocus","required":false,"type":{"name":"boolean"}},"triggerOnContentEditable":{"defaultValue":"`false`","description":"Determines whether shortcut should trigger based in contentEditable","name":"triggerOnContentEditable","required":false,"type":{"name":"boolean"}},"withOverlay":{"defaultValue":"`true`","description":"If set, the overlay is rendered","name":"withOverlay","required":false,"type":{"name":"boolean"}},"withinPortal":{"defaultValue":"`true`","description":"If set, the component is rendered inside <code>Portal</code>","name":"withinPortal","required":false,"type":{"name":"boolean"}},"xOffset":{"defaultValue":"`5vw`","description":"Left/right modal offset","name":"xOffset","required":false,"type":{"name":"MarginLeft<string | number>"}},"yOffset":{"defaultValue":"`5dvh`","description":"Top/bottom modal offset","name":"yOffset","required":false,"type":{"name":"MarginTop<string | number>"}},"zIndex":{"defaultValue":"`200`","description":"<code>z-index</code> CSS property of the root element","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"SpotlightAction":{"props":{"children":{"defaultValue":null,"description":"Children override default action elements, if passed, label, description and sections are hidden","name":"children","required":false,"type":{"name":"React.ReactNode"}},"closeSpotlightOnTrigger":{"defaultValue":null,"description":"Determines whether the spotlight should be closed when action is triggered, overrides <code>closeOnActionTrigger</code> prop set on <code>Spotlight</code>","name":"closeSpotlightOnTrigger","required":false,"type":{"name":"boolean"}},"description":{"defaultValue":null,"description":"Action description, pass string to use in default filter","name":"description","required":false,"type":{"name":"string"}},"dimmedSections":{"defaultValue":"`true`","description":"Determines whether left and right sections should have dimmed styles","name":"dimmedSections","required":false,"type":{"name":"boolean"}},"highlightColor":{"defaultValue":"`\'yellow\'`","description":"Key of <code>theme.colors</code> of any valid CSS color that will be used to highlight search query","name":"highlightColor","required":false,"type":{"name":"MantineColor"}},"highlightQuery":{"defaultValue":"`false`","description":"Determines whether search query should be highlighted in action label","name":"highlightQuery","required":false,"type":{"name":"boolean"}},"keywords":{"defaultValue":null,"description":"Keywords that are used for default filtering, not displayed anywhere, can be a string: \\"react,router,javascript\\" or an array: [\'react\', \'router\', \'javascript\']","name":"keywords","required":false,"type":{"name":"string | string[]"}},"label":{"defaultValue":null,"description":"Action label, pass string to use in default filter","name":"label","required":false,"type":{"name":"string"}},"leftSection":{"defaultValue":null,"description":"Section displayed on the left side of the label, for example, icon","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"rightSection":{"defaultValue":null,"description":"Section displayed on the right side of the label, for example, hotkey","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}}}},"SpotlightActionsGroup":{"props":{"children":{"defaultValue":null,"description":"<code>Spotlight.Action</code> components","name":"children","required":false,"type":{"name":"React.ReactNode"}},"label":{"defaultValue":null,"description":"Group label","name":"label","required":false,"type":{"name":"string"}}}},"SpotlightRoot":{"props":{"centered":{"defaultValue":"`false`","description":"If set, the modal is centered vertically","name":"centered","required":false,"type":{"name":"boolean"}},"children":{"defaultValue":null,"description":"Modal content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"clearQueryOnClose":{"defaultValue":"`true`","description":"Determines whether the search query should be cleared when the spotlight is closed","name":"clearQueryOnClose","required":false,"type":{"name":"boolean"}},"closeOnActionTrigger":{"defaultValue":"`true`","description":"Determines whether spotlight should be closed when one of the actions is triggered","name":"closeOnActionTrigger","required":false,"type":{"name":"boolean"}},"closeOnClickOutside":{"defaultValue":"`true`","description":"If set, the modal/drawer is closed when user clicks on the overlay","name":"closeOnClickOutside","required":false,"type":{"name":"boolean"}},"closeOnEscape":{"defaultValue":"`true`","description":"If set, <code>onClose</code> is called when user presses the escape key","name":"closeOnEscape","required":false,"type":{"name":"boolean"}},"disabled":{"defaultValue":null,"description":"If set, spotlight will not be rendered","name":"disabled","required":false,"type":{"name":"boolean"}},"forceOpened":{"defaultValue":null,"description":"Forces opened state, useful for tests","name":"forceOpened","required":false,"type":{"name":"boolean"}},"fullScreen":{"defaultValue":"`false`","description":"If set, the modal takes the entire screen","name":"fullScreen","required":false,"type":{"name":"boolean"}},"id":{"defaultValue":null,"description":"Id used to connect modal/drawer with body and title","name":"id","required":false,"type":{"name":"string"}},"keepMounted":{"defaultValue":"`false`","description":"If set modal/drawer is not unmounted from the DOM when hidden. <code>display: none</code> styles are applied instead.","name":"keepMounted","required":false,"type":{"name":"boolean"}},"lockScroll":{"defaultValue":"`true`","description":"If set, scroll is locked when <code>opened={true}</code>","name":"lockScroll","required":false,"type":{"name":"boolean"}},"maxHeight":{"defaultValue":"`400`","description":"Spotlight content max-height. Ignored unless <code>scrollable</code> prop is set.","name":"maxHeight","required":false,"type":{"name":"MaxHeight<string | number>"}},"onEnterTransitionEnd":{"defaultValue":null,"description":"Called when enter transition ends","name":"onEnterTransitionEnd","required":false,"type":{"name":"() => void"}},"onExitTransitionEnd":{"defaultValue":null,"description":"Called when exit transition ends","name":"onExitTransitionEnd","required":false,"type":{"name":"() => void"}},"onQueryChange":{"defaultValue":null,"description":"Called when query changes","name":"onQueryChange","required":false,"type":{"name":"(query: string) => void"}},"onSpotlightClose":{"defaultValue":null,"description":"Called when spotlight closes","name":"onSpotlightClose","required":false,"type":{"name":"() => void"}},"onSpotlightOpen":{"defaultValue":null,"description":"Called when spotlight opens","name":"onSpotlightOpen","required":false,"type":{"name":"() => void"}},"overlayProps":{"defaultValue":null,"description":"Props passed down to the <code>Overlay</code> component, use to configure opacity, <code>background-color</code>, styles and other properties","name":"overlayProps","required":false,"type":{"name":"ModalBaseOverlayProps"}},"padding":{"defaultValue":"`\'md\'`","description":"Key of <code>theme.spacing</code> or any valid CSS value to set content, header and footer padding","name":"padding","required":false,"type":{"name":"MantineSpacing"}},"portalProps":{"defaultValue":null,"description":"Props passed down to the Portal component when <code>withinPortal</code> is set","name":"portalProps","required":false,"type":{"name":"BasePortalProps"}},"query":{"defaultValue":null,"description":"Controlled Spotlight search query","name":"query","required":false,"type":{"name":"string"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"removeScrollProps":{"defaultValue":null,"description":"Props passed down to react-remove-scroll, can be used to customize scroll lock behavior","name":"removeScrollProps","required":false,"type":{"name":"RemoveScrollProps"}},"returnFocus":{"defaultValue":"`true`","description":"If set, focus is returned to the last active element when <code>onClose</code> is called","name":"returnFocus","required":false,"type":{"name":"boolean"}},"scrollAreaComponent":{"defaultValue":"`\'div\'`","description":"Scroll area component","name":"scrollAreaComponent","required":false,"type":{"name":"ScrollAreaComponent"}},"scrollable":{"defaultValue":"`false`","description":"Determines whether the actions list should be scrollable. If not set, <code>maxHeight</code> is ignored","name":"scrollable","required":false,"type":{"name":"boolean"}},"shadow":{"defaultValue":"`\'xl\'`","description":"Key of <code>theme.shadows</code> or any valid CSS box-shadow value","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"shortcut":{"defaultValue":"`\'mod + K\'`","description":"Keyboard shortcut or a list of shortcuts to trigger spotlight","name":"shortcut","required":false,"type":{"name":"string | string[] | null"}},"size":{"defaultValue":"`\'md\'`","description":"Controls width of the content area","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"stackId":{"defaultValue":null,"description":"Id of the modal in the <code>Modal.Stack</code>","name":"stackId","required":false,"type":{"name":"string"}},"store":{"defaultValue":null,"description":"Spotlight store, can be used to create multiple instances of spotlight","name":"store","required":false,"type":{"name":"SpotlightStore"}},"tagsToIgnore":{"defaultValue":"`[\'input\', \'textarea\', \'select\']`","description":"A list of tags which when focused will be ignored by shortcut","name":"tagsToIgnore","required":false,"type":{"name":"string[]"}},"title":{"defaultValue":null,"description":"Modal title","name":"title","required":false,"type":{"name":"React.ReactNode"}},"transitionProps":{"defaultValue":null,"description":"Props added to the <code>Transition</code> component that used to animate overlay and body, use to configure duration and animation type, <code>{ duration: 200, transition: \'fade-down\' }</code> by default","name":"transitionProps","required":false,"type":{"name":"TransitionProps"}},"trapFocus":{"defaultValue":"`true`","description":"If set, focus is trapped within the modal/drawer","name":"trapFocus","required":false,"type":{"name":"boolean"}},"triggerOnContentEditable":{"defaultValue":"`false`","description":"Determines whether shortcut should trigger based in contentEditable","name":"triggerOnContentEditable","required":false,"type":{"name":"boolean"}},"withOverlay":{"defaultValue":"`true`","description":"If set, the overlay is rendered","name":"withOverlay","required":false,"type":{"name":"boolean"}},"withinPortal":{"defaultValue":"`true`","description":"If set, the component is rendered inside <code>Portal</code>","name":"withinPortal","required":false,"type":{"name":"boolean"}},"xOffset":{"defaultValue":"`5vw`","description":"Left/right modal offset","name":"xOffset","required":false,"type":{"name":"MarginLeft<string | number>"}},"yOffset":{"defaultValue":"`5dvh`","description":"Top/bottom modal offset","name":"yOffset","required":false,"type":{"name":"MarginTop<string | number>"}},"zIndex":{"defaultValue":"`200`","description":"<code>z-index</code> CSS property of the root element","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"SpotlightSearch":{"props":{"disabled":{"defaultValue":null,"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"defaultValue":null,"description":"Determines whether the input should have error styles and <code>aria-invalid</code> attribute","name":"error","required":false,"type":{"name":"React.ReactNode"}},"id":{"defaultValue":null,"description":"Input element id","name":"id","required":false,"type":{"name":"string"}},"inputSize":{"defaultValue":null,"description":"<code>size</code> attribute passed down to the input element","name":"inputSize","required":false,"type":{"name":"string"}},"leftSection":{"defaultValue":null,"description":"Content section displayed on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"defaultValue":null,"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"multiline":{"defaultValue":"`false`","description":"Determines whether the input can have multiple lines, for example when <code>component=\\"textarea\\"</code>","name":"multiline","required":false,"type":{"name":"boolean"}},"pointer":{"defaultValue":"`false`","description":"Determines whether the input should have <code>cursor: pointer</code> style","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"defaultValue":null,"description":"Sets <code>required</code> attribute on the <code>input</code> element","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"defaultValue":null,"description":"Content section displayed on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"defaultValue":"`\'none\'`","description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"defaultValue":null,"description":"Props passed down to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"defaultValue":null,"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"defaultValue":"`\'sm\'`","description":"Controls input <code>height</code> and horizontal <code>padding</code>","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAria":{"defaultValue":"`true`","description":"Determines whether <code>aria-</code> and other accessibility attributes should be added to the input","name":"withAria","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"defaultValue":"`true`","description":"Determines whether the input should have red border and red text color when the <code>error</code> prop is set","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"defaultValue":null,"description":"Props passed down to the root element of the <code>Input</code> component","name":"wrapperProps","required":false,"type":{"name":"WrapperProps"}}}},"Carousel":{"props":{"children":{"defaultValue":null,"description":"<code>Carousel.Slide</code> components","name":"children","required":false,"type":{"name":"React.ReactNode"}},"controlSize":{"defaultValue":"`26`","description":"Controls size of the next and previous controls","name":"controlSize","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"controlsOffset":{"defaultValue":"`\'sm\'`","description":"Controls position of the next and previous controls, key of <code>theme.spacing</code> or any valid CSS value","name":"controlsOffset","required":false,"type":{"name":"MantineSpacing"}},"emblaOptions":{"defaultValue":null,"description":"Options passed down to embla carousel","name":"emblaOptions","required":false,"type":{"name":"Partial<OptionsType>"}},"getEmblaApi":{"defaultValue":null,"description":"Get embla API as ref","name":"getEmblaApi","required":false,"type":{"name":"(embla: EmblaCarouselType) => void"}},"height":{"defaultValue":null,"description":"Slides container <code>height</code>, required for vertical orientation","name":"height","required":false,"type":{"name":"Height<string | number>"}},"includeGapInSize":{"defaultValue":"`true`","description":"Determines whether gap between slides should be treated as part of the slide size","name":"includeGapInSize","required":false,"type":{"name":"boolean"}},"initialSlide":{"defaultValue":null,"description":"Index of initial slide","name":"initialSlide","required":false,"type":{"name":"number"}},"nextControlIcon":{"defaultValue":null,"description":"Icon of the next control","name":"nextControlIcon","required":false,"type":{"name":"React.ReactNode"}},"nextControlProps":{"defaultValue":null,"description":"Props passed down to next control","name":"nextControlProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"onNextSlide":{"defaultValue":null,"description":"Called when next slide is shown","name":"onNextSlide","required":false,"type":{"name":"() => void"}},"onPreviousSlide":{"defaultValue":null,"description":"Called when previous slider is shown","name":"onPreviousSlide","required":false,"type":{"name":"() => void"}},"onSlideChange":{"defaultValue":null,"description":"Called with slide index when slide changes","name":"onSlideChange","required":false,"type":{"name":"(index: number) => void"}},"orientation":{"defaultValue":"`\'horizontal\'`","description":"Carousel orientation","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"plugins":{"defaultValue":null,"description":"A list of embla plugins","name":"plugins","required":false,"type":{"name":"CreatePluginType<LoosePluginType, {}>[]"}},"previousControlIcon":{"defaultValue":null,"description":"Icon of the previous control","name":"previousControlIcon","required":false,"type":{"name":"React.ReactNode"}},"previousControlProps":{"defaultValue":null,"description":"Props passed down to previous control","name":"previousControlProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"slideGap":{"defaultValue":null,"description":"Key of theme.spacing or number to set gap between slides","name":"slideGap","required":false,"type":{"name":"StyleProp<MantineSpacing>"}},"slideSize":{"defaultValue":"`\'100%\'`","description":"Controls slide width based on viewport width","name":"slideSize","required":false,"type":{"name":"StyleProp<string | number>"}},"type":{"defaultValue":"`\'media\'`","description":"Determines type of queries used for responsive styles","name":"type","required":false,"type":{"name":"\\"media\\" | \\"container\\"","raw":"\\"media\\" | \\"container\\" | undefined","value":[{"value":"undefined"},{"value":"\\"media\\""},{"value":"\\"container\\""}]}},"withControls":{"defaultValue":"`true`","description":"Determines whether next/previous controls should be displayed","name":"withControls","required":false,"type":{"name":"boolean"}},"withIndicators":{"defaultValue":"`false`","description":"Determines whether indicators should be displayed","name":"withIndicators","required":false,"type":{"name":"boolean"}},"withKeyboardEvents":{"defaultValue":"`true`","description":"Determines whether arrow key should switch slides","name":"withKeyboardEvents","required":false,"type":{"name":"boolean"}}}},"Dropzone":{"props":{"accept":{"defaultValue":null,"description":"Mime types of the files that dropzone can accepts. By default, dropzone accepts all file types.","name":"accept","required":false,"type":{"name":"string[] | Accept"}},"acceptColor":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color to set colors of <code>Dropzone.Accept</code>","name":"acceptColor","required":false,"type":{"name":"MantineColor"}},"activateOnClick":{"defaultValue":null,"description":"If <code>false</code>, disables click to open the native file selection dialog","name":"activateOnClick","required":false,"type":{"name":"boolean"}},"activateOnDrag":{"defaultValue":null,"description":"If <code>false</code>, disables drag \'n\' drop","name":"activateOnDrag","required":false,"type":{"name":"boolean"}},"activateOnKeyboard":{"defaultValue":null,"description":"If <code>false</code>, disables Space/Enter to open the native file selection dialog. Note that it also stops tracking the focus state.","name":"activateOnKeyboard","required":false,"type":{"name":"boolean"}},"autoFocus":{"defaultValue":null,"description":"Set to autofocus the root element","name":"autoFocus","required":false,"type":{"name":"boolean"}},"disabled":{"defaultValue":"`false`","description":"Determines whether files capturing should be disabled","name":"disabled","required":false,"type":{"name":"boolean"}},"dragEventsBubbling":{"defaultValue":null,"description":"If <code>false</code>, stops drag event propagation to parents","name":"dragEventsBubbling","required":false,"type":{"name":"boolean"}},"enablePointerEvents":{"defaultValue":"`false`","description":"Determines whether pointer events should be enabled on the inner element","name":"enablePointerEvents","required":false,"type":{"name":"boolean"}},"getFilesFromEvent":{"defaultValue":null,"description":"Use this to provide a custom file aggregator","name":"getFilesFromEvent","required":false,"type":{"name":"(event: DropEvent) => Promise<(File | DataTransferItem)[]>"}},"inputProps":{"defaultValue":null,"description":"Props passed down to the internal Input component","name":"inputProps","required":false,"type":{"name":"InputHTMLAttributes<HTMLInputElement>"}},"loaderProps":{"defaultValue":null,"description":"Props passed down to the Loader component","name":"loaderProps","required":false,"type":{"name":"LoaderProps"}},"loading":{"defaultValue":"`false`","description":"Determines whether a loading overlay should be displayed over the dropzone","name":"loading","required":false,"type":{"name":"boolean"}},"maxFiles":{"defaultValue":null,"description":"Maximum number of files that can be picked at once","name":"maxFiles","required":false,"type":{"name":"number"}},"maxSize":{"defaultValue":null,"description":"Maximum file size in bytes","name":"maxSize","required":false,"type":{"name":"number"}},"multiple":{"defaultValue":"`true`","description":"Determines whether multiple files can be dropped to the dropzone or selected from file system picker","name":"multiple","required":false,"type":{"name":"boolean"}},"name":{"defaultValue":null,"description":"Name of the form control. Submitted with the form as part of a name/value pair.","name":"name","required":false,"type":{"name":"string"}},"onDragEnter":{"defaultValue":null,"description":"Called when the <code>dragenter</code> event occurs","name":"onDragEnter","required":false,"type":{"name":"(event: DragEvent<HTMLElement>) => void"}},"onDragLeave":{"defaultValue":null,"description":"Called when the <code>dragleave</code> event occurs","name":"onDragLeave","required":false,"type":{"name":"(event: DragEvent<HTMLElement>) => void"}},"onDragOver":{"defaultValue":null,"description":"Called when the <code>dragover</code> event occurs","name":"onDragOver","required":false,"type":{"name":"(event: DragEvent<HTMLElement>) => void"}},"onDrop":{"defaultValue":null,"description":"Called when valid files are dropped to the dropzone","name":"onDrop","required":true,"type":{"name":"(files: FileWithPath[]) => void"}},"onDropAny":{"defaultValue":null,"description":"Called when any files are dropped to the dropzone","name":"onDropAny","required":false,"type":{"name":"(files: FileWithPath[], fileRejections: FileRejection[]) => void"}},"onFileDialogCancel":{"defaultValue":null,"description":"Called when user closes the file selection dialog with no selection","name":"onFileDialogCancel","required":false,"type":{"name":"() => void"}},"onFileDialogOpen":{"defaultValue":null,"description":"Called when user opens the file selection dialog","name":"onFileDialogOpen","required":false,"type":{"name":"() => void"}},"onReject":{"defaultValue":null,"description":"Called when dropped files do not meet file restrictions","name":"onReject","required":false,"type":{"name":"(fileRejections: FileRejection[]) => void"}},"openRef":{"defaultValue":null,"description":"A ref function which when called opens the file system file picker","name":"openRef","required":false,"type":{"name":"ForwardedRef<() => void> | undefined"}},"preventDropOnDocument":{"defaultValue":null,"description":"If <code>false</code>, allow dropped items to take over the current browser window","name":"preventDropOnDocument","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"rejectColor":{"defaultValue":"`\'red\'`","description":"Key of <code>theme.colors</code> or any valid CSS color to set colors of <code>Dropzone.Reject</code>","name":"rejectColor","required":false,"type":{"name":"MantineColor"}},"useFsAccessApi":{"defaultValue":"`true`","description":"Set to true to use the File System Access API to open the file picker instead of using an <input type=\\"file\\"> click event","name":"useFsAccessApi","required":false,"type":{"name":"boolean"}},"validator":{"defaultValue":null,"description":"Custom validation function. It must return null if there\'s no errors.","name":"validator","required":false,"type":{"name":"<T extends File>(file: T) => FileError | FileError[] | null"}}}},"DropzoneFullScreen":{"props":{"accept":{"defaultValue":null,"description":"Mime types of the files that dropzone can accepts. By default, dropzone accepts all file types.","name":"accept","required":false,"type":{"name":"string[] | Accept"}},"acceptColor":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> or any valid CSS color to set colors of <code>Dropzone.Accept</code>","name":"acceptColor","required":false,"type":{"name":"MantineColor"}},"activateOnClick":{"defaultValue":null,"description":"If <code>false</code>, disables click to open the native file selection dialog","name":"activateOnClick","required":false,"type":{"name":"boolean"}},"activateOnDrag":{"defaultValue":null,"description":"If <code>false</code>, disables drag \'n\' drop","name":"activateOnDrag","required":false,"type":{"name":"boolean"}},"activateOnKeyboard":{"defaultValue":null,"description":"If <code>false</code>, disables Space/Enter to open the native file selection dialog. Note that it also stops tracking the focus state.","name":"activateOnKeyboard","required":false,"type":{"name":"boolean"}},"active":{"defaultValue":"`true`","description":"Determines whether user can drop files to browser window","name":"active","required":false,"type":{"name":"boolean"}},"autoFocus":{"defaultValue":null,"description":"Set to autofocus the root element","name":"autoFocus","required":false,"type":{"name":"boolean"}},"disabled":{"defaultValue":"`false`","description":"Determines whether files capturing should be disabled","name":"disabled","required":false,"type":{"name":"boolean"}},"dragEventsBubbling":{"defaultValue":null,"description":"If <code>false</code>, stops drag event propagation to parents","name":"dragEventsBubbling","required":false,"type":{"name":"boolean"}},"enablePointerEvents":{"defaultValue":"`false`","description":"Determines whether pointer events should be enabled on the inner element","name":"enablePointerEvents","required":false,"type":{"name":"boolean"}},"getFilesFromEvent":{"defaultValue":null,"description":"Use this to provide a custom file aggregator","name":"getFilesFromEvent","required":false,"type":{"name":"(event: DropEvent) => Promise<(File | DataTransferItem)[]>"}},"inputProps":{"defaultValue":null,"description":"Props passed down to the internal Input component","name":"inputProps","required":false,"type":{"name":"InputHTMLAttributes<HTMLInputElement>"}},"loaderProps":{"defaultValue":null,"description":"Props passed down to the Loader component","name":"loaderProps","required":false,"type":{"name":"LoaderProps"}},"loading":{"defaultValue":"`false`","description":"Determines whether a loading overlay should be displayed over the dropzone","name":"loading","required":false,"type":{"name":"boolean"}},"maxFiles":{"defaultValue":null,"description":"Maximum number of files that can be picked at once","name":"maxFiles","required":false,"type":{"name":"number"}},"maxSize":{"defaultValue":null,"description":"Maximum file size in bytes","name":"maxSize","required":false,"type":{"name":"number"}},"multiple":{"defaultValue":"`true`","description":"Determines whether multiple files can be dropped to the dropzone or selected from file system picker","name":"multiple","required":false,"type":{"name":"boolean"}},"name":{"defaultValue":null,"description":"Name of the form control. Submitted with the form as part of a name/value pair.","name":"name","required":false,"type":{"name":"string"}},"onDragEnter":{"defaultValue":null,"description":"Called when the <code>dragenter</code> event occurs","name":"onDragEnter","required":false,"type":{"name":"(event: DragEvent<HTMLElement>) => void"}},"onDragLeave":{"defaultValue":null,"description":"Called when the <code>dragleave</code> event occurs","name":"onDragLeave","required":false,"type":{"name":"(event: DragEvent<HTMLElement>) => void"}},"onDragOver":{"defaultValue":null,"description":"Called when the <code>dragover</code> event occurs","name":"onDragOver","required":false,"type":{"name":"(event: DragEvent<HTMLElement>) => void"}},"onDrop":{"defaultValue":null,"description":"Called when valid files are dropped to the dropzone","name":"onDrop","required":true,"type":{"name":"(files: FileWithPath[]) => void"}},"onDropAny":{"defaultValue":null,"description":"Called when any files are dropped to the dropzone","name":"onDropAny","required":false,"type":{"name":"(files: FileWithPath[], fileRejections: FileRejection[]) => void"}},"onFileDialogCancel":{"defaultValue":null,"description":"Called when user closes the file selection dialog with no selection","name":"onFileDialogCancel","required":false,"type":{"name":"() => void"}},"onFileDialogOpen":{"defaultValue":null,"description":"Called when user opens the file selection dialog","name":"onFileDialogOpen","required":false,"type":{"name":"() => void"}},"onReject":{"defaultValue":null,"description":"Called when dropped files do not meet file restrictions","name":"onReject","required":false,"type":{"name":"(fileRejections: FileRejection[]) => void"}},"openRef":{"defaultValue":null,"description":"A ref function which when called opens the file system file picker","name":"openRef","required":false,"type":{"name":"ForwardedRef<() => void> | undefined"}},"portalProps":{"defaultValue":null,"description":"Props to pass down to the portal when withinPortal is <code>true</code>","name":"portalProps","required":false,"type":{"name":"Omit<BasePortalProps, \\"withinPortal\\">"}},"preventDropOnDocument":{"defaultValue":null,"description":"If <code>false</code>, allow dropped items to take over the current browser window","name":"preventDropOnDocument","required":false,"type":{"name":"boolean"}},"radius":{"defaultValue":"`theme.defaultRadius`","description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"rejectColor":{"defaultValue":"`\'red\'`","description":"Key of <code>theme.colors</code> or any valid CSS color to set colors of <code>Dropzone.Reject</code>","name":"rejectColor","required":false,"type":{"name":"MantineColor"}},"useFsAccessApi":{"defaultValue":"`true`","description":"Set to true to use the File System Access API to open the file picker instead of using an <input type=\\"file\\"> click event","name":"useFsAccessApi","required":false,"type":{"name":"boolean"}},"validator":{"defaultValue":null,"description":"Custom validation function. It must return null if there\'s no errors.","name":"validator","required":false,"type":{"name":"<T extends File>(file: T) => FileError | FileError[] | null"}},"withinPortal":{"defaultValue":"`true`","description":"Determines whether component should be rendered within <code>Portal</code>","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":"`9999`","description":"Z-index value","name":"zIndex","required":false,"type":{"name":"React.CSSProperties[\\"zIndex\\"]"}}}},"CodeHighlight":{"props":{"background":{"defaultValue":null,"description":"Controls background color of the code. By default, the value depends on color scheme.","name":"background","required":false,"type":{"name":"MantineColor"}},"code":{"defaultValue":null,"description":"Code to highlight","name":"code","required":true,"type":{"name":"string"}},"codeColorScheme":{"defaultValue":null,"description":"Set to use dark or light color scheme. When using shiki adapter, you can use loaded themes here","name":"codeColorScheme","required":false,"type":{"name":"(string & {}) | \\"dark\\" | \\"light\\""}},"collapseCodeLabel":{"defaultValue":"`\'Collapse code\'`","description":"Label for collapse button","name":"collapseCodeLabel","required":false,"type":{"name":"string"}},"controls":{"defaultValue":null,"description":"Extra controls to display in the controls list","name":"controls","required":false,"type":{"name":"ReactNode[]"}},"copiedLabel":{"defaultValue":"`\'Copied\'`","description":"Label for copy button in copied state","name":"copiedLabel","required":false,"type":{"name":"string"}},"copyLabel":{"defaultValue":"`\'Copy\'`","description":"Label for copy button in default state","name":"copyLabel","required":false,"type":{"name":"string"}},"defaultExpanded":{"defaultValue":null,"description":"Uncontrolled expanded default state","name":"defaultExpanded","required":false,"type":{"name":"boolean"}},"expandCodeLabel":{"defaultValue":"`\'Expand code\'`","description":"Label for expand button","name":"expandCodeLabel","required":false,"type":{"name":"string"}},"expanded":{"defaultValue":null,"description":"Controlled expanded state","name":"expanded","required":false,"type":{"name":"boolean"}},"language":{"defaultValue":null,"description":"Language of the code, used for syntax highlighting","name":"language","required":false,"type":{"name":"string"}},"maxCollapsedHeight":{"defaultValue":"`180px`","description":"Max height of collapsed state","name":"maxCollapsedHeight","required":false,"type":{"name":"string | number"}},"onExpandedChange":{"defaultValue":null,"description":"Called when expanded state changes","name":"onExpandedChange","required":false,"type":{"name":"(expanded: boolean) => void"}},"radius":{"defaultValue":"`0`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"withBorder":{"defaultValue":"`false`","description":"Adds border to the root element","name":"withBorder","required":false,"type":{"name":"boolean"}},"withCopyButton":{"defaultValue":"`true`","description":"Determines whether the copy button should be displayed","name":"withCopyButton","required":false,"type":{"name":"boolean"}},"withExpandButton":{"defaultValue":"`false`","description":"Determines whether the expand/collapse button should be displayed","name":"withExpandButton","required":false,"type":{"name":"boolean"}}}},"CodeHighlightTabs":{"props":{"activeTab":{"defaultValue":null,"description":"Index of controlled active tab state","name":"activeTab","required":false,"type":{"name":"number"}},"background":{"defaultValue":null,"description":"Controls background color of the code. By default, the value depends on color scheme.","name":"background","required":false,"type":{"name":"MantineColor"}},"code":{"defaultValue":null,"description":"Code to highlight with meta data (file name and icon)","name":"code","required":true,"type":{"name":"CodeHighlightTabsCode[]"}},"codeColorScheme":{"defaultValue":null,"description":"Set to use dark or light color scheme. When using shiki adapter, you can use loaded themes here","name":"codeColorScheme","required":false,"type":{"name":"(string & {}) | \\"dark\\" | \\"light\\""}},"collapseCodeLabel":{"defaultValue":"`\'Collapse code\'`","description":"Label for collapse button","name":"collapseCodeLabel","required":false,"type":{"name":"string"}},"controls":{"defaultValue":null,"description":"Extra controls to display in the controls list","name":"controls","required":false,"type":{"name":"ReactNode[]"}},"copiedLabel":{"defaultValue":"`\'Copied\'`","description":"Label for copy button in copied state","name":"copiedLabel","required":false,"type":{"name":"string"}},"copyLabel":{"defaultValue":"`\'Copy\'`","description":"Label for copy button in default state","name":"copyLabel","required":false,"type":{"name":"string"}},"defaultActiveTab":{"defaultValue":null,"description":"Default active tab index","name":"defaultActiveTab","required":false,"type":{"name":"number"}},"defaultExpanded":{"defaultValue":null,"description":"Uncontrolled expanded default state","name":"defaultExpanded","required":false,"type":{"name":"boolean"}},"expandCodeLabel":{"defaultValue":"`\'Expand code\'`","description":"Label for expand button","name":"expandCodeLabel","required":false,"type":{"name":"string"}},"expanded":{"defaultValue":null,"description":"Controlled expanded state","name":"expanded","required":false,"type":{"name":"boolean"}},"getFileIcon":{"defaultValue":null,"description":"Function that returns icon based on file name","name":"getFileIcon","required":false,"type":{"name":"(fileName: string) => ReactNode"}},"maxCollapsedHeight":{"defaultValue":"`180px`","description":"Max height of collapsed state","name":"maxCollapsedHeight","required":false,"type":{"name":"string | number"}},"onExpandedChange":{"defaultValue":null,"description":"Called when expanded state changes","name":"onExpandedChange","required":false,"type":{"name":"(expanded: boolean) => void"}},"onTabChange":{"defaultValue":null,"description":"Called when tab changes","name":"onTabChange","required":false,"type":{"name":"(tab: number) => void"}},"radius":{"defaultValue":"`0`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"withBorder":{"defaultValue":"`false`","description":"Adds border to the root element","name":"withBorder","required":false,"type":{"name":"boolean"}},"withCopyButton":{"defaultValue":"`true`","description":"Determines whether the copy button should be displayed","name":"withCopyButton","required":false,"type":{"name":"boolean"}},"withExpandButton":{"defaultValue":"`false`","description":"Determines whether the expand/collapse button should be displayed","name":"withExpandButton","required":false,"type":{"name":"boolean"}}}},"InlineCodeHighlight":{"props":{"background":{"defaultValue":null,"description":"Controls background color of the code. By default, the value depends on color scheme.","name":"background","required":false,"type":{"name":"MantineColor"}},"code":{"defaultValue":null,"description":"Code to highlight","name":"code","required":true,"type":{"name":"string"}},"language":{"defaultValue":null,"description":"Language of the code, used to determine syntax highlighting","name":"language","required":false,"type":{"name":"string"}},"radius":{"defaultValue":"`\'sm\'`","description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"withBorder":{"defaultValue":"`false`","description":"Adds border to the root element","name":"withBorder","required":false,"type":{"name":"boolean"}}}},"NavigationProgress":{"props":{"color":{"defaultValue":"`theme.primaryColor`","description":"Key of <code>theme.colors</code> of any other valid CSS color","name":"color","required":false,"type":{"name":"MantineColor"}},"initialProgress":{"defaultValue":"0","description":"Initial progress value","name":"initialProgress","required":false,"type":{"name":"number"}},"portalProps":{"defaultValue":null,"description":"Props to pass down to the <code>Portal</code> when <code>withinPortal</code> is <code>true</code>","name":"portalProps","required":false,"type":{"name":"Omit<BasePortalProps, \\"withinPortal\\">"}},"size":{"defaultValue":"3","description":"Controls height of the progress bar","name":"size","required":false,"type":{"name":"number"}},"stepInterval":{"defaultValue":"500","description":"Step interval in ms","name":"stepInterval","required":false,"type":{"name":"number"}},"store":{"defaultValue":null,"description":"Component store, controls state","name":"store","required":false,"type":{"name":"NprogressStore"}},"withinPortal":{"defaultValue":"true","description":"Determines whether the progress bar should be rendered within <code>Portal</code>","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":"getDefaultZIndex(\'max\')","description":"Progressbar z-index","name":"zIndex","required":false,"type":{"name":"React.CSSProperties[\\"zIndex\\"]"}}}},"ModalsProvider":{"props":{"children":{"defaultValue":null,"description":"Your app","name":"children","required":false,"type":{"name":"React.ReactNode"}},"labels":{"defaultValue":null,"description":"Confirm modal labels","name":"labels","required":false,"type":{"name":"ConfirmLabels"}},"modalProps":{"defaultValue":null,"description":"Shared Modal component props, applied for every modal","name":"modalProps","required":false,"type":{"name":"ModalSettings"}},"modals":{"defaultValue":null,"description":"Predefined modals","name":"modals","required":false,"type":{"name":"Record<string, FC<ContextModalProps<any>>>"}}}},"RichTextEditor":{"props":{"children":{"defaultValue":null,"description":"Child editor components","name":"children","required":true,"type":{"name":"React.ReactNode"}},"editor":{"defaultValue":null,"description":"Tiptap editor instance","name":"editor","required":true,"type":{"name":"Editor | null"}},"labels":{"defaultValue":null,"description":"Labels that are used in controls","name":"labels","required":false,"type":{"name":"Partial<RichTextEditorLabels>"}},"onSourceCodeTextSwitch":{"defaultValue":null,"description":"Called if <code>RichTextEditor.SourceCode</code> clicked.","name":"onSourceCodeTextSwitch","required":false,"type":{"name":"(isSourceCodeModeActive: boolean) => void"}},"withCodeHighlightStyles":{"defaultValue":"`true`","description":"Determines whether code highlight styles should be added","name":"withCodeHighlightStyles","required":false,"type":{"name":"boolean"}},"withTypographyStyles":{"defaultValue":"`true`","description":"Determines whether typography styles should be added","name":"withTypographyStyles","required":false,"type":{"name":"boolean"}}}},"Notifications":{"props":{"autoClose":{"defaultValue":"`4000`","description":"Auto close timeout for all notifications in ms, <code>false</code> to disable auto close, can be overwritten for individual notifications in <code>notifications.show</code> function","name":"autoClose","required":false,"type":{"name":"number | false"}},"containerWidth":{"defaultValue":"`440`","description":"Notification width, cannot exceed 100%","name":"containerWidth","required":false,"type":{"name":"string | number"}},"limit":{"defaultValue":"`5`","description":"Maximum number of notifications displayed at a time, other new notifications will be added to queue","name":"limit","required":false,"type":{"name":"number"}},"notificationMaxHeight":{"defaultValue":"`200`","description":"Notification <code>max-height</code>, used for transitions","name":"notificationMaxHeight","required":false,"type":{"name":"string | number"}},"portalProps":{"defaultValue":null,"description":"Props passed down to the <code>Portal</code> component","name":"portalProps","required":false,"type":{"name":"BasePortalProps"}},"position":{"defaultValue":"`\'bottom-right\'`","description":"Notifications default position","name":"position","required":false,"type":{"name":"NotificationPosition","raw":"NotificationPosition | undefined","value":[{"value":"undefined"},{"value":"\\"bottom-center\\""},{"value":"\\"top-center\\""},{"value":"\\"top-left\\""},{"value":"\\"top-right\\""},{"value":"\\"bottom-left\\""},{"value":"\\"bottom-right\\""}]}},"store":{"defaultValue":null,"description":"Store for notifications state, can be used to create multiple instances of notifications system in your application","name":"store","required":false,"type":{"name":"NotificationsStore"}},"transitionDuration":{"defaultValue":"`250`","description":"Notification transition duration in ms","name":"transitionDuration","required":false,"type":{"name":"number"}},"withinPortal":{"defaultValue":"`true`","description":"Determines whether notifications container should be rendered inside <code>Portal</code>","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"defaultValue":"`400`","description":"Notifications container z-index","name":"zIndex","required":false,"type":{"name":"string | number"}}}}}');var d=a(8381),s=a(11251),u=a(52230);let p={"{ (value: any, replacer?: ((this: any, key: string, value: any) => any), space?: string | number | undefined): string; (value: any, replacer?: (string | number)[] | null | undefined, space?: string | ... 1 more ... | undefined): string; } | undefined":"typeof JSON.stringify","((text: string, reviver?: ((this: any, key: string, value: any) => any)) => any) | undefined":"typeof JSON.parse"};var c=a(18544),m=a.n(c);function f(e){let{component:t,query:a}=e;if(!i[t])return(0,n.jsx)(s.r,{errorOf:"props"});let c=Object.keys(i[t].props).filter(e=>i[t].props[e].name.toLowerCase().includes(a.toLowerCase().trim())).map(e=>{var s;let c=i[t].props[e];return(0,n.jsxs)(o.X.Tr,{"data-props-table-row":!0,children:[(0,n.jsxs)(o.X.Td,{style:{whiteSpace:"nowrap"},children:[(0,n.jsx)(l.f,{className:m().propName,highlight:a,component:"span","data-deprecated":c.description.includes("@deprecated")||void 0,children:c.name}),c.required&&(0,n.jsxs)(r.E,{component:"sup",c:"red",className:m().propName,children:[" ","*"]})]}),(0,n.jsx)(o.X.Td,{children:(0,n.jsx)(u.J,{children:(s=c.type.name)in p?p[s]:s.replaceAll("DefaultMantineColor","MantineColor")})}),(0,n.jsxs)(o.X.Td,{children:[(0,n.jsx)(d.t,{fz:"sm",children:c.description}),c.defaultValue&&(0,n.jsx)(d.t,{fz:"sm",display:"block",children:"Default value: ".concat(c.defaultValue)})]})]},e)});return(0,n.jsx)(o.X.ScrollContainer,{minWidth:800,"data-visible":c.length>0||void 0,children:(0,n.jsxs)(o.X,{layout:"fixed",children:[(0,n.jsx)(o.X.Thead,{children:(0,n.jsxs)(o.X.Tr,{children:[(0,n.jsx)(o.X.Th,{w:210,children:"Name"}),(0,n.jsx)(o.X.Th,{w:310,children:"Type"}),(0,n.jsx)(o.X.Th,{children:"Description"})]})}),(0,n.jsx)(o.X.Tbody,{children:c})]})})}var h=a(55729),y=a(66385),b=a(38774),v=a(4445);let g=[{prefix:"MenuSub",replace:"Menu.Sub."}];function w(e){let{component:t,componentPrefix:a}=e;return g.some(e=>t.startsWith(e.prefix)&&t!==e.prefix)?t.replace(g.find(e=>t.startsWith(e.prefix)).prefix,g.find(e=>t.startsWith(e.prefix)).replace):a?a===t?t:"".concat(a,".").concat(t.replace(a,"")):t}var q=a(12969),V=a.n(q);function C(e){let{components:t,componentPrefix:a}=e,[o,l]=(0,h.useState)(""),i=t.map(e=>(0,n.jsxs)("div",{className:V().section,"data-props-table-section":!0,children:[(0,n.jsxs)(y.h,{order:2,className:V().title,children:[w({component:e,componentPrefix:a})," props"]}),(0,n.jsx)(f,{component:e,query:o})]},e));return(0,n.jsxs)("div",{className:V().root,children:[(0,n.jsx)(b.k,{className:V().search,value:o,onChange:e=>l(e.currentTarget.value),leftSection:(0,n.jsx)(v.Kg.$,{className:V().searchIcon}),placeholder:"Search props",radius:"md",size:"lg",autoFocus:!0,pt:7}),i,(0,n.jsx)(r.E,{className:V().nothingFound,children:"Nothing found..."})]})}},59654:e=>{e.exports={wrapper:"MdxPageHeader_wrapper__vGpBZ",header:"MdxPageHeader_header__egn7g",title:"MdxPageHeader_title__bekaq",description:"MdxPageHeader_description__nEVpr"}},62406:e=>{e.exports={root:"MdxSiblings_root__aMIoJ",link:"MdxSiblings_link__6MlX4",title:"MdxSiblings_title__NDsNH",icon:"MdxSiblings_icon__VO6TY"}},63972:(e,t,a)=>{"use strict";a.d(t,{$:()=>N});var n=a(6029),o=a(55729),l=a(50212),r=a(76320),i=a(44425),d=a(27490),s=a(45208),u=a(57414),p=a(93486),c=a(82203),m=a.n(c),f=a(25844),h=a(29804),y=a(34251),b=a(6166),v=a.n(b);function g(e){return(0,n.jsxs)(m(),{href:"/",className:(0,l.A)(v().logo,f.V.auto),"aria-label":"Mantine",children:[(0,n.jsx)(h.s,{children:"Welcome to Mantine, React components library that you always wished for"}),(0,n.jsx)(y.m,{size:30,...e})]})}var w=a(61087),q=a(89228),V=a(26082);function C({size:e,style:t,...a}){return(0,n.jsx)(r.a,{component:"svg",xmlns:"http://www.w3.org/2000/svg",fill:"currentColor",viewBox:"0 0 24 24",style:[{width:(0,V.D)(e),height:(0,V.D)(e)},t],...a,children:(0,n.jsx)("path",{d:"M14.095479,10.316482L22.286354,1h-1.940718l-7.115352,8.087682L7.551414,1H1l8.589488,12.231093L1,23h1.940717  l7.509372-8.542861L16.448587,23H23L14.095479,10.316482z M11.436522,13.338465l-0.871624-1.218704l-6.924311-9.68815h2.981339  l5.58978,7.82155l0.867949,1.218704l7.26506,10.166271h-2.981339L11.436522,13.338465z"})})}var P=a(43374),S=a(90146),x=a.n(S);function D(e){let{icon:t,...a}=e;return(0,n.jsx)(w.$,{component:"a",target:"_blank",rel:"noopener noreferrer",leftSection:t,radius:"md",classNames:{root:x().socialButton,section:x().socialButtonSection},...a})}function R(e){let{className:t,...a}=e;return(0,n.jsx)(D,{className:(0,l.A)(x().discordButton,t),icon:(0,n.jsx)(q.E,{size:16}),href:P.m.discordLink,...a,children:"Join Discord community"})}function k(e){let{className:t,...a}=e;return(0,n.jsx)(D,{className:(0,l.A)(x().xButton,t),icon:(0,n.jsx)(C,{size:16}),href:P.m.twitterLink,...a,children:"Follow Mantine on X"})}let I=[{title:"About",data:[{type:"link",label:"OpenCollective",link:"https://opencollective.com/mantinedev"},{type:"next",label:"Contribute",link:"/contribute"},{type:"next",label:"Changelog",link:"/changelog/previous-versions"},{type:"link",label:"GitHub Releases",link:P.m.gitHubLinks.releases}]},{title:"Community",data:[{type:"link",label:"Chat on Discord",link:P.m.discordLink},{type:"link",label:"Follow on X",link:P.m.twitterLink},{type:"link",label:"Follow on Github",link:"https://github.com/rtivital"},{type:"link",label:"GitHub discussions",link:P.m.gitHubLinks.discussions}]},{title:"Project",data:[{type:"link",label:"Mantine UI",link:P.m.uiLink},{type:"link",label:"Help Center",link:P.m.helpCenterLink},{type:"link",label:"Github organization",link:P.m.gitHubLinks.organization},{type:"link",label:"npm organization",link:P.m.npmLink}]}];var A=a(98561),M=a.n(A);function z(e){let{data:t,title:a}=e,o=t.map((e,t)=>(0,n.jsx)(s.E,{className:M().link,component:"next"===e.type?m():"a",href:e.link,children:e.label},t));return(0,n.jsxs)("div",{className:M().wrapper,children:[(0,n.jsx)(s.E,{className:M().title,children:a}),o]})}var L=a(15168),T=a.n(L);function N(e){let{withNavbar:t}=e,a=(0,o.useRef)(null),c=I.map(e=>(0,n.jsx)(z,{data:e.data,title:e.title},e.title));return(0,p.M)("scroll",()=>{let e=function(){let e=document.documentElement.scrollTop,t=window.innerHeight;return document.documentElement.scrollHeight-(e+t)}()-30;a.current&&(a.current.style.transform="translateY(".concat(e>0?e/2:0,"px)"))}),(0,n.jsxs)("div",{className:T().root,children:[(0,n.jsx)("div",{className:T().spacer}),(0,n.jsx)(r.a,{component:"footer",mod:{"with-navbar":t},className:(0,l.A)(T().wrapper,i.A.classNames.fullWidth),ref:a,children:(0,n.jsxs)(d.m,{size:t?1170:1440,children:[(0,n.jsxs)("div",{className:T().inner,children:[(0,n.jsxs)("div",{className:T().logoSection,children:[(0,n.jsx)(g,{}),(0,n.jsx)(s.E,{className:T().description,fz:"sm",children:"Build fully functional accessible web applications faster than ever"})]}),(0,n.jsx)("div",{className:T().groups,children:c})]}),(0,n.jsx)("div",{className:T().afterFooter,children:(0,n.jsxs)(u.Y,{justify:"space-between",wrap:"wrap",children:[(0,n.jsxs)(s.E,{fz:"xs",className:T().afterFooterNote,children:["Built by ",(0,n.jsx)("a",{href:"https://github.com/rtivital",children:"Vitaly Rtishchev"})," and"," ",(0,n.jsx)("a",{href:"https://github.com/mantinedev/mantine/graphs/contributors",children:"these awesome people"})]}),(0,n.jsxs)("div",{className:T().social,children:[(0,n.jsx)(R,{className:T().socialButton}),(0,n.jsx)(k,{className:T().socialButton})]})]})})]})})]})}},64107:(e,t,a)=>{"use strict";a.d(t,{U:()=>o,r:()=>n});let n={selectors:{root:"Root element",loader:"Loader component, displayed only when `loading` prop is set",inner:"Contains all other elements, child of the `root` element",section:"Left and right sections of the button",label:"Button children"},vars:{root:{"--button-bg":"Controls `background`","--button-bd":"Control `border`","--button-hover":"Controls `background` when hovered","--button-color":"Control text `color`","--button-hover-color":"Control text `color` when hovered","--button-radius":"Controls `border-radius`","--button-height":"Controls `height` of the button","--button-padding-x":"Controls horizontal `padding` of the button","--button-fz":"Controls `font-size` of the button","--button-justify":"Controls `justify-content` of `inner` element"}},modifiers:[{modifier:"data-disabled",selector:"root",condition:"`disabled` prop is set"},{modifier:"data-loading",selector:["root","label"],condition:"`loading` prop is set"},{modifier:"data-block",selector:"root",condition:"`fullWidth` prop is set"},{modifier:"data-with-left-section",selector:"root",condition:"`leftSection` is set"},{modifier:"data-with-right-section",selector:"root",condition:"`rightSection` is set"},{modifier:"data-position",selector:"section",value:"Section position: left or right"}]},o={selectors:{group:"Root element"},vars:{group:{"--button-border-width":"`border-width` of child `Button` components"}},modifiers:[{modifier:"data-orientation",selector:"group",value:"Value of `orientation` prop"}]}},67526:(e,t,a)=>{"use strict";a.d(t,{A:()=>n});let n={selectors:{root:"Root element",pinInput:"Input item wrapper",input:"Input element"},vars:{root:{"--pin-input-size":"Controls input `width` and `height`"}},modifiers:[]}},70510:(e,t,a)=>{"use strict";a.d(t,{U:()=>l});var n=a(13044),o=a(42573);let l={selectors:{...o.h.selectors,...o.m.selectors,...n._.selectors,dropdown:"Popover dropdown",colorPreview:"Color swatch preview in input left section",eyeDropperButton:"Eye dropper button",eyeDropperIcon:"Default eye dropper icon"},vars:{colorPreview:{"--ci-preview-size":"Controls `width` and `height` of color preview"},eyeDropperIcon:{"--ci-eye-dropper-icon-size":"Controls width and height of the eye dropper icon"}}}},74508:(e,t,a)=>{"use strict";a.d(t,{u:()=>o});var n=a(42573);let o={selectors:{...n.m.selectors,...n.h.selectors},vars:{}}},79571:(e,t,a)=>{"use strict";a.d(t,{d:()=>n});let n={selectors:{root:"Root element",item:"`Accordion.Item` root element",control:"`Accordion.Control` root element",chevron:"`Accordion.Control` chevron container element",label:"`Accordion.Control` label",icon:"`Accordion.Control` icon",itemTitle:"`Accordion.Control` title (h2-h6) tag",panel:"`Accordion.Panel` root element",content:"Wrapper element of `Accordion.Panel` `children`"},vars:{root:{"--accordion-chevron-size":"Controls chevron container element `width` and `min-width`","--accordion-radius":"Controls `border-radius` in various elements, depending on variant","--accordion-transition-duration":"Controls all animations `transition-duration`"}},modifiers:[{modifier:"data-active",selector:["item","control"],condition:"Item is active (opened)"},{modifier:"data-chevron-position",selector:"control",value:"Value of `chevronPosition` prop on `Accordion`"}]}},81276:(e,t,a)=>{"use strict";a.d(t,{Q:()=>n,T:()=>o});let n={selectors:{root:"Root element",label:"Pill label (children)",remove:"Remove button"},vars:{root:{"--pill-height":"Controls `height` of the pill","--pill-fz":"Controls `font-size`","--pill-radius":"Controls `border-radius`"}},modifiers:[{modifier:"data-with-remove",selector:"root",condition:"`withRemoveButton` prop is set"},{modifier:"data-disabled",selector:"root",condition:"`disabled` prop is set"}]},o={selectors:{group:"Root element"},vars:{group:{"--pg-gap":"Controls `gap` between pills"}}}},82915:(e,t,a)=>{"use strict";a.d(t,{F:()=>o,o:()=>l});var n=a(42573);let o={selectors:{root:"Root element",track:"Switch track, contains `thumb` and `trackLabel`",trackLabel:"Label displayed inside `track`",thumb:"Thumb displayed inside `track`",input:'Input element (`input[type="checkbox"]`), hidden by default',body:"Input body, contains all other elements",labelWrapper:"Contains `label`, `description` and `error`",label:"Label element",description:"Description displayed below the label",error:"Error message displayed below the label"},vars:{root:{"--switch-radius":"Controls `border-radius` of `track` and `thumb`","--switch-height":"Controls height of `track`","--switch-width":"Controls min-width of `track`","--switch-thumb-size":"Controls width and height of `thumb`","--switch-label-font-size":"Controls `font-size` of `trackLabel`","--switch-track-label-padding":"Controls `trackLabel` offset","--switch-color":"Controls track `background-color` when input is checked"}},modifiers:[{modifier:"data-error",selector:"track",condition:"`error` prop is set"},{modifier:"data-label-position",selector:["track","root"],value:"value of `labelPosition` prop"},{modifier:"data-disabled",selector:"label",condition:"`disabled` prop is set"}]},l={selectors:{...n.m.selectors},vars:{}}},83198:(e,t,a)=>{"use strict";a.d(t,{Ur:()=>i,qT:()=>o,r5:()=>r,xF:()=>l});var n=a(42573);let o={selectors:{root:"Root element",radio:'Input element (`input[type="radio"]`)',icon:"Radio icon, used to display checked icon",inner:"Wrapper for `icon` and `input`",body:"Input body, contains all other elements",labelWrapper:"Contains `label`, `description` and `error`",label:"Label element",description:"Description displayed below the label",error:"Error message displayed below the label"},vars:{root:{"--radio-color":"Controls checked radio `background-color`","--radio-radius":"Controls radio `border-radius`","--radio-size":"Controls radio `width` and `height`","--radio-icon-color":"Controls radio icon `color`","--radio-icon-size":"Controls radio icon `width` and `height`"}},modifiers:[{modifier:"data-error",selector:"radio",condition:"`error` prop is set"},{modifier:"data-label-position",selector:"inner",value:"Value of `labelPosition` prop"}]},l={selectors:{...n.m.selectors},vars:{}},r={selectors:{indicator:"Root element",icon:"Radio icon"},vars:{indicator:o.vars.root},modifiers:[{modifier:"data-checked",selector:"indicator",condition:"`checked` prop is set"},{modifier:"data-disabled",selector:"indicator",condition:"`disabled` prop is set"}]},i={selectors:{card:"Root element"},vars:{card:{"--card-radius":"Controls card `border-radius`"}},modifiers:[{modifier:"data-checked",selector:"card",condition:"`checked` prop is set"},{modifier:"data-with-border",selector:"card",condition:"`withBorder` prop is set"}]}},83607:(e,t,a)=>{"use strict";a.d(t,{F:()=>n});let n={selectors:{root:"Root element",wrapper:"Wrapper around `body` and `icon`",body:"Body element, contains `title` and `message`",title:"Title element, contains `label` and `icon`",label:"Title label",message:"Alert message",icon:"Icon element",closeButton:"Close button"},vars:{root:{"--alert-bd":"Controls `border`","--alert-bg":"Controls `background`","--alert-color":"Controls `color`","--alert-radius":"Controls `border-radius`"}},modifiers:[{modifier:"data-with-close-button",selector:"title",condition:"`withCloseButton` prop is set"}]}},88319:(e,t,a)=>{"use strict";a.d(t,{P:()=>l});var n=a(31344),o=a(42573);let l={selectors:{...o.h.selectors,...o.m.selectors,...n.l},vars:{},modifiers:[{modifier:"data-combobox-selected",selector:"option",condition:"Option is selected"},{modifier:"data-combobox-active",selector:"option",condition:"Options was activated by keyboard"},{modifier:"data-combobox-disabled",selector:"option",condition:"Option is disabled"}]}},90146:e=>{e.exports={socialButton:"SocialButton_socialButton__YzW0G",socialButtonSection:"SocialButton_socialButtonSection__yZ0Qx",discordButton:"SocialButton_discordButton__WILTe",xButton:"SocialButton_xButton__KDi9r"}},91857:(e,t,a)=>{"use strict";a.d(t,{f:()=>o});var n=a(42573);let o={selectors:{...n.h.selectors,...n.m.selectors},vars:{}}},95914:(e,t,a)=>{"use strict";a.d(t,{V6:()=>r,iq:()=>i,rs:()=>l,yR:()=>o});var n=a(42573);let o={selectors:{root:"Root element",input:'Input element (`input[type="checkbox"]`)',icon:"Checkbox icon, used to display checkmark and indeterminate state icon",inner:"Wrapper for `icon` and `input`",body:"Input body, contains all other elements",labelWrapper:"Contains `label`, `description` and `error`",label:"Label element",description:"Description displayed below the label",error:"Error message displayed below the label"},vars:{root:{"--checkbox-color":"Controls checked checkbox `background-color`","--checkbox-radius":"Controls checkbox `border-radius`","--checkbox-size":"Controls checkbox `width` and `height`","--checkbox-icon-color":"Controls checkbox icon `color`"}},modifiers:[{modifier:"data-checked",selector:"root",condition:"`checked` prop is set"},{modifier:"data-error",selector:"input",condition:"`error` prop is set"},{modifier:"data-indeterminate",selector:"input",condition:"`indeterminate` prop is set"},{modifier:"data-label-position",selector:"inner",value:"Value of `labelPosition` prop"}]},l={selectors:{...n.m.selectors},vars:{}},r={selectors:{indicator:"Root element",icon:"Checkbox icon"},vars:{indicator:o.vars.root},modifiers:[{modifier:"data-checked",selector:"indicator",condition:"`checked` prop is set"},{modifier:"data-disabled",selector:"indicator",condition:"`disabled` prop is set"}]},i={selectors:{card:"Root element"},vars:{card:{"--card-radius":"Controls card `border-radius`"}},modifiers:[{modifier:"data-checked",selector:"card",condition:"`checked` prop is set"},{modifier:"data-with-border",selector:"card",condition:"`withBorder` prop is set"}]}},96608:(e,t,a)=>{"use strict";a.d(t,{xt:()=>tR,RN:()=>tk,e:()=>tN,oM:()=>tI});var n={};a.r(n),a.d(n,{AccordionStylesApi:()=>r.d,ActionIconGroupStylesApi:()=>d,ActionIconStylesApi:()=>i,AffixStylesApi:()=>s,AlertStylesApi:()=>u.F,AnchorStylesApi:()=>c,AngleSliderStylesApi:()=>m,AppShellStylesApi:()=>f,AreaChartStylesApi:()=>h,AspectRatioStylesApi:()=>y,AutocompleteStylesApi:()=>b.P,AvatarGroupStylesApi:()=>g,AvatarStylesApi:()=>v,BackgroundImageStylesApi:()=>w,BadgeStylesApi:()=>q.i,BarChartStylesApi:()=>V,BlockquoteStylesApi:()=>C,BreadcrumbsStylesApi:()=>P,BubbleChartStylesApi:()=>S,BurgerStylesApi:()=>x,ButtonGroupStylesApi:()=>D.U,ButtonStylesApi:()=>D.r,CalendarHeaderStylesApi:()=>G,CalendarStylesApi:()=>Q,CardStylesApi:()=>R,CarouselStylesApi:()=>k.l,CenterStylesApi:()=>I,CheckboxCardStylesApi:()=>A.iq,CheckboxGroupStylesApi:()=>A.rs,CheckboxIndicatorStylesApi:()=>A.V6,CheckboxStylesApi:()=>A.yR,ChipStylesApi:()=>M,CloseButtonStylesApi:()=>z,CodeHighlightStylesApi:()=>T,CodeHighlightTabsStylesApi:()=>N,CodeStylesApi:()=>L,ColorInputStylesApi:()=>E.U,ColorPickerStylesApi:()=>F._,ColorSwatchStylesApi:()=>Y,ComboboxLikeSelectors:()=>W.l,ComboboxStylesApi:()=>W.Q,CompositeChartStylesApi:()=>j,ContainerStylesApi:()=>B,DateInputStylesApi:()=>eo,DatePickerInputStylesApi:()=>en,DatePickerStylesApi:()=>ee,DateTimePickerStylesApi:()=>el,DecadeLevelGroupStylesApi:()=>U,DialogStylesApi:()=>ei,DividerStylesApi:()=>ed,DonutChartStylesApi:()=>es,DrawerStylesApi:()=>eu,DropzoneFullScreenStylesApi:()=>ec,DropzoneStylesApi:()=>ep,FieldsetStylesApi:()=>em,FileInputStylesApi:()=>ef.P,FlexStylesApi:()=>eh,FloatingIndicatorStylesApi:()=>ey,FunnelChartStylesApi:()=>eb,GridStylesApi:()=>ev,GroupStylesApi:()=>eg,HeatmapStylesApi:()=>ew,HighlightStylesApi:()=>eq,HoverCardStylesApi:()=>eC,ImageStylesApi:()=>eP,IndicatorStylesApi:()=>eS,InlineCodeHighlightStylesApi:()=>O,InputBaseStylesApi:()=>K,InputStylesApi:()=>H.h,InputWrapperStylesApi:()=>H.m,JsonInputStylesApi:()=>ex.P,KbdStylesApi:()=>eD,LineChartStylesApi:()=>eR,ListStylesApi:()=>ek,LoaderStylesApi:()=>eI,LoadingOverlayStylesApi:()=>eA,MarkStylesApi:()=>eM,MenuStylesApi:()=>ez.u,MiniCalendarStylesApi:()=>eL,ModalStylesApi:()=>eT,MonthLevelGroupStylesApi:()=>J,MonthPickerInputStylesApi:()=>ea,MonthPickerStylesApi:()=>$,MonthStylesApi:()=>_,MultiSelectStylesApi:()=>eN.U,NativeSelectStylesApi:()=>eO.u,NavLinkStylesApi:()=>eE,NotificationStylesApi:()=>eF.y,NotificationsStylesApi:()=>eW,NumberInputStylesApi:()=>eY.G,OverlayStylesApi:()=>ej,PaginationStylesApi:()=>eB.$,PaperStylesApi:()=>eH,PasswordInputStylesApi:()=>eK.o,PieChartStylesApi:()=>e_,PillGroupStylesApi:()=>eG.T,PillStylesApi:()=>eG.Q,PillsInputFieldStylesApi:()=>eX,PillsInputStylesApi:()=>eU,PinInputStylesApi:()=>eJ.A,PopoverStylesApi:()=>eV.g,ProgressStylesApi:()=>eQ.k,RadarChartStylesApi:()=>eZ,RadialBarChartStylesApi:()=>e$,RadioCardStylesApi:()=>e0.Ur,RadioGroupStylesApi:()=>e0.xF,RadioIndicatorStylesApi:()=>e0.r5,RadioStylesApi:()=>e0.qT,RangeSliderStylesApi:()=>tt.N,RatingStylesApi:()=>e1,RichTextEditorStylesApi:()=>e2,RingProgressStylesApi:()=>e5,ScatterChartStylesApi:()=>e6,ScrollAreaStylesApi:()=>e4,SegmentedControlStylesApi:()=>e3.G,SelectStylesApi:()=>e8.R,SemiCircleProgressStylesApi:()=>e7,SimpleGridStylesApi:()=>e9,SkeletonStylesApi:()=>te,SliderStylesApi:()=>tt.s,SparklineStylesApi:()=>ta,SpoilerStylesApi:()=>tn,SpotlightStylesApi:()=>to,StackStylesApi:()=>tl,StepperStylesApi:()=>tr.q,SwitchGroupStylesApi:()=>ti.o,SwitchStylesApi:()=>ti.F,TableOfContentsStylesApi:()=>tp,TableStylesApi:()=>tu,TabsStylesApi:()=>td.T,TagsInputStylesApi:()=>ts.q,TextInputStylesApi:()=>tm.C,TextStylesApi:()=>p,TextareaStylesApi:()=>tc.f,ThemeIconStylesApi:()=>tf,TimeGridStylesApi:()=>th,TimeInputStylesApi:()=>er,TimePickerStylesApi:()=>tb,TimelineStylesApi:()=>ty,TitleStylesApi:()=>tv,TooltipStylesApi:()=>tg,TreeStylesApi:()=>tw,TypographyStylesApi:()=>tq,UnstyledButtonStylesApi:()=>tV,YearLevelGroupStylesApi:()=>X,YearPickerInputStylesApi:()=>et,YearPickerStylesApi:()=>Z});var o=a(6029),l=a(66385),r=a(79571);let i={selectors:{root:"Root element",loader:"`Loader` component, rendered inside root element when `loading` prop is set",icon:"Inner icon wrapper"},vars:{root:{"--ai-bg":"Controls `background`","--ai-hover":"Controls `background` when hovered","--ai-bd":"Controls `border`","--ai-color":"Controls icon `color`","--ai-hover-color":"Controls icon `color` when hovered","--ai-radius":"Controls `border-radius`","--ai-size":"Controls `width`, `height`, `min-width` and `min-height` styles"}},modifiers:[{modifier:"data-disabled",selector:"root",condition:"`disabled` prop is set"},{modifier:"data-loading",selector:["root","icon"],condition:"`loading` prop is set"}]},d={selectors:{group:"Root element"},vars:{group:{"--ai-border-width":"Controls `border-width` of child ActionIcon components that are placed beside one another"}},modifiers:[{modifier:"data-orientation",selector:"group",value:"Value of `orientation` prop"}]},s={selectors:{root:"Root element"},vars:{root:{"--affix-z-index":"Controls `z-index` property","--affix-top":"Controls `top` property","--affix-bottom":"Controls `bottom` property","--affix-left":"Controls `left` property","--affix-right":"Controls `right` property"}}};var u=a(83607);let p={selectors:{root:"Root element"},vars:{root:{"--text-fz":"Controls `font-size` property","--text-lh":"Controls `line-height` property","--text-gradient":"Text fill gradient","--text-line-clamp":"Number of lines that should be visible"}},modifiers:[{modifier:"data-truncate",selector:"root",value:"Value of `truncate` prop",condition:"`truncate` prop is set"},{modifier:"data-line-clamp",selector:"root",condition:"`lineClamp` prop is a number"},{modifier:"data-inline",selector:"root",condition:"`inline` prop is set"},{modifier:"data-inherit",selector:"root",condition:"`inherit` prop is set"}]},c={...p,modifiers:[...p.modifiers,{modifier:"data-underline",selector:"root",value:"Value of `underline` prop"}]},m={selectors:{root:"Root element",label:"Label inside the slider",marks:"Wrapper for all marks",mark:"Mark element",thumb:"Slider thumb"},vars:{root:{"--slider-size":"Controls slider width and height","--thumb-size":"Controls thumb size"}},modifiers:[{modifier:"disabled",selector:"root",condition:"`disabled` prop is set"}]},f={selectors:{root:"Root element (`AppShell` component)",navbar:"`AppShell.Navbar` root element",header:"`AppShell.Header` root element",main:"`AppShell.Main` root element",aside:"`AppShell.Aside` root element",footer:"`AppShell.Footer` root element",section:"`AppShell.Section` root element"},vars:{root:{"--app-shell-transition-duration":"Controls transition duration of all children","--app-shell-transition-timing-function":"Controls transition timing function of all children"}},modifiers:[{modifier:"data-resizing",selector:"root",condition:"User is resizing the window"},{modifier:"data-layout",selector:"root",value:"Value of the `layout` prop"},{modifier:"data-disabled",selector:"root",condition:"`disabled` prop is set"},{modifier:"data-with-border",selector:["navbar","header","aside","footer"],condition:"`withBorder` prop is set either on the `AppShell` or on the associated component"},{modifier:"data-grow",selector:"section",condition:"`grow` prop is set on the `AppShell.Section`"}]},h={selectors:{root:"Root element",area:"Area of the chart",axis:"X and Y axis of the chart",container:"Recharts ResponsiveContainer component",grid:"Recharts CartesianGrid component",legend:"Legend root element",legendItem:"Legend item representing data series",legendItemColor:"Legend item color",legendItemName:"Legend item name",tooltip:"Tooltip root element",tooltipBody:"Tooltip wrapper around all items",tooltipItem:"Tooltip item representing data series",tooltipItemBody:"Tooltip item wrapper around item color and name",tooltipItemColor:"Tooltip item color",tooltipItemName:"Tooltip item name",tooltipItemData:"Tooltip item data",tooltipLabel:"Label of the tooltip",referenceLine:"Reference line",axisLabel:"X and Y axis labels"},vars:{root:{"--chart-grid-color":"Controls color of the grid and cursor lines","--chart-text-color":"Controls color of the axis labels"}},modifiers:[]},y={selectors:{root:"Root element"},vars:{root:{"--ar-ratio":"Aspect ratio"}}};var b=a(88319);let v={selectors:{root:"Root element",image:"`img` element",placeholder:"Avatar placeholder, displayed when the image cannot be loaded"},vars:{root:{"--avatar-bd":"Controls placeholder `border`","--avatar-bg":"Controls placeholder `background`","--avatar-color":"Controls placeholder text `color`","--avatar-size":"Controls `width`, `min-width` and `height`","--avatar-radius":"Controls `border-radius`"}}},g={selectors:{group:"Root element"},vars:{group:{"--ag-spacing":"Controls negative spacing between avatars"}}},w={selectors:{root:"Root element"},vars:{root:{"--bi-radius":"Controls `border-radius`"}}};var q=a(25082);let V={selectors:{root:"Root element",bar:"Bar of the chart",axis:"X and Y axis of the chart",container:"Recharts ResponsiveContainer component",grid:"Recharts CartesianGrid component",legend:"Legend root element",legendItem:"Legend item representing data series",legendItemColor:"Legend item color",legendItemName:"Legend item name",tooltip:"Tooltip root element",tooltipBody:"Tooltip wrapper around all items",tooltipItem:"Tooltip item representing data series",tooltipItemBody:"Tooltip item wrapper around item color and name",tooltipItemColor:"Tooltip item color",tooltipItemName:"Tooltip item name",tooltipItemData:"Tooltip item data",tooltipLabel:"Label of the tooltip",referenceLine:"Reference line",axisLabel:"X and Y axis labels"},vars:{root:{"--chart-grid-color":"Controls color of the grid and cursor lines","--chart-text-color":"Controls color of the axis labels","--chart-cursor-fill":"Controls fill color of the cursor line","--chart-bar-label-color":"Controls color of the bar labels"}},modifiers:[]},C={selectors:{root:"Root element",icon:"Icon element",cite:"Cite element"},vars:{root:{"--bq-bd":"Controls `border`","--bq-bg-dark":"Controls `background-color` in dark color scheme","--bq-bg-light":"Controls `background-color` in light color scheme","--bq-icon-size":"Controls `width` and `height` of the icon","--bq-radius":"Controls `border-radius`"}}},P={selectors:{root:"Root element",separator:"Separator between children",breadcrumb:"Breadcrumb item"},vars:{root:{"--bc-separator-margin":"Control left and right `margin` of separator"}}},S={selectors:{root:"Root element",axis:"X and Y axis of the chart",tooltip:"Tooltip root element"},vars:{root:{"--chart-grid-color":"Controls color of the grid and cursor lines","--chart-text-color":"Controls color of the axis labels"}},modifiers:[]},x={selectors:{root:"Root element (button)",burger:"Inner element that contains burger lines"},vars:{root:{"--burger-line-size":"Controls height of lines","--burger-color":"Controls background-color of lines","--burger-size":"Controls width and height of the button","--burger-transition-duration":"Controls transition-duration of lines","--burger-transition-timing-function":"Controls transition-timing-function of lines"}},modifiers:[{modifier:"data-opened",selector:"burger",condition:"opened prop is set"}]};var D=a(64107);let R={selectors:{root:"Root element",section:"`Card.Section` root element"},vars:{root:{"--card-padding":"Controls `padding` of the card, also used to control `Card.Section` spacing"}},modifiers:[{modifier:"data-first-section",selector:"section",condition:"`Card.Section` is the child of the `Card`"},{modifier:"data-last-section",selector:"section",condition:"`Card.Section` is the last child of the `Card`"},{modifier:"data-with-border",selector:"root",condition:"`withBorder` prop is set on `Card` component"},{modifier:"data-with-border",selector:"section",condition:"`withBorder` prop is set on `Card.Section` component"},{modifier:"data-inherit-padding",selector:"section",condition:"`inheritPadding` prop is set on `Card.Section` component"}]};var k=a(19957);let I={selectors:{root:"Root element"},vars:{}};var A=a(95914);let M={selectors:{root:"Root element",checkIcon:"Check icon, visible when checked prop is true",iconWrapper:"Wraps `checkIcon` for alignment",input:"Input element, hidden by default",label:"Input label, used as a chip body"},vars:{root:{"--chip-fz":"Controls `font-size`","--chip-size":"Controls `height`","--chip-icon-size":"Controls width and height of the icon","--chip-padding":"Controls horizontal padding when chip is not checked","--chip-checked-padding":"Controls horizontal padding when chip is checked","--chip-radius":"Controls `border-radius`","--chip-bg":"Controls `background-color` when chip is checked","--chip-hover":"Controls `background-color` when chip is checked and hovered","--chip-color":"Controls `color` when chip is checked","--chip-bd":"Controls border when chip is checked","--chip-spacing":"Controls spacing between check icon and label"}},modifiers:[{modifier:"data-checked",selector:"label",condition:"Chip is checked"},{modifier:"data-disabled",selector:"label",condition:"`disabled` prop is set"}]},z={selectors:{root:"Root element"},vars:{root:{"--cb-icon-size":"Controls `width` of the `X` icon","--cb-radius":"Controls `border-radius` of the button","--cb-size":"Controls `width` and `height` of the button"}}},L={selectors:{root:"Root element"},vars:{root:{"--code-bg":"Controls `background-color`"}},modifiers:[{modifier:"data-block",selector:"root",condition:"`block` prop is set"}]},T={selectors:{codeHighlight:"Root element",showCodeButton:"Button that reveals full code when it is collapsed",pre:"Pre element, contains code element",code:"Code element",control:"Control button, copy/collapse, custom controls",controlTooltip:"Root element of control tooltip",controls:"A wrapper around controls",scrollarea:"Scroll area, contains code"},vars:{codeHighlight:{"--ch-background":"Background color","--ch-max-height":"Max height of code block in collapsed state","--ch-radius":"Border radius"}}},N={selectors:{...T.selectors,root:"Root element",codeHighlight:"Root element of inner CodeHighlight component",filesScrollarea:"Scrollarea with files list",files:"Files names list",file:"File name",fileIcon:"File icon"},vars:{}},O={selectors:{inlineCodeHighlight:"Root element"},vars:{inlineCodeHighlight:{"--ch-background":"Background color","--ch-radius":"Border radius"}}};var E=a(70510),F=a(13044);let Y={selectors:{root:"Root element",alphaOverlay:"Overlay with checkerboard pattern",shadowOverlay:"Overlay with inner box-shadow",colorOverlay:"Overlay with given color background",childrenOverlay:"Overlay with `children` inside"},vars:{root:{"--cs-radius":"Controls `border-radius` of all overlays and `root` element","--cs-size":"Controls `width`, `height`, `min-width` and `min-height` of the `root` element"}}};var W=a(31344);let j={selectors:{root:"Root element",area:"Area of the chart",line:"Line of the chart",bar:"Bar of the chart",axis:"X and Y axis of the chart",container:"Recharts ResponsiveContainer component",grid:"Recharts CartesianGrid component",legend:"Legend root element",legendItem:"Legend item representing data series",legendItemColor:"Legend item color",legendItemName:"Legend item name",tooltip:"Tooltip root element",tooltipBody:"Tooltip wrapper around all items",tooltipItem:"Tooltip item representing data series",tooltipItemBody:"Tooltip item wrapper around item color and name",tooltipItemColor:"Tooltip item color",tooltipItemName:"Tooltip item name",tooltipItemData:"Tooltip item data",tooltipLabel:"Label of the tooltip",referenceLine:"Reference line",axisLabel:"X and Y axis labels"},vars:{root:{"--chart-grid-color":"Controls color of the grid and cursor lines","--chart-text-color":"Controls color of the axis labels"}},modifiers:[]},B={selectors:{root:"Root element"},vars:{root:{"--container-size":"Controls container `max-width`"}}};var H=a(42573);let K={selectors:{...H.h.selectors,...H.m.selectors},vars:{}},_={selectors:{monthThead:"thead element of month table",monthRow:"tr element of month table",monthTbody:"tbody element of month table",monthCell:"td element of month table",month:"Month table element",weekdaysRow:"Weekdays tr element",weekday:"Weekday th element",day:"Month day control",weekNumber:"Week number td element"},vars:{},modifiers:[{modifier:"data-with-spacing",selector:"monthCell",condition:"`withCellSpacing` prop is set"},{modifier:"data-today",selector:"day",condition:"Date is the same as new Date()"},{modifier:"data-hidden",selector:"day",condition:"Day is outside of current month and `hideOutsideDates` is set"},{modifier:"data-disabled",selector:"day",condition:"Day disabled by one of the props (`excludeDate`, `getDayProps`, etc.)"},{modifier:"data-weekend",selector:"day",condition:"Day is weekend"},{modifier:"data-outside",selector:"day",condition:"Day is outside of the current month"},{modifier:"data-selected",selector:"day",condition:"Day is selected"},{modifier:"data-in-range",selector:"day",condition:"Day is in range selection"},{modifier:"data-first-in-range",selector:"day",condition:"Day is first in range selection"},{modifier:"data-last-in-range",selector:"day",condition:"Day is last in range selection"}]},G={selectors:{calendarHeader:"Calendar header root element",calendarHeaderControl:"Previous/next calendar header controls",calendarHeaderControlIcon:"Icon of previous/next calendar header controls",calendarHeaderLevel:"Level control (changes levels when clicked, month -> year -> decade)"},vars:{calendarHeader:{"--dch-control-size":"Controls size of the previous/next and level controls","--dch-fz":"Controls font-size of the previous/next and level controls"}},modifiers:[{modifier:"data-direction",selector:"calendarHeaderControl",value:'`"previous"` or `"next"` depending on the control type'},{modifier:"data-disabled",selector:"calendarHeaderControl",condition:"Control is disabled for any reason"}]},U={selectors:{...G.selectors,levelsGroup:"Group of decades levels",yearsList:"Years list table element",yearsListRow:"Years list row element",yearsListCell:"Years list cell element",yearsListControl:"Button used to pick months and years"},vars:{}},X={selectors:{...G.selectors,levelsGroup:"Group of years levels",monthsList:"Months list table element",monthsListRow:"Months list row element",monthsListCell:"Months list cell element",monthsListControl:"Button used to pick months and years"},vars:{}},J={selectors:{...G.selectors,levelsGroup:"Group of months levels",..._.selectors},vars:{}},Q={selectors:{...G.selectors,...U.selectors,...X.selectors,...J.selectors},vars:{},modifiers:[...G.modifiers,..._.modifiers]},Z={selectors:{...G.selectors,...U.selectors},vars:{},modifiers:G.modifiers},$={selectors:{...G.selectors,...U.selectors,...X.selectors},vars:{},modifiers:G.modifiers},ee={selectors:{...G.selectors,...U.selectors,...X.selectors,...J.selectors,datePickerRoot:"Date picker root element, contains calendar and presets",presetsList:"Presets wrapper element",presetButton:"Preset button"},vars:{},modifiers:[...G.modifiers,..._.modifiers]},et={selectors:{...K.selectors,...Z.selectors,placeholder:"Placeholder element"},vars:{},modifiers:Z.modifiers},ea={selectors:{...K.selectors,...$.selectors,placeholder:"Placeholder element"},vars:{},modifiers:$.modifiers},en={selectors:{...K.selectors,...ee.selectors,placeholder:"Placeholder element"},vars:{},modifiers:ee.modifiers},eo={selectors:{...K.selectors,...ee.selectors},vars:{},modifiers:ee.modifiers},el={selectors:{...K.selectors,...ee.selectors,timeWrapper:"Wrapper around time input and submit button",timeInput:"TimeInput",submitButton:"Submit button"},vars:{},modifiers:ee.modifiers},er=K,ei={selectors:{root:"Root element",closeButton:"Close button"},vars:{root:{"--dialog-size":"Controls `width` of the dialog"}}},ed={selectors:{root:"Root element",label:"Label element"},vars:{root:{"--divider-border-style":"Controls `border-style`","--divider-color":"Controls `border-color`","--divider-size":"Controls `border-width`"}},modifiers:[{modifier:"data-with-label",selector:"root",condition:"`label` prop is truthy"},{modifier:"data-orientation",selector:"root",value:"Value of `orientation` prop"},{modifier:"data-position",selector:"label",value:"Value of `labelPosition` prop"}]},es={selectors:{root:"Root element",label:"Chart label, controlled by `chartLabel` prop",tooltip:"Tooltip root element",tooltipBody:"Tooltip wrapper around all items",tooltipItem:"Tooltip item representing data series",tooltipItemBody:"Tooltip item wrapper around item color and name",tooltipItemColor:"Tooltip item color",tooltipItemName:"Tooltip item name",tooltipItemData:"Tooltip item data",tooltipLabel:"Label of the tooltip"},vars:{root:{"--chart-labels-color":"Controls color of the chart labels","--chart-size":"Controls size of the chart","--chart-stroke-color":"Controls color of the chart stroke"}},modifiers:[]},eu={selectors:{root:"Root element",inner:"Element used to center modal, has fixed position, takes entire screen",content:"`Drawer.Content` root element",header:"Contains title and close button",overlay:"Overlay displayed under the `Drawer.Content`",title:"Drawer title (h2 tag), displayed in the header",body:"Drawer body, displayed after header",close:"Close button"},vars:{root:{"--drawer-offset":"Controls `margin` of `Drawer.Content`","--drawer-size":"Controls `width` of `Drawer.Content`","--drawer-flex":"Controls `flex` property of `Drawer.Content`","--drawer-align":"Controls `align-items` property of `Drawer.Content`","--drawer-justify":"Controls `justify-content` property of `Drawer.Content`","--drawer-height":"Controls `height` property of `Drawer.Content`"}}},ep={selectors:{root:"Dropzone root element",inner:"Dropzone inner element (wraps children)"},vars:{root:{"--dropzone-accept-bg":"Controls `background-color` when file is accepted","--dropzone-reject-bg":"Controls `background-color` when file is rejected","--dropzone-accept-color":"Controls `color` when file is accepted","--dropzone-reject-color":"Controls `color` when file is rejected","--dropzone-radius":"Controls `border-radius`"}},modifiers:[{modifier:"data-accept",selector:"root",condition:"Files that are dragged over the dropzone are accepted"},{modifier:"data-reject",selector:"root",condition:"Files that are dragged over the dropzone are rejected"},{modifier:"data-idle",selector:"root",condition:"Dropzone is idle"},{modifier:"data-loading",selector:"root",condition:"`loading` prop is set"},{modifier:"data-disabled",selector:"root",condition:"`disabled` prop is set"},{modifier:"data-activate-on-click",selector:"root",condition:"`activateOnClick` prop is `true`"}]},ec={selectors:{fullScreen:"Dropzone.Fullscreen root element",...ep.selectors},vars:{}},em={selectors:{root:"Root element",legend:"Legend element"},vars:{root:{"--fieldset-radius":"Controls `border-radius`"}}};var ef=a(16739);let eh={selectors:{root:"Root element"},vars:{}},ey={selectors:{root:"Root element"},vars:{root:{"--transition-duration":"Controls indicator transition duration"}}},eb={selectors:{root:"Root element",tooltip:"Tooltip root element",tooltipBody:"Tooltip wrapper around all items",tooltipItem:"Tooltip item representing data series",tooltipItemBody:"Tooltip item wrapper around item color and name",tooltipItemColor:"Tooltip item color",tooltipItemName:"Tooltip item name",tooltipItemData:"Tooltip item data",tooltipLabel:"Label of the tooltip"},vars:{root:{"--chart-labels-color":"Controls color of the chart labels","--chart-size":"Controls size of the chart","--chart-stroke-color":"Controls color of the chart stroke"}},modifiers:[]},ev={selectors:{container:'Container element, only used with `type="container"` prop',root:"Root element",inner:"Columns wrapper",col:"`Grid.Col` root element"},vars:{root:{"--grid-overflow":"Controls `overflow` property","--grid-align":"Controls `align-items` property","--grid-justify":"Controls `justify-content` property"}}},eg={selectors:{root:"Root element"},vars:{root:{"--group-align":"Controls `align-items` property","--group-justify":"Controls `justify-content` property","--group-gap":"Controls `gap` property","--group-wrap":"Controls `flex-wrap` property","--group-child-width":"Controls `max-width` of child elements, applied when grow prop is set and `preventGrowOverflow` is `true`"}},modifiers:[{modifier:"data-grow",selector:"root",condition:"`grow` prop is set"}]},ew={selectors:{root:"Root element",weekdayLabel:"Weekday text element",monthLabel:"Month text element",rect:"Rect that represents date"},vars:{},modifiers:[]},eq={selectors:{root:"Root element"},vars:{}};var eV=a(3680);let eC=eV.g,eP={selectors:{root:"Root element"},vars:{root:{"--image-object-fit":"Controls `object-fit` property","--image-radius":"Controls `border-radius` property"}},modifiers:[{modifier:"data-fallback",selector:"root",condition:"Image failed to load"}]},eS={selectors:{root:"Root element",indicator:"Indicator element"},vars:{root:{"--indicator-bottom":"Controls `bottom` style","--indicator-left":"Controls `left` style","--indicator-right":"Controls `right` style","--indicator-top":"Controls `top` style","--indicator-radius":"Controls `border-radius`","--indicator-size":"Controls `min-width` and `height`","--indicator-translate-x":"Controls `translateX` style, used for positioning","--indicator-translate-y":"Controls `translateY` style, used for positioning","--indicator-z-index":"Controls `z-index` style","--indicator-color":"Controls `background-color`","--indicator-text-color":"Controls `color`"}},modifiers:[{modifier:"data-inline",selector:"root",condition:"`inline` prop is set"},{modifier:"data-with-label",selector:"indicator",condition:"`label` prop is set"},{modifier:"data-with-border",selector:"indicator",condition:"`withBorder` prop is set"},{modifier:"data-processing",selector:"indicator",condition:"`processing` prop is set"}]};var ex=a(47223);let eD={selectors:{root:"Root element"},vars:{root:{"--kbd-fz":"Controls `font-size`"}}},eR={selectors:{root:"Root element",line:"Line of the chart",axis:"X and Y axis of the chart",container:"Recharts ResponsiveContainer component",grid:"Recharts CartesianGrid component",legend:"Legend root element",legendItem:"Legend item representing data series",legendItemColor:"Legend item color",legendItemName:"Legend item name",tooltip:"Tooltip root element",tooltipBody:"Tooltip wrapper around all items",tooltipItem:"Tooltip item representing data series",tooltipItemBody:"Tooltip item wrapper around item color and name",tooltipItemColor:"Tooltip item color",tooltipItemName:"Tooltip item name",tooltipItemData:"Tooltip item data",tooltipLabel:"Label of the tooltip",referenceLine:"Reference line",axisLabel:"X and Y axis labels"},vars:{root:{"--chart-grid-color":"Controls color of the grid and cursor lines","--chart-text-color":"Controls color of the axis labels"}},modifiers:[]},ek={selectors:{root:"Root element",item:"ListItem root element",itemIcon:"ListItem icon",itemLabel:"ListItem content",itemWrapper:"ListItem wrapper element, container, icon and content"},vars:{root:{"--list-fz":"Controls `font-size`","--list-lh":"Controls `line-height`","--list-spacing":"Controls spacing between items"}},modifiers:[{modifier:"data-with-padding",selector:"root",condition:"`withPadding` prop is set"},{modifier:"data-centered",selector:"item",condition:"`center` prop is set on List component"},{modifier:"data-with-icon",selector:"item",condition:"`icon` prop is set on ListItem component"}]},eI={selectors:{root:"Root element"},vars:{root:{"--loader-size":"Controls loader size (usually `width` and `height`, in some cases only `width`)","--loader-color":"Control loader color"}}},eA={selectors:{root:"Root element",overlay:"`Overlay` component",loader:"`Loader` component"},vars:{root:{"--lo-z-index":"Controls `z-index` of the overlay and loader"}}},eM={selectors:{root:"Root element"},vars:{root:{"--mark-bg-dark":"Controls `background-color` in dark color scheme","--mark-bg-light":"Controls `background-color` for light color scheme"}}};var ez=a(15960);let eL={selectors:{root:"Root element",control:"Button in the dropdown which is used to select hours/minutes/seconds/am-pm",days:"Days container",day:"Single day element",dayMonth:"Day element in month view",dayNumber:"Day number element"},vars:{root:{"--mini-calendar-font-size":"Controls size of all elements (based on em units)"}},modifiers:[{selector:"control",modifier:"disabled",condition:"Next/previous range is after `maxDate` or before `minDate`"},{selector:"control",modifier:"direction",value:"`previous` or `next`"},{selector:"day",modifier:"selected",condition:"The day matches the `value`"},{selector:"day",modifier:"disabled",condition:"The day is before `minDate` or after `maxDate`"}]},eT={selectors:{root:"Root element",inner:"Element used to center modal, has fixed position, takes entire screen",content:"`Modal.Content` root element",header:"Contains title and close button",overlay:"Overlay displayed under the `Modal.Content`",title:"Modal title (h2 tag), displayed in the header",body:"Modal body, displayed after header",close:"Close button"},vars:{root:{"--modal-radius":"Controls `border-radius` of `Modal.Content`","--modal-size":"Controls `width` of `Modal.Content`","--modal-x-offset":"Controls left and right `padding` of the inner element used to position `Modal.Content`","--modal-y-offset":"Controls top and bottom `padding` of the inner element used to position `Modal.Content`"}},modifiers:[{modifier:"data-full-screen",selector:"root",condition:"`fullScreen` prop is set"},{modifier:"data-centered",selector:"root",condition:"`centered` prop is set"}]};var eN=a(14048),eO=a(74508);let eE={selectors:{root:"Root element",body:"Contains label and description",section:"Left and right sections",label:"NavLink label",description:"Dimmed description displayed below the label",children:"Wrapper around nested links",chevron:"Default chevron icon",collapse:"Nested links Collapse container"},vars:{root:{"--nl-bg":"Controls link `background-color`","--nl-color":"Controls link `color`","--nl-hover":"Controls link `background-color` when hovered"},children:{"--nl-offset":"Controls nested links offset"}},modifiers:[{modifier:"data-active",selector:"root",condition:"`active` prop is set"}]};var eF=a(47200),eY=a(52206);let eW={selectors:{root:"Notifications container, contains all notifications",notification:"Single notification"},vars:{root:{"--notifications-container-width":"Controls notifications container `max-width`","--notifications-z-index":"Controls notifications container `z-index`"}}},ej={selectors:{root:"Root element"},vars:{root:{"--overlay-bg":"Controls `background-color`","--overlay-filter":"Controls `backdrop-filter`","--overlay-radius":"Controls `border-radius`","--overlay-z-index":"Controls `z-index`"}},modifiers:[{modifier:"data-center",selector:"root",condition:"`center` prop is set"},{modifier:"data-fixed",selector:"root",condition:"`fixed` prop is set"}]};var eB=a(44631);let eH={selectors:{root:"Root element"},vars:{root:{"--paper-radius":"Controls `border-radius`","--paper-shadow":"Controls `box-shadow`"}},modifiers:[{modifier:"data-with-border",selector:"root",condition:"`withBorderProp` is set"}]};var eK=a(56878);let e_={selectors:{root:"Root element",tooltip:"Tooltip root element",tooltipBody:"Tooltip wrapper around all items",tooltipItem:"Tooltip item representing data series",tooltipItemBody:"Tooltip item wrapper around item color and name",tooltipItemColor:"Tooltip item color",tooltipItemName:"Tooltip item name",tooltipItemData:"Tooltip item data",tooltipLabel:"Label of the tooltip"},vars:{root:{"--chart-labels-color":"Controls color of the chart labels","--chart-size":"Controls size of the chart","--chart-stroke-color":"Controls color of the chart stroke"}},modifiers:[]};var eG=a(81276);let eU={selectors:{...H.h.selectors,...H.m.selectors},vars:{}},eX={selectors:{field:"Root element"},vars:{},modifiers:[{modifier:"data-type",selector:"field",value:"Value of `type` prop"},{modifier:"data-disabled",selector:"field",condition:"`disabled` prop is set"}]};var eJ=a(67526),eQ=a(32032);let eZ={selectors:{root:"Root element",container:"Recharts ResponsiveContainer component",tooltip:"Tooltip root element",tooltipBody:"Tooltip wrapper around all items",tooltipItem:"Tooltip item representing data series",tooltipItemBody:"Tooltip item wrapper around item color and name",tooltipItemColor:"Tooltip item color",tooltipItemName:"Tooltip item name",tooltipItemData:"Tooltip item data",tooltipLabel:"Label of the tooltip",legend:"Legend root element",legendItem:"Legend item representing data series",legendItemColor:"Legend item color",legendItemName:"Legend item name"},vars:{root:{"--chart-grid-color":"Controls color of the chart grid","--chart-text-color":"Controls color of all text elements in the chart"}},modifiers:[]},e$={selectors:{root:"Root element",tooltip:"Tooltip root element",legend:"Legend root element",legendItem:"Legend item representing data series",legendItemColor:"Legend item color",legendItemName:"Legend item name"},vars:{root:{"--chart-empty-background":"Background color of the empty space in the chart"}},modifiers:[]};var e0=a(83198);let e1={selectors:{root:"Root element",starSymbol:"Default star icon",input:"Item input, hidden by default",label:"Item label, used to display star icon",symbolBody:"Wrapper around star icon for centering",symbolGroup:"Group of symbols, used to display fractions"},vars:{root:{"--rating-color":"Controls filled star icon color","--rating-size":"Controls star icon width and height"}},modifiers:[{modifier:"data-read-only",selector:"label",condition:"`readOnly` prop is set"},{modifier:"data-active",selector:"input",condition:"Input value is the same as component value"},{modifier:"data-filled",selector:"starSymbol",condition:"Associated input value is less or equal to the component value"}]},e2={selectors:{root:"Root element",toolbar:"Toolbar element",content:"Content area",Typography:"Typography component, wraps content",control:"RichTextEditor.Control root element, used as a base for all controls",controlIcon:"Control icon element",controlsGroup:"RichTextEditor.ControlsGroup component root",linkEditor:"Link editor root element",linkEditorSave:"Link editor save button",linkEditorInput:"Link editor url input",linkEditorExternalControl:"Link editor external button",linkEditorDropdown:"Link editor popover dropdown element"},vars:{},modifiers:[{modifier:"data-active",selector:"control",condition:"Control is active"}]},e5={selectors:{root:"Root element",svg:"svg element",curve:"circle element",label:"Label element"},vars:{root:{"--rp-label-offset":"Label offset on the left and right sides of the ring","--rp-size":"Controls `height` and `width` of svg and root elements","--rp-transition-duration":"Controls transition duration of filled segments"}}},e6={selectors:{root:"Root element",scatter:"recharts Scatter component",axis:"X and Y axis of the chart",container:"Recharts ResponsiveContainer component",grid:"Recharts CartesianGrid component",legend:"Legend root element",legendItem:"Legend item representing data series",legendItemColor:"Legend item color",legendItemName:"Legend item name",tooltip:"Tooltip root element",tooltipBody:"Tooltip wrapper around all items",tooltipItem:"Tooltip item representing data series",tooltipItemBody:"Tooltip item wrapper around item color and name",tooltipItemColor:"Tooltip item color",tooltipItemName:"Tooltip item name",tooltipItemData:"Tooltip item data",tooltipLabel:"Label of the tooltip",referenceLine:"Reference line",axisLabel:"X and Y axis labels"},vars:{root:{"--chart-grid-color":"Controls color of the grid and cursor lines","--chart-text-color":"Controls color of the axis labels"}},modifiers:[]},e4={selectors:{root:"Root element",content:"Wraps component children",viewport:"Main scrollable area",scrollbar:"Horizontal or vertical scrollbar root",thumb:"Scrollbar thumb",corner:"Corner between horizontal and vertical scrollbars"},vars:{root:{"--scrollarea-scrollbar-size":"Scrollbar size"}},modifiers:[{modifier:"data-hidden",selector:["scrollbar","corner"],condition:'type="never"'},{modifier:"data-hovered",selector:"corner",condition:"One of the scrollbars is hovered"},{modifier:"data-orientation",selector:"scrollbar",value:'"horizontal" or "vertical" depending on scrollbar position'}]};var e3=a(22174),e8=a(48147);let e7={selectors:{root:"Root element",svg:"Root svg element",emptySegment:"Empty circle segment",filledSegment:"Filled circle segment",label:"Label element"},vars:{root:{"--scp-empty-segment-color":"Color of the empty segment","--scp-filled-segment-color":"Color of the filled segment","--scp-rotation":"Transform styles of the svg, controlled by `orientation` and `fillDirection` props","--scp-thickness":"Controls `strokeWidth` of the circle","--scp-transition-duration":"Controls transition duration of the filled segment"}},modifiers:[{selector:"label",modifier:"data-position",value:"Value of `labelPosition` prop"}]},e9={selectors:{root:"Root element",container:'Container element, available only when `type="container"` is set'},vars:{}},te={selectors:{root:"Root element"},vars:{root:{"--skeleton-height":"Controls skeleton `height`","--skeleton-width":"Controls skeleton `width`","--skeleton-radius":"Controls skeleton `border-radius`"}},modifiers:[{modifier:"data-visible",selector:"root",condition:"`visible` prop is set"},{modifier:"data-animate",selector:"root",condition:"`animate` prop is set"}]};var tt=a(39466);let ta={selectors:{root:"Root element"},vars:{root:{"--chart-color":"Controls stroke and fill color"}},modifiers:[]},tn={selectors:{root:"Root element",content:"Wraps content to set max-height and transition",control:"Show/hide content control"},vars:{root:{"--spoiler-transition-duration":"Controls transition duration"}},modifiers:[{modifier:"data-has-spoiler",selector:"root",condition:"Whether the control button is shown or not"}]},to={selectors:{...eT.selectors,search:"Search input (`Spotlight.Search`)",actionsList:"Actions list (`Spotlight.ActionsList`)",empty:"Empty state (`Spotlight.Empty`)",footer:"Footer (`Spotlight.Footer`)",action:"Action (`Spotlight.Action`)",actionBody:"Body of the action, contains label and description",actionLabel:"`Spotlight.Action` label",actionDescription:"`Spotlight.Action` description",actionSection:"`Spotlight.Action` left and right sections",actionsGroup:"`Spotlight.ActionsGroup` root element"},vars:{},modifiers:[{modifier:"data-selected",selector:"action",condition:"Action is selected with up/down keys"},{modifier:"data-position",selector:"actionSection",value:"Section position: left or right"},{modifier:"data-dimmed",selector:"actionSection",condition:"`dimmedSections` prop is set on `Spotlight.Action` component"}]},tl={selectors:{root:"Root element"},vars:{root:{"--stack-align":"Controls `align-items` property","--stack-justify":"Controls `justify-content` property","--stack-gap":"Controls `gap` property"}}};var tr=a(9876),ti=a(82915),td=a(8299),ts=a(29986);let tu={selectors:{table:"Root `table` element (`Table` component)",thead:"`thead` element (`Table.Thead` component)",tbody:"`tbody` element (`Table.Tbody` component)",tfoot:"`tfoot` element (`Table.Tfoot` component)",tr:"`tr` element (`Table.Tr` component)",th:"`th` element (`Table.Th` component)",td:"`td` element (`Table.Td` component)",caption:"`caption` element (`Table.Caption` component)"},vars:{table:{"--table-border-color":"Controls `border-color` of all elements inside table","--table-layout":"Controls `table-layout` of the table element, auto by default","--table-caption-side":"Controls caption-side of the table element, `bottom` by default","--table-horizontal-spacing":"Controls `padding-left` and `padding-right` of `Table.Th` and `Table.Td` elements","--table-vertical-spacing":"Controls `padding-top` and `padding-bottom` of `Table.Td` and `Table.Th` elements","--table-striped-color":"Controls `background-color` of even/odd `Table.Tr` elements","--table-highlight-on-hover-color":"Controls `background-color` of `Table.Tr` elements when hovered","--table-sticky-header-offset":"Controls `top` offset of sticky header"}},modifiers:[{modifier:"data-with-table-border",selector:"table",condition:"`withTableBorder` prop is set on `Table` component"},{modifier:"data-with-column-border",selector:["th","td"],condition:"`withColumnsBorder` prop is set on `Table` component"},{modifier:"data-with-row-border",selector:"tr",condition:"`withRowsBorder` prop is set on `Table` component"},{modifier:"data-striped",selector:"tr",value:"odd | even",condition:"`striped` prop is set on `Table` component"},{modifier:"data-hover",selector:"tr",condition:"`highlightOnHover` prop is set on `Table` component"},{modifier:"data-size",selector:"tr",value:"value of `captionSize` prop on `Table` component"}]},tp={selectors:{root:"Root element",control:"Control element"},vars:{root:{"--toc-bg":"Background color of active control","--toc-color":"Text color of active control","--toc-depth-offset":"Offset between of control depending on depth","--toc-radius":"Border-radius of control","--toc-size":"Controls font-size and padding of all elements"}},modifiers:[{modifier:"data-active",selector:"control",condition:"Associated heading is currently the best match in the viewport"}]};var tc=a(91857),tm=a(99452);let tf={selectors:{root:"Root element"},vars:{root:{"--ti-bg":"Controls `background`","--ti-bd":"Controls `border`","--ti-color":"Controls icon `color`","--ti-radius":"Controls `border-radius`","--ti-size":"Controls `width`, `height`, `min-width` and `min-height` styles"}}},th={selectors:{root:"Root element",control:"Time grid control",simpleGrid:"SimpleGrid component root"},vars:{root:{"--time-grid-fz":"Controls `font-size` property of all controls","--time-grid-radius":"Controls `border-radius` property of all controls"}},modifiers:[{modifier:"data-active",selector:"control",condition:"Current component value is the same as control value"},{modifier:"data-disabled",selector:"control",condition:"Component is disabled by one of the props: `minTime`, `maxTime`, `disableTime`, `disabled`"}]},ty={selectors:{root:"Root element",item:"Item root element",itemBody:"Item body, wraps title and content",itemTitle:"Item title, controlled by title prop",itemContent:"Item content, controlled by children prop",itemBullet:"Item bullet"},vars:{root:{"--tl-bullet-size":"Controls bullet `width` and `height`","--tl-color":"Controls active bullet and line colors","--tl-icon-color":"Controls icon color","--tl-line-width":"Controls width of the line between bullets","--tl-radius":"Controls bullet `border-radius`"}},modifiers:[{modifier:"data-active",selector:["item","itemBullet"],condition:"Item index is =< Timeline active prop"},{modifier:"data-line-active",selector:["item"],condition:"Item index is < Timeline active prop"}]},tb={selectors:{...H.h.selectors,...H.m.selectors,control:"Button in the dropdown which is used to select hours/minutes/seconds/am-pm",controlsList:"List of buttons with hours/minutes/seconds/am-pm",controlsListGroup:"Group of controlsLists",dropdown:"Popover dropdown",fieldsRoot:"A wrapper element for all fieldsGroups",fieldsGroup:"A wrapper element for hours/minutes/seconds/am-pm fields",field:"Hours/minutes/seconds/am-pm input field",presetControl:"Time preset button",presetsGroup:"Wraps preset controls and label",presetsGroupLabel:"Labels of the preset group",presetsRoot:"Element wrapping all presets content",scrollarea:"Scroll area in the dropdown"},vars:{dropdown:{"--control-font-size":"Controls `font-size` of dropdown controls"}},modifiers:[]},tv={selectors:{root:"Root element"},vars:{root:{"--title-fw":"Title `font-weight`, by default value from `theme.headings`","--title-fz":"Title `font-size`, by default value from `theme.headings`","--title-lh":"Title `line-height`, by default value from `theme.headings`","--title-line-clamp":"Controls `-webkit-line-clamp` css property","--title-text-wrap":"Controls `text-wrap` css property"}},modifiers:[{modifier:"data-order",selector:"root",value:"Value of the `order` prop"},{modifier:"data-line-clamp",selector:"root",condition:"`lineClamp` prop is a number"}]},tg={selectors:{tooltip:"Root element",arrow:"Tooltip arrow, rendered inside tooltip"},vars:{tooltip:{"--tooltip-bg":"Tooltip `background-color`","--tooltip-radius":"Tooltip `border-radius`","--tooltip-color":"Controls tooltip text color"}},modifiers:[{modifier:"data-multiline",selector:"tooltip",condition:"`multiline` prop is set"}]},tw={selectors:{root:"Root element",node:"Node element (li), contains label and subtree elements",subtree:"Subtree element (ul)",label:"Node label"},vars:{root:{"--level-offset":"Controls offset of nested tree levels"}},modifiers:[{modifier:"data-selected",selector:["node","label"],condition:"The node is selected"},{modifier:"data-hovered",selector:["node","label"],condition:"The node is hovered"},{modifier:"data-level",selector:"node",value:"Nesting level of the node"}]},tq={selectors:{root:"Root element"},vars:{}},tV={selectors:{root:"Root element"},vars:{}};var tC=a(59361),tP=a(11251),tS=a(19577),tx=a(8381),tD=a(52230);function tR(e){var t,a,n;let{data:l,fixedLayout:r=!0,...i}=e,d=null==(t=l.modifiers)?void 0:t.some(e=>!!e.condition),s=null==(a=l.modifiers)?void 0:a.some(e=>!!e.value),u=(null==(n=l.modifiers)?void 0:n.map((e,t)=>(0,o.jsxs)(tS.X.Tr,{children:[(0,o.jsx)(tS.X.Td,{children:Array.isArray(e.selector)?e.selector.join(", "):e.selector}),(0,o.jsx)(tS.X.Td,{children:(0,o.jsx)(tD.J,{children:e.modifier})}),d&&(0,o.jsx)(tS.X.Td,{children:(0,o.jsx)(tx.t,{children:e.condition||"–"})}),s&&(0,o.jsx)(tS.X.Td,{children:(0,o.jsx)(tx.t,{children:e.value||"–"})})]},t)))||[];return(0,o.jsx)(tS.X.ScrollContainer,{minWidth:800,children:(0,o.jsxs)(tS.X,{layout:r?"fixed":void 0,...i,children:[(0,o.jsx)(tS.X.Thead,{children:(0,o.jsxs)(tS.X.Tr,{children:[(0,o.jsx)(tS.X.Th,{w:r?210:void 0,children:"Selector"}),(0,o.jsx)(tS.X.Th,{w:r?310:void 0,children:"Attribute"}),d&&(0,o.jsx)(tS.X.Th,{children:"Condition"}),s&&(0,o.jsx)(tS.X.Th,{children:"Value"})]})}),(0,o.jsx)(tS.X.Tbody,{children:u})]})})}function tk(e){let{data:t,component:a,fixedLayout:n=!0,...l}=e,r=Object.keys(t.selectors).map(e=>(0,o.jsxs)(tS.X.Tr,{children:[(0,o.jsx)(tS.X.Td,{children:e}),(0,o.jsx)(tS.X.Td,{children:(0,o.jsxs)(tD.J,{children:[".mantine-",a,"-",e]})}),(0,o.jsx)(tS.X.Td,{children:(0,o.jsx)(tx.t,{children:t.selectors[e]})})]},e));return(0,o.jsx)(tS.X.ScrollContainer,{minWidth:800,children:(0,o.jsxs)(tS.X,{layout:n?"fixed":void 0,...l,children:[(0,o.jsx)(tS.X.Thead,{children:(0,o.jsxs)(tS.X.Tr,{children:[(0,o.jsx)(tS.X.Th,{w:n?210:void 0,children:"Selector"}),(0,o.jsx)(tS.X.Th,{w:n?310:void 0,children:"Static selector"}),(0,o.jsx)(tS.X.Th,{children:"Description"})]})}),(0,o.jsx)(tS.X.Tbody,{children:r})]})})}function tI(e){let{data:t,fixedLayout:a=!0,...n}=e,l=Object.keys(t.vars).reduce((e,a)=>(Object.keys(t.vars[a]).forEach((n,l)=>{e.push((0,o.jsxs)(tS.X.Tr,{children:[0===l&&(0,o.jsx)(tS.X.Td,{rowSpan:Object.keys(t.vars[a]).length,children:a}),(0,o.jsx)(tS.X.Td,{children:(0,o.jsx)(tD.J,{children:n})}),(0,o.jsx)(tS.X.Td,{children:(0,o.jsx)(tx.t,{children:t.vars[a][n]})})]},"".concat(a,"-").concat(n)))}),e),[]);return(0,o.jsx)(tS.X.ScrollContainer,{minWidth:800,children:(0,o.jsxs)(tS.X,{layout:a?"fixed":void 0,...n,children:[(0,o.jsx)(tS.X.Thead,{children:(0,o.jsxs)(tS.X.Tr,{children:[(0,o.jsx)(tS.X.Th,{w:a?210:void 0,children:"Selector"}),(0,o.jsx)(tS.X.Th,{w:a?310:void 0,children:"Variable"}),(0,o.jsx)(tS.X.Th,{children:"Description"})]})}),(0,o.jsx)(tS.X.Tbody,{children:l})]})})}var tA=a(56132),tM=a.n(tA);function tz(e){let{component:t,componentPrefix:a}=e,r=n["".concat(t,"StylesApi")];if(!r)return(0,o.jsx)(tP.r,{errorOf:"Styles API"});let i=(0,tC.xE)({component:t,componentPrefix:a});return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)("div",{className:tM().section,children:[(0,o.jsxs)(l.h,{order:2,className:tM().title,children:[i," selectors"]}),(0,o.jsx)(tk,{component:t,data:r})]}),Object.keys(r.vars).length>0&&(0,o.jsxs)("div",{className:tM().section,children:[(0,o.jsxs)(l.h,{order:2,className:tM().title,children:[i," CSS variables"]}),(0,o.jsx)(tI,{data:r})]}),Array.isArray(r.modifiers)&&r.modifiers.length>0&&(0,o.jsxs)("div",{className:tM().section,children:[(0,o.jsxs)(l.h,{order:2,className:tM().title,children:[i," data attributes"]}),(0,o.jsx)(tR,{data:r})]})]})}var tL=a(1608),tT=a(57154);function tN(e){let{components:t,componentPrefix:a}=e,n=t.map(e=>(0,o.jsx)("div",{className:tM().group,children:(0,o.jsx)(tz,{component:e,componentPrefix:a})},e));return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)("div",{className:tM().groupsHeader,children:[(0,o.jsx)(l.h,{order:2,className:tM().title,children:"Styles API"}),(0,o.jsxs)(tT.Yw,{style:{marginTop:0},children:[(0,o.jsx)(tL.C,{children:t[0]})," component supports"," ",(0,o.jsx)(tT.K8,{href:"/styles/styles-api",children:"Styles API"}),". With Styles API, you can customize styles of any inner element. Follow"," ",(0,o.jsx)(tT.K8,{href:"/styles/styles-api",children:"the documentation"})," to learn how to use CSS modules, CSS variables and inline styles to get full control over component styles."]})]}),n]})}},98561:e=>{e.exports={wrapper:"LinksGroup_wrapper__ASFtw",link:"LinksGroup_link__HRttR",title:"LinksGroup_title__DSOTq"}},99452:(e,t,a)=>{"use strict";a.d(t,{C:()=>o});var n=a(42573);let o={selectors:{...n.h.selectors,...n.m.selectors},vars:{}}}}]);